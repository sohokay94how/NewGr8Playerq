<?xml version="1.0"?>
<doc>
    <assembly>
        <name>C1.Win.C1SuperTooltip.4</name>
    </assembly>
    <members>
        <member name="T:C1.Win.C1SuperTooltip.C1SuperLabel">
            <summary>
            Represents a label that shows static information on a form.
            </summary>
            <remarks>
            
            <para>The <b>C1SuperLabel</b> control is virtually identical to the 
            <see cref="T:System.Windows.Forms.Label"/> control, with one significant difference: 
            <b>C1SuperLabel</b> displays HTML text instead of plain text. This way, your labels can 
            have multiple fonts, colors, tables, lists, and images.</para>
            
            <para><b>C1SuperLabel</b> does not use IE to render the HTML content. Instead, it has its own 
            light-weight HTML parser and renderer. This means the output you get will not be always 
            be 100% compatible with IE (or FireFox), but in most cases it should be close.
            <b>C1SuperLabel</b> supports cascading style sheets, tables, and most other HTML features.
            For more details, see the <see cref="P:C1.Win.C1SuperTooltip.C1SuperLabel.Text"/> property.</para>
            
            </remarks>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperLabel.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Win.C1SuperTooltip.C1SuperLabel"/> control.
            </summary>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperLabel.ShowAboutBox">
            <summary>
            Displays the AboutBox for this control.
            </summary>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperLabel.ThemeChanged(System.Object)">
            <summary>
            For internal use.
            </summary>
            <param name="newTheme"></param>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperLabel.OnLinkClicked(C1.Win.C1SuperTooltip.C1SuperLabelLinkClickedEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1SuperTooltip.C1SuperLabel.LinkClicked"/> event.
            </summary>
            <param name="e"><see cref="T:C1.Win.C1SuperTooltip.C1SuperLabelLinkClickedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperLabel.Measure">
            <summary>
            Measures the width and height of the control content.
            </summary>
            <returns><see cref="T:System.Drawing.Size"/> object that represents the size of the content, in pixels.</returns>
            <example>
            The code below scans all the rows in a <b>C1FlexGrid</b> and calculates the width needed
            to display the cell with the widest content:
            <code>
            int GetMaximumCellWidth(int col)
            {
              // maximum width is unknown
              int maxWidth = -1;
            
              // scan all rows to find the widest content
              for (int row = 0; row &lt; _flex.Rows.Count; row++)
              {
                // get cell content
                string text = _flex.GetDataDisplay(row, col);
            
                // check that the cell contains html
                if (!string.IsNullOrEmpty(text) &amp;&amp;
                     text.StartsWith("&lt;html&gt;"))
                {
                  // measure width needed to render the Html
                  _superLabel.Text = text;
                  int width = _superLabel.Measure().Width;
            
                  // save maximum width
                  if (width &gt; maxWidth)
                    maxWidth = width;
              }
              return maxWidth;
            }
            </code>
            </example>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperLabel.Measure(System.Int32)">
            <summary>
            Measures the height of the control content when rendered with a given width.
            </summary>
            <param name="width">Width used to calculate word-wrapping.</param>
            <returns><see cref="T:System.Drawing.Size"/> object that represents the size of the content, in pixels.</returns>
            <example>
            The code below scans all the columns in a <b>C1FlexGrid</b> and calculates the height needed
            to display the cell with the tallest content:
            <code>
            int GetMaximumCellHeight(int row)
            {
              // maximum height is unknown
              int maxHeight = -1;
            
              // scan all columns to find the tallest content
              for (int col = 0; col &lt; _flex.Cols.Count; col++)
              {
                // get cell content
                string text = _flex.GetDataDisplay(row, col);
            
                // check that the cell contains html
                if (!string.IsNullOrEmpty(text) &amp;&amp;
                     text.StartsWith("&lt;html&gt;"))
                {
                  // measure height needed to render the Html
                  _superLabel.Text = text;
                  int width = _flex.Cols[col].WidthDisplay;
                  int height = _superLabel.Measure(width).Height;
            
                  // save maximum height
                  if (height &gt; maxHeight)
                    maxHeight = height;
              }
              return maxHeight;
            }
            </code>
            </example>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperLabel.DrawToGraphics(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws the control content into a given <see cref="T:System.Drawing.Graphics"/> object.
            </summary>
            <param name="g"><see cref="T:System.Drawing.Graphics"/> object where the content will be rendered.</param>
            <param name="bounds"><see cref="T:System.Drawing.Rectangle"/> that specifies the bounds where the content will be rendered.</param>
            <example>
            The example below uses the <b>DrawToGraphics</b> method to render Html in a <b>C1FlexGrid</b> control.
            Grid cells containing text that starts with an &lt;html&gt; tag are rendered as Html. Other cells are
            rendered by the grid as usual.
            <code>
            void _flex_OwnerDrawCell(object sender, OwnerDrawCellEventArgs e)
            {
              // get cell content
              string text = _flex.GetDataDisplay(e.Row, e.Col);
            
              // check that the cell contains html
              if (!string.IsNullOrEmpty(text) &amp;&amp;
                   text.StartsWith("&lt;html&gt;"))
              {
                // set label back color and content
                _superLabel.BackColor = e.Style.BackColor;
                _superLabel.Text = text;
            
                // draw the Html into grid cell
                _superLabel.DrawToGraphics(e.Graphics, e.Bounds);
            
                // cell has been drawn
                e.Handled = true;
              }
            }
            </code>
            </example>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperLabel.DrawToGraphics(System.Drawing.Graphics,System.Drawing.RectangleF,System.Int32)">
            <summary>
            Draws an HTML string in the specified rectangle with the specified <see cref="T:System.Drawing.Brush"/> and <see cref="T:System.Drawing.Font"/> objects,
            starting at a given offset within the string.
            </summary>
            <param name="g"><see cref="T:System.Drawing.Graphics"/> object where the content will be rendered.</param>
            <param name="bounds"><see cref="T:System.Drawing.Rectangle"/> that specifies the bounds where the content will be rendered.</param>
            <param name="offset">Offset of the first line to draw (usually the return value of a previous call to <b>DrawStringHtml</b>).</param>
            <returns>The offset of the first line that was not printed because it did not fit in the specified rectangle, or the value of 
            <see cref="F:System.Int32.MaxValue"/> if the entire string was rendered.</returns>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperLabel.GetInnerElement">
            <summary>
            This method is intended for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperLabel.OnRightToLeftChanged(System.EventArgs)">
            <summary>
            Update internal style when RightToLeft property changes.
            </summary>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperLabel.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.Paint"/> event.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperLabel.ProcessMnemonic(System.Char)">
            <summary>
            Processes a mnemonic character.
            </summary>
            <param name="charCode">The character to process. </param>
            <returns>True if the character was processed as a mnemonic by the control; otherwise, false.</returns>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperLabel.OnTextChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.TextChanged"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperLabel.OnBackColorChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.BackColorChanged"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperLabel.OnForeColorChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.ForeColorChanged"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperLabel.OnFontChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.FontChanged"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperLabel.OnSizeChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.SizeChanged"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperLabel.OnPaddingChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.PaddingChanged"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperLabel.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.MouseDown"/> event.
            </summary>
            <param name="e"><see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperLabel.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.MouseMove"/> event.
            </summary>
            <param name="e"><see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperLabel.OnCursorChanged(System.EventArgs)">
            <summary>
            Occurs when the value of the <see cref="T:System.Windows.Forms.Cursor"/> property changes. 
            </summary>
            <param name="e"><see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperLabel.Dispose(System.Boolean)">
            <summary>
            Releases resources used by the component
            </summary>
            <param name="disposing">True to release all resources; false to release unmanaged resources only.</param>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperLabel.ApplyStyle(C1.Framework.Style)">
            <summary>
            Recreates HTML element using the specified style and UseMnemonic value,
            re-parses the text.
            </summary>
            <param name="style">The style to apply.</param>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperLabel.UpdateText">
            <summary>
            Parses the Text property into Html.
            </summary>
        </member>
        <member name="E:C1.Win.C1SuperTooltip.C1SuperLabel.LinkClicked">
            <summary>
            Event that fires when the user clicks a hyperlink within a <see cref="T:C1.Win.C1SuperTooltip.C1SuperLabel"/> control.
            </summary>
            <remarks>
            Hyperlinks are created using "A" tags in the HTML source text. When hyperlinks are clicked,
            the <b>LinkClicked</b> event fires and provides information about the link. The event handler
            can then take appropriate action.
            </remarks>
            <example>
            The example below creates some hyperlinks using "A" tags. When the user clicks the link, the
            event handler shows a message box.
            <code>
            // configure c1superLabel
            c1superLabel.AutoSize = true;
            c1superLabel.Text =
                "click &lt;a href='about'&gt;&lt;b&gt;HERE&lt;/b&gt;&lt;/a&gt; to see an about box.&lt;br&gt;" +
                "or click &lt;a href='time'&gt;&lt;b&gt;HERE&lt;/b&gt;&lt;/a&gt; to see the current time.";
            
            // attach event handler
            c1superLabel.LinkClicked += new C1SuperLabelLinkClickedEventHandler(c1superLabel_LinkClicked);
            // ...
            
            void c1superLabel_LinkClicked(object sender, C1SuperLabelLinkClickedEventArgs e)
            {
              if (e.HRef == "about")
              {
                MessageBox.Show("About C1SuperLabel!");
              }
              else if (e.HRef == "time")
              {
                MessageBox.Show("The time is " + DateTime.Now.ToShortTimeString());
              }
            }
            </code>
            </example>
        </member>
        <member name="P:C1.Win.C1SuperTooltip.C1SuperLabel.BorderStyle">
            <summary>
            Gets or sets the type of border around the control.
            </summary>
        </member>
        <member name="P:C1.Win.C1SuperTooltip.C1SuperLabel.Text">
            <summary>
            Gets or sets the HTML text that is displayed in the control.
            </summary>
            <remarks>
            
            <para><see cref="T:C1.Win.C1SuperTooltip.C1SuperLabel"/> can display HTML text, including cascading style sheets,
            lists, tables, and images. To include images in your tooltips, use an &lt;img&gt; tag as
            usual, for example:</para>
            
            <code>&lt;img src='[resourcename]'/&gt;</code>
            
            <para>where <code>[resourcename]</code> is the name of an embedded resource that
            contains the image. The example below illustrates this.</para>
            
            </remarks>
            <example>
            <para>The code below uses a <see cref="T:C1.Win.C1SuperTooltip.C1SuperLabel"/> to display a table with some images
            in it. The images are retrieved from the current application's resources.</para>
            <code>
            _c1SuperLabel.Text =
              "&lt;table&gt;" +
              "&lt;tr&gt;" +
              "&lt;td&gt;&lt;img src='newToolStripButton.Image'&gt;" +
              "&lt;td&gt;This  is the second cell in the top row" +
              "&lt;tr&gt;" +
              "&lt;td&gt;&lt;img src='openToolStripButton.Image'&gt;" +
              "&lt;td&gt;This  is the second cell in the bottom row." +
              "&lt;/table&gt;";
            </code>
            </example>
        </member>
        <member name="P:C1.Win.C1SuperTooltip.C1SuperLabel.Images">
            <summary>
            Gets a collection of images that may be shown in the label.
            </summary>
        </member>
        <member name="P:C1.Win.C1SuperTooltip.C1SuperLabel.UseMnemonic">
            <summary>
            Gets or sets whether ampersands (&amp;) are used to indicate the next character is a hot key.
            </summary>
        </member>
        <member name="P:C1.Win.C1SuperTooltip.C1SuperLabel.AutoSize">
            <summary>
            Gets or sets a value indicating whether the control is automatically resized to display its entire contents. 
            </summary>
        </member>
        <member name="P:C1.Win.C1SuperTooltip.C1SuperLabel.BackgroundImageLayout">
            <summary>
            Gets or sets the background image layout as defined in the <see cref="P:C1.Win.C1SuperTooltip.C1SuperLabel.BackgroundImageLayout"/> enumeration. 
            </summary>
        </member>
        <member name="P:C1.Win.C1SuperTooltip.C1SuperLabel.BackgroundImage">
            <summary>
            Gets or sets the background image displayed in the control. 
            </summary>
        </member>
        <member name="P:C1.Win.C1SuperTooltip.C1SuperLabel.CreateParams">
            <summary>
            Gets the required creation parameters when the control handle is created.
            </summary>
        </member>
        <member name="T:C1.Win.C1SuperTooltip.C1SuperLabelLinkClickedEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:C1.Win.C1SuperTooltip.C1SuperLabel.LinkClicked"/> event.
            </summary>
            <param name="sender">Object that fired the event.</param>
            <param name="e"><see cref="T:System.Windows.Forms.LinkClickedEventArgs"/> object that contains the event data.</param>
        </member>
        <member name="T:C1.Win.C1SuperTooltip.C1SuperLabelLinkClickedEventArgs">
            <summary>
            Provides data for the <see cref="E:C1.Win.C1SuperTooltip.C1SuperLabel.LinkClicked"/> event.
            </summary>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperLabelLinkClickedEventArgs.#ctor(System.Windows.Forms.MouseButtons,System.String,System.String)">
            <summary>
            Initializes a new instance of a <see cref="T:System.Windows.Forms.LinkClickedEventArgs"/>.
            </summary>
            <param name="button"><see cref="T:System.Windows.Forms.MouseButtons"/> that was pressed on the link.</param>
            <param name="hRef">Value of the link's HREF attribute.</param>
            <param name="target">Value of the link's TARGET attribute.</param>
        </member>
        <member name="P:C1.Win.C1SuperTooltip.C1SuperLabelLinkClickedEventArgs.Button">
            <summary>
            Gets the button that was clicked on the link.
            </summary>
        </member>
        <member name="P:C1.Win.C1SuperTooltip.C1SuperLabelLinkClickedEventArgs.HRef">
            <summary>
            Gets the value of the link's HREF attribute.
            </summary>
        </member>
        <member name="P:C1.Win.C1SuperTooltip.C1SuperLabelLinkClickedEventArgs.Target">
            <summary>
            Gets the value of the link's TARGET attribute.
            </summary>
        </member>
        <member name="T:C1.Win.C1SuperTooltip.BackgroundGradient">
            <summary>
            Specifies a background gradient for the ToolTip.
            </summary>
        </member>
        <member name="F:C1.Win.C1SuperTooltip.BackgroundGradient.None">
            <summary>
            Use no background gradient.
            </summary>
        </member>
        <member name="F:C1.Win.C1SuperTooltip.BackgroundGradient.Automatic">
            <summary>
            Use a gradient that matches the current system Visual Style.
            </summary>
        </member>
        <member name="F:C1.Win.C1SuperTooltip.BackgroundGradient.Silver">
            <summary>
            Use a silver background gradient.
            </summary>
        </member>
        <member name="F:C1.Win.C1SuperTooltip.BackgroundGradient.Blue">
            <summary>
            Use a blue background gradient.
            </summary>
        </member>
        <member name="F:C1.Win.C1SuperTooltip.BackgroundGradient.Gold">
            <summary>
            Use a gold background gradient.
            </summary>
        </member>
        <member name="F:C1.Win.C1SuperTooltip.BackgroundGradient.Olive">
            <summary>
            Use an olive background gradient.
            </summary>
        </member>
        <member name="F:C1.Win.C1SuperTooltip.BackgroundGradient.Vista">
            <summary>
            Use the Vista-style background gradient.
            </summary>
        </member>
        <member name="T:C1.Win.C1SuperTooltip.BackgroundImageLayout">
            <summary>
            Specifies the layout logic used to display the background image.
            </summary>
        </member>
        <member name="F:C1.Win.C1SuperTooltip.BackgroundImageLayout.None">
            <summary>
            The image is left-aligned at the top across the control's client rectangle.
            </summary>
        </member>
        <member name="F:C1.Win.C1SuperTooltip.BackgroundImageLayout.Tile">
            <summary>
            The image is tiled across the control's client rectangle.
            </summary>
        </member>
        <member name="F:C1.Win.C1SuperTooltip.BackgroundImageLayout.Center">
            <summary>
            The image is centered within the control's client rectangle.
            </summary>
        </member>
        <member name="F:C1.Win.C1SuperTooltip.BackgroundImageLayout.Stretch">
            <summary>
            The image is stretched across the control's client rectangle. 
            </summary>
        </member>
        <member name="F:C1.Win.C1SuperTooltip.BackgroundImageLayout.Zoom">
            <summary>
            The image is enlarged within the control's client rectangle.
            </summary>
        </member>
        <member name="F:C1.Win.C1SuperTooltip.BackgroundImageLayout.TileStretch">
            <summary>
            The image is split into nine pieces and tiled within the control's client rectangle.
            Center tiles are stretched, corner tiles are rendered with the original size.
            </summary>
        </member>
        <member name="T:C1.Win.C1SuperTooltip.C1SuperTooltip">
            <summary>
            Represents a pop-up window that displays a brief description of a control's purpose 
            when the mouse hovers over the control.
            </summary>
            <remarks>
            
            <para>The <b>C1SuperTooltip</b> component is virtually identical to the 
            <see cref="T:System.Windows.Forms.ToolTip"/> component, with one significant difference: 
            <b>C1SuperTooltip</b> displays HTML text instead of plain text. This way, your tooltips can 
            have multiple fonts, colors, tables, lists, and images. See the <see cref="M:C1.Win.C1SuperTooltip.C1SuperTooltip.SetToolTip(System.Windows.Forms.Control,System.String)"/>
            method for details and examples.</para>
            
            <para>You can associate HTML tooltips with any <see cref="T:System.Windows.Forms.Control"/> or
            <see cref="T:System.Windows.Forms.ToolStripItem"/> on the form.</para>
            
            <para><b>C1SuperTooltip</b> does not use IE to render the HTML content. Instead, it has its own 
            light-weight HTML parser and renderer. This means the output you get will not be always 
            be 100% compatible with IE (or FireFox), but in most cases it should be close.
            <b>C1SuperTooltip</b> supports cascading style sheets, tables, and most other HTML features.
            For more details, see the <see cref="M:C1.Win.C1SuperTooltip.C1SuperTooltip.SetToolTip(System.Windows.Forms.Control,System.String)"/> method.</para>
            
            <para>The <b>C1SuperTooltip</b> component allows you to provide help to users when they place 
            the mouse cursor over a control. The <b>C1SuperTooltip</b> component is typically used to 
            alert users to the intended use of a control. For example, you could specify tooltip 
            text for a <b>TextBox</b> control that accepts a name, specifying the format of the 
            name to typed into the control. In addition to providing help, you can also use the 
            <b>C1SuperTooltip</b> component to provide run time status information. For example, you 
            could use the <b>C1SuperTooltip</b> component to display connection speed and line quality 
            data when the user moves the mouse cursor over a <b>PictureBox</b> control that displays 
            Internet connection status.</para>
            
            <para>The <b>C1SuperTooltip</b> component provides properties that enable you to modify how 
            long and how quickly a tooltip window is displayed. The <see cref="P:C1.Win.C1SuperTooltip.C1SuperTooltip.AutoPopDelay"/> 
            property determines how long a tooltip window is displayed; the <see cref="P:C1.Win.C1SuperTooltip.C1SuperTooltip.InitialDelay"/> and 
            <see cref="P:C1.Win.C1SuperTooltip.C1SuperTooltip.ReshowDelay"/> properties determine the delay before a tooltip window is displayed. 
            To set all of these properties to a consistent pattern, you can use the <see cref="P:C1.Win.C1SuperTooltip.C1SuperTooltip.AutomaticDelay"/>
            property. This value is then used to calculate and set the values of the other delay properties.
            To enable a control's tooltip text to be displayed regardless of whether the <b>Form</b> or 
            container the control is contained within is enabled, you can use the <b>ShowAlways</b> property.
            If you want to disable all tooltip text from being displayed in your application, you can 
            use the <see cref="P:C1.Win.C1SuperTooltip.C1SuperTooltip.Active"/> property.</para>
            
            <para>The <b>C1SuperTooltip</b> component can be used in any container. To specify a specific 
            container to use the <b>C1SuperTooltip</b> component within, use the <b>C1SuperTooltip</b> constructor. 
            In order for tooltip text to be displayed when the user moves the mouse cursor over a control,
            the tooltip text to be displayed must be associated with the control within an instance of the
            <b>C1SuperTooltip</b> component. To associate tooltip text with a control, use the <see cref="M:C1.Win.C1SuperTooltip.C1SuperTooltip.SetToolTip(System.Windows.Forms.Control,System.String)"/>
            method. The <b>SetToolTip</b> method can be called more than once for the same control to change
            the text that is associated with the control. If you want to get the text that is associated 
            with a control, use the <see cref="M:C1.Win.C1SuperTooltip.C1SuperTooltip.GetToolTip(System.Windows.Forms.Control)"/> method. To remove all tooltip text 
            associations with an instance of the <b>C1SuperTooltip</b> component, use the <see cref="M:C1.Win.C1SuperTooltip.C1SuperTooltip.RemoveAll"/>
            method.</para>
            </remarks>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperTooltip.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Win.C1SuperTooltip.C1SuperTooltip"/> component.
            </summary>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperTooltip.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Win.C1SuperTooltip.C1SuperTooltip"/> component.
            </summary>
            <param name="container">An <see cref="T:System.ComponentModel.IContainer"/>that represents the container of the <see cref="T:C1.Win.C1SuperTooltip.C1SuperTooltip"/>.</param>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperTooltip.ShowAboutBox">
            <summary>
            Displays the AboutBox for this control.
            </summary>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperTooltip.ThemeChanged(System.Object)">
            <summary>
            For internal use.
            </summary>
            <param name="newTheme"></param>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperTooltip.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperTooltip.ShouldSerializeAutoPopDelay">
            <summary>
            Gets a value that determines whether the <see cref="P:C1.Win.C1SuperTooltip.C1SuperTooltip.AutoPopDelay"/> property should be serialized.
            </summary>
            <returns>True if the current value is different from the default (10 * <see cref="P:C1.Win.C1SuperTooltip.C1SuperTooltip.AutomaticDelay"/>).</returns>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperTooltip.ShouldSerializeInitialDelay">
            <summary>
            Gets a value that determines whether the <see cref="P:C1.Win.C1SuperTooltip.C1SuperTooltip.InitialDelay"/> property should be serialized.
            </summary>
            <returns>True if the current value is different from the default (<see cref="P:C1.Win.C1SuperTooltip.C1SuperTooltip.AutomaticDelay"/>).</returns>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperTooltip.ShouldSerializeReshowDelay">
            <summary>
            Gets a value that determines whether the <see cref="P:C1.Win.C1SuperTooltip.C1SuperTooltip.ReshowDelay"/> property should be serialized.
            </summary>
            <returns>True if the current value is different from the default (<see cref="P:C1.Win.C1SuperTooltip.C1SuperTooltip.AutomaticDelay"/> / 5).</returns>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperTooltip.GetToolTip(System.Windows.Forms.Control)">
            <summary>
            Retrieves the <see cref="T:C1.Win.C1SuperTooltip.C1SuperTooltip"/> text associated with the specified control.
            </summary>
            <param name="control">The <b>Control</b> for which to retrieve the tooltip text.</param>
            <returns>The tooltip text for the specified control.</returns>
            <remarks>
            This method enables you to retrieve the tooltip text for any control. If the tooltip text 
            changes dynamically in an application, you can use this method to find out what text is 
            displayed at any point, depending on the state of the application. To change the text 
            that a control is displaying, use the <see cref="M:C1.Win.C1SuperTooltip.C1SuperTooltip.SetToolTip(System.Windows.Forms.Control,System.String)"/> method.
            </remarks>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperTooltip.SetToolTip(System.Windows.Forms.Control,System.String)">
            <summary>
            Associates tooltip HTML text with the specified control.
            <param name="control">The <b>Control</b> to associate the tooltip text with.</param>
            <param name="text">The tooltip text to display when the mouse cursor is over the control.</param>
            </summary>
            <remarks>
            
            <para>In addition to specifying the tooltip text to display for a control, you can also use 
            this method to modify the tooltip text for a control. Calling the <b>SetToolTip</b> 
            method more than once for a given control does not specify multiple tooltip text to 
            display for a control but instead changes the current tooltip text for the control.</para>
            <para>To determine the tooltip text that is associated with a control at run time, you can 
            use the <see cref="M:C1.Win.C1SuperTooltip.C1SuperTooltip.GetToolTip(System.Windows.Forms.Control)"/> method.</para>
            
            <para><see cref="T:C1.Win.C1SuperTooltip.C1SuperTooltip"/> can display HTML text, including cascading style sheets,
            lists, tables, and images. To include images in your tooltips, use an &lt;img&gt; tag as
            usual, for example:</para>
            
            <code>&lt;img src='[resourcename]'/&gt;</code>
            
            <para>where <code>[resourcename]</code> is the name of an embedded resource that
            contains the image. The second example below illustrates this.</para>
            
            </remarks>
            <example>
            The code below associates an HTML snippet with a <b>ListBox</b> control. The HTML
            contains two lines of text with some bold words in it.
            <code>
            _C1SuperTooltip1.SetToolTip(this.listBox1,
              "This is a tip &lt;b&gt;with bold&lt;/b&gt; text in it&lt;br&gt;it is also multi-line...");
            </code>
            The code below associates an HTML snippet with a <b>RichTextBox</b> control. The HTML
            contains a table with two columns. The first column contains an image, loaded from the
            application's resources. In this case, the application must include an embedded resource 
            named 'tips.gif'. The second column contains some formatted text.
            <code>
            _C1SuperTooltip1.SetToolTip(richTextBox1,
              @"&lt;table&gt;&lt;tr&gt;
              &lt;td&gt;&lt;img src='tips.gif'/&gt;&lt;/td&gt;
              &lt;td&gt;This is a multiline&lt;br&gt;tooltip&lt;br&gt;&lt;b&gt;associated
              &lt;/b&gt;&lt;br&gt;with the rich text box...&lt;/td&gt;
              &lt;/tr&gt;&lt;/table&gt;");
            </code>
            </example>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperTooltip.SetToolTip(System.Windows.Forms.ToolStripItem,System.String)">
            <summary>
            Associates tooltip HTML text with the specified <see cref="T:System.Windows.Forms.ToolStripItem"/>.
            </summary>
            <param name="item">The <b>ToolStripItem</b> to associate the tooltip text with.</param>
            <param name="text">The tooltip text to display when the mouse cursor is over the control.</param>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperTooltip.RemoveAll">
            <summary>
            Removes all tooltip text currently associated with the <see cref="T:C1.Win.C1SuperTooltip.C1SuperTooltip"/> component.
            </summary>
            <remarks>
            You can use this method to remove all tooltip text that is associated with the 
            <see cref="T:C1.Win.C1SuperTooltip.C1SuperTooltip"/> component. To disable the display of text instead of removing all 
            tooltip text from the <b>C1SuperTooltip</b> control, use the <see cref="P:C1.Win.C1SuperTooltip.C1SuperTooltip.Active"/> property.
            </remarks>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperTooltip.OnPopup(C1.Win.C1SuperTooltip.PopupEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1SuperTooltip.C1SuperTooltip.Popup"/> event.
            </summary>
            <param name="e"><see cref="T:C1.Win.C1SuperTooltip.PopupEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperTooltip.OnLinkClicked(C1.Win.C1SuperTooltip.C1SuperLabelLinkClickedEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1SuperTooltip.C1SuperTooltip.LinkClicked"/> event.
            </summary>
            <param name="e"><see cref="T:C1.Win.C1SuperTooltip.C1SuperLabelLinkClickedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperTooltip.Show(System.String,System.Windows.Forms.Control,System.Drawing.Point,System.Int32)">
            <summary>
            Shows the tooltip with the specified text, for the specified control, at the specified position, for a specified amount of time.
            </summary>
            <param name="text">Text to be displayed in the tooltip.</param>
            <param name="control"><see cref="T:System.Windows.Forms.Control"/> that the tooltip is associated with.</param>
            <param name="pt"><see cref="T:System.Drawing.Point"/> in client coordinates where the tooltip is to be displayed.</param>
            <param name="duration">Duration of the tooltip, in milliseconds.</param>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperTooltip.Show(System.String,System.Windows.Forms.Control,System.Int32,System.Int32,System.Int32)">
            <summary>
            Shows the tooltip with the specified text, for the specified control, at the specified position, for a specified amount of time.
            </summary>
            <param name="text">Text to be displayed in the tooltip.</param>
            <param name="control"><see cref="T:System.Windows.Forms.Control"/> that the tooltip is associated with.</param>
            <param name="x">X client coordinate where the tooltip is to be displayed.</param>
            <param name="y">Y client coordinate where the tooltip is to be displayed.</param>
            <param name="duration">Duration of the tooltip, in milliseconds.</param>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperTooltip.Show(System.String,System.Windows.Forms.Control,System.Int32)">
            <summary>
            Shows the tooltip with the specified text, for the specified control, for a specified amount of time.
            </summary>
            <param name="text">Text to be displayed in the tooltip.</param>
            <param name="control"><see cref="T:System.Windows.Forms.Control"/> that the tooltip is associated with.</param>
            <param name="duration">Duration of the tooltip, in milliseconds.</param>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperTooltip.Show(System.String,System.Windows.Forms.Control,System.Drawing.Point)">
            <summary>
            Shows the tooltip with the specified text, for the specified control, at the specified position.
            </summary>
            <param name="text">Text to be displayed in the tooltip.</param>
            <param name="control"><see cref="T:System.Windows.Forms.Control"/> that the tooltip is associated with.</param>
            <param name="pt"><see cref="T:System.Drawing.Point"/> in client coordinates where the tooltip is to be displayed.</param>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperTooltip.Show(System.String,System.Windows.Forms.Control,System.Int32,System.Int32)">
            <summary>
            Shows the tooltip with the specified text, for the specified control, at the specified position.
            </summary>
            <param name="text">Text to be displayed in the tooltip.</param>
            <param name="control"><see cref="T:System.Windows.Forms.Control"/> that the tooltip is associated with.</param>
            <param name="x">X client coordinate where the tooltip is to be displayed.</param>
            <param name="y">Y client coordinate where the tooltip is to be displayed.</param>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperTooltip.Show(System.String,System.Windows.Forms.Control)">
            <summary>
            Shows the tooltip with the specified text for the specified control.
            </summary>
            <param name="text">Text to be displayed in the tooltip.</param>
            <param name="control"><see cref="T:System.Windows.Forms.Control"/> that the tooltip is associated with.</param>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperTooltip.Hide">
            <summary>
            Hides the <see cref="T:C1.Win.C1SuperTooltip.C1SuperTooltip"/> if it is currently visible.
            </summary>
            <remarks>
            This method does not disable or otherwise prevent the tooltip from being displayed in the future.
            To do that, set the <see cref="P:C1.Win.C1SuperTooltip.C1SuperTooltip.Active"/> property to false instead.
            </remarks>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperTooltip.Hide(System.Windows.Forms.Control)">
            <summary>
            Hides the <see cref="T:C1.Win.C1SuperTooltip.C1SuperTooltip"/> if it is currently visible.
            </summary>
            <param name="control">The <see cref="T:System.Windows.Forms.Control"/> that the <see cref="T:C1.Win.C1SuperTooltip.C1SuperTooltip"/> is associated with.</param>
            <remarks>
            This method does not disable or otherwise prevent the tooltip from being displayed in the future.
            To do that, set the <see cref="P:C1.Win.C1SuperTooltip.C1SuperTooltip.Active"/> property to false instead.
            </remarks>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperTooltip.Show(System.String,System.Windows.Forms.ToolStripItem,System.Drawing.Point,System.Int32)">
            <summary>
            Shows the tooltip with the specified text, for the specified <see cref="T:System.Windows.Forms.ToolStripItem"/>, at the specified position, for a specified amount of time.
            </summary>
            <param name="text">Text to be displayed in the tooltip.</param>
            <param name="item"><see cref="T:System.Windows.Forms.ToolStripItem"/> that the tooltip is associated with.</param>
            <param name="pt"><see cref="T:System.Drawing.Point"/> in client coordinates where the tooltip is to be displayed.</param>
            <param name="duration">Duration of the tooltip, in milliseconds.</param>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperTooltip.Show(System.String,System.Windows.Forms.ToolStripItem,System.Int32,System.Int32,System.Int32)">
            <summary>
            Shows the tooltip with the specified text, for the specified <see cref="T:System.Windows.Forms.ToolStripItem"/>, at the specified position, for a specified amount of time.
            </summary>
            <param name="text">Text to be displayed in the tooltip.</param>
            <param name="item"><see cref="T:System.Windows.Forms.ToolStripItem"/> that the tooltip is associated with.</param>
            <param name="x">X client coordinate where the tooltip is to be displayed.</param>
            <param name="y">Y client coordinate where the tooltip is to be displayed.</param>
            <param name="duration">Duration of the tooltip, in milliseconds.</param>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperTooltip.Show(System.String,System.Windows.Forms.ToolStripItem,System.Int32)">
            <summary>
            Shows the tooltip with the specified text, for the specified <see cref="T:System.Windows.Forms.ToolStripItem"/>, for a specified amount of time.
            </summary>
            <param name="text">Text to be displayed in the tooltip.</param>
            <param name="item"><see cref="T:System.Windows.Forms.ToolStripItem"/> that the tooltip is associated with.</param>
            <param name="duration">Duration of the tooltip, in milliseconds.</param>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperTooltip.Show(System.String,System.Windows.Forms.ToolStripItem,System.Drawing.Point)">
            <summary>
            Shows the tooltip with the specified text, for the specified <see cref="T:System.Windows.Forms.ToolStripItem"/>, at the specified position.
            </summary>
            <param name="text">Text to be displayed in the tooltip.</param>
            <param name="item"><see cref="T:System.Windows.Forms.ToolStripItem"/> that the tooltip is associated with.</param>
            <param name="pt"><see cref="T:System.Drawing.Point"/> in client coordinates where the tooltip is to be displayed.</param>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperTooltip.Show(System.String,System.Windows.Forms.ToolStripItem,System.Int32,System.Int32)">
            <summary>
            Shows the tooltip with the specified text, for the specified <see cref="T:System.Windows.Forms.ToolStripItem"/>, at the specified position.
            </summary>
            <param name="text">Text to be displayed in the tooltip.</param>
            <param name="item"><see cref="T:System.Windows.Forms.ToolStripItem"/> that the tooltip is associated with.</param>
            <param name="x">X client coordinate where the tooltip is to be displayed.</param>
            <param name="y">Y client coordinate where the tooltip is to be displayed.</param>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperTooltip.Show(System.String,System.Windows.Forms.ToolStripItem)">
            <summary>
            Shows the tooltip with the specified text for the specified <see cref="T:System.Windows.Forms.ToolStripItem"/>.
            </summary>
            <param name="text">Text to be displayed in the tooltip.</param>
            <param name="item"><see cref="T:System.Windows.Forms.ToolStripItem"/> that the tooltip is associated with.</param>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperTooltip.Hide(System.Windows.Forms.ToolStripItem)">
            <summary>
            Hides the <see cref="T:C1.Win.C1SuperTooltip.C1SuperTooltip"/> if it is currently visible.
            </summary>
            <param name="item"><see cref="T:System.Windows.Forms.ToolStripItem"/> that the tooltip is associated with.</param>
            <remarks>
            This method does not disable or otherwise prevent the tooltip from being displayed in the future.
            To do that, set the <see cref="P:C1.Win.C1SuperTooltip.C1SuperTooltip.Active"/> property to false instead.
            </remarks>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperTooltip.GetGradientImage(C1.Win.C1SuperTooltip.BackgroundGradient)">
            <summary>
            This method is intended for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1SuperTooltip.C1SuperTooltip.Active">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:C1.Win.C1SuperTooltip.C1SuperTooltip"/> is currently active.
            </summary>
            <remarks>
            <para>This property allows you to enable or disable the display of <see cref="T:C1.Win.C1SuperTooltip.C1SuperTooltip"/> 
            text for all controls that have text specified in this particular <b>C1SuperTooltip</b>. 
            More than one <b>C1SuperTooltip</b> can be created and assigned to a form; setting the 
            <b>Active</b> property to false only affects the specified <b>C1SuperTooltip</b>.</para>
            <para>You can allow users to set the value of this property in a form that provides 
            application options to provide the ability for the user to enable or disable the display 
            of <b>C1SuperTooltips</b> in your application.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1SuperTooltip.C1SuperTooltip.AutomaticDelay">
            <summary>
            Gets or sets the automatic delay for the <see cref="T:C1.Win.C1SuperTooltip.C1SuperTooltip"/>.
            </summary>
            <remarks>
            <para>The <b>AutomaticDelay</b> property enables you to set a single delay value which 
            is then used to set the values of the <see cref="P:C1.Win.C1SuperTooltip.C1SuperTooltip.AutoPopDelay"/>, <see cref="P:C1.Win.C1SuperTooltip.C1SuperTooltip.InitialDelay"/>, 
            and <see cref="P:C1.Win.C1SuperTooltip.C1SuperTooltip.ReshowDelay"/> properties. Each time the <b>AutomaticDelay</b> property is set, 
            the following values are set by default.</para>
            <para><b>AutoPopDelay</b>: 10 times the <b>AutomaticDelay</b> property value.</para>
            <para><b>InitialDelay</b>: Equal to the <b>AutomaticDelay</b> property value.</para>
            <para><b>ReshowDelay</b>: 1/5 of the <b>AutomaticDelay</b> property value.</para>
            <para>These properties can also be set independently once the AutomaticDelay property has been set. 
            For more information, see the <see cref="P:C1.Win.C1SuperTooltip.C1SuperTooltip.AutoPopDelay"/>, <see cref="P:C1.Win.C1SuperTooltip.C1SuperTooltip.InitialDelay"/>, and 
            <see cref="P:C1.Win.C1SuperTooltip.C1SuperTooltip.ReshowDelay"/> properties. This property is typically used to provide a consistent 
            delay pattern for your <see cref="T:C1.Win.C1SuperTooltip.C1SuperTooltip"/> windows.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1SuperTooltip.C1SuperTooltip.AutoPopDelay">
            <summary>
            Gets or sets the period of time (in milliseconds) the tooltip remains visible if the 
            mouse pointer is stationary within a control.
            </summary>
            <remarks>
            <para>This property enables you to shorten or lengthen the time that the <see cref="T:C1.Win.C1SuperTooltip.C1SuperTooltip"/> 
            window is displayed when the mouse pointer is over a control. For example, if you display 
            extensive help in a <b>C1SuperTooltip</b> window, you can increase the value of this property 
            to ensure that the user has sufficient time to read the text.</para>
            <para>If you want to have a consistent delay pattern for your <b>C1SuperTooltip</b> windows, 
            you can set the <see cref="P:C1.Win.C1SuperTooltip.C1SuperTooltip.AutomaticDelay"/> property. The <b>AutomaticDelay</b> property 
            sets the <b>AutoPopDelay</b>, <see cref="P:C1.Win.C1SuperTooltip.C1SuperTooltip.ReshowDelay"/>, and <see cref="P:C1.Win.C1SuperTooltip.C1SuperTooltip.InitialDelay"/> 
            properties to initial values based on a single value. Every time the <see cref="P:C1.Win.C1SuperTooltip.C1SuperTooltip.AutomaticDelay"/> 
            property is set, the <b>AutoPopDelay</b> property is set to 10 times the <b>AutomaticDelay</b>
            property value. Once the <b>AutomaticDelay</b> property is set, you can independently 
            set the <b>AutoPopDelay</b> property, overriding the default value.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1SuperTooltip.C1SuperTooltip.ShowAlways">
            <summary>
            Gets or sets a value indicating whether a <see cref="T:C1.Win.C1SuperTooltip.C1SuperTooltip"/> window is displayed even 
            when its parent control is not active.
            </summary>
            <remarks>
            
            <para>This property enables you to display a <b>C1SuperTooltip</b> window even when the container 
            of the tooltip is not active.</para>
            
            <para>You can use this feature in a modeless window application to enable <b>C1SuperTooltip</b>
            windows to be displayed regardless of which modeless window is active. This feature is also 
            useful when creating a control using the <b>UserControl</b> that contains a number of 
            controls that display tooltips. Since the <b>UserControl</b> is often not the active 
            window on a form, setting this property to true enables the controls within the 
            <b>UserControl</b> to display <see cref="T:C1.Win.C1SuperTooltip.C1SuperTooltip"/> windows at any time.</para>
            
            </remarks>
        </member>
        <member name="P:C1.Win.C1SuperTooltip.C1SuperTooltip.InitialDelay">
            <summary>
            Gets or sets the time that passes before the tooltip appears.
            </summary>
            <remarks>
            <para>This property enables you to shorten or lengthen the time that the <see cref="T:C1.Win.C1SuperTooltip.C1SuperTooltip"/> 
            waits before displaying a tooltip window. If the value of the <see cref="P:C1.Win.C1SuperTooltip.C1SuperTooltip.InitialDelay"/> 
            property is set to a value that is too long in duration, the user of your application 
            may not know that your application provides <b>C1SuperTooltip</b> help. You can use this 
            property to ensure that the user has tooltips displayed quickly by shortening the time 
            specified.</para>
            <para>If you want to have a consistent delay pattern for your <see cref="T:C1.Win.C1SuperTooltip.C1SuperTooltip"/> windows,
            you can set the <see cref="P:C1.Win.C1SuperTooltip.C1SuperTooltip.AutomaticDelay"/> property. The <b>AutomaticDelay</b> property sets the 
            <see cref="P:C1.Win.C1SuperTooltip.C1SuperTooltip.AutoPopDelay"/>, <see cref="P:C1.Win.C1SuperTooltip.C1SuperTooltip.ReshowDelay"/>, and <b>InitialDelay</b> properties 
            to initial values based on a single time value. Every time the <b>AutomaticDelay</b> property 
            is set, the <b>InitialDelay</b> property is set to the same value as the <b>AutomaticDelay</b>
            property. Once the <b>AutomaticDelay</b> property is set, you can independently set the 
            <b>InitialDelay</b> property, overriding the default value.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1SuperTooltip.C1SuperTooltip.ReshowDelay">
            <summary>
            Gets or sets the length of time that must transpire before subsequent <see cref="T:C1.Win.C1SuperTooltip.C1SuperTooltip"/> windows appear 
            as the mouse pointer moves from one control to another.
            </summary>
            <remarks>
            <para>This property enables you to shorten or lengthen the time that the <b>C1SuperTooltip</b> 
            waits before displaying a tooltip window after a previous tooltip window is displayed. 
            The first time a tooltip window is displayed the value of the <see cref="P:C1.Win.C1SuperTooltip.C1SuperTooltip.InitialDelay"/> 
            property is used to determine the delay to apply before initially showing the tooltip 
            window. When a tooltip window is currently being displayed and the user moves the cursor 
            to another control that displays a tooltip window, the value of the <see cref="P:C1.Win.C1SuperTooltip.C1SuperTooltip.ReshowDelay"/> 
            property is used before showing the tooltip for the new control. The tooltip window from 
            the previous control must still be displayed in order for the delay specified in the 
            <b>ReshowDelay</b> property to be used; otherwise the <see cref="P:C1.Win.C1SuperTooltip.C1SuperTooltip.InitialDelay"/> property 
            value is used.</para>
            <para>If you want to have a consistent delay pattern for your <see cref="T:C1.Win.C1SuperTooltip.C1SuperTooltip"/> windows,
            you can set the <see cref="P:C1.Win.C1SuperTooltip.C1SuperTooltip.AutomaticDelay"/> property. The <b>AutomaticDelay</b> property sets the 
            <see cref="P:C1.Win.C1SuperTooltip.C1SuperTooltip.AutoPopDelay"/>, <b>ReshowDelay</b>, and <see cref="P:C1.Win.C1SuperTooltip.C1SuperTooltip.InitialDelay"/> properties 
            to initial values based on a single time value. Every time the <b>AutomaticDelay</b> property 
            is set, the <b>InitialDelay</b> property is set to the same value as the <b>AutomaticDelay</b>
            property. Once the <b>AutomaticDelay</b> property is set, you can independently set the 
            <b>InitialDelay</b> property, overriding the default value.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1SuperTooltip.C1SuperTooltip.BackColor">
            <summary>
            Gets or sets the background color of the tooltip window.
            </summary>
        </member>
        <member name="P:C1.Win.C1SuperTooltip.C1SuperTooltip.ForeColor">
            <summary>
            Gets or sets the foreground color of the tooltip window.
            </summary>
        </member>
        <member name="P:C1.Win.C1SuperTooltip.C1SuperTooltip.Font">
            <summary>
            Gets or sets the default font used to display the tooltip.
            </summary>
        </member>
        <member name="P:C1.Win.C1SuperTooltip.C1SuperTooltip.Shadow">
            <summary>
            Gets or sets whether the tooltip window should display a shadow.
            </summary>
        </member>
        <member name="P:C1.Win.C1SuperTooltip.C1SuperTooltip.Border">
            <summary>
            Gets or sets whether the tooltip window should display a solid border.
            </summary>
        </member>
        <member name="P:C1.Win.C1SuperTooltip.C1SuperTooltip.BorderColor">
            <summary>
            Gets or sets whether the color of the border drawn around the tooltip when the <see cref="P:C1.Win.C1SuperTooltip.C1SuperTooltip.Border"/> property is set to true.
            </summary>
        </member>
        <member name="P:C1.Win.C1SuperTooltip.C1SuperTooltip.BackgroundImage">
            <summary>
            Gets or sets the background image displayed in tooltip window.
            </summary>
        </member>
        <member name="P:C1.Win.C1SuperTooltip.C1SuperTooltip.BackgroundImageLayout">
            <summary>
            Gets or sets the background image layout as defined in the <see cref="P:C1.Win.C1SuperTooltip.C1SuperTooltip.BackgroundImageLayout"/> enumeration.
            </summary>
        </member>
        <member name="P:C1.Win.C1SuperTooltip.C1SuperTooltip.IsBalloon">
            <summary>
            Gets or sets whether the tooltip is shown in a balloon shape.
            </summary>
        </member>
        <member name="P:C1.Win.C1SuperTooltip.C1SuperTooltip.RoundedCorners">
            <summary>
            Gets or sets whether the tooltip window has rounded corners.
            </summary>
            <remarks>
            This property has no effect if <see cref="P:C1.Win.C1SuperTooltip.C1SuperTooltip.IsBalloon"/> is set to true.
            </remarks>
        </member>
        <member name="P:C1.Win.C1SuperTooltip.C1SuperTooltip.StripAmpersands">
            <summary>
            Gets or sets whether ampersands in the text should be hidden.
            </summary>
            <remarks>
            Ampersands should be encoded in HTML as <b>'&amp;amp' or '&#38;'</b>.
            Ampersands that are not properly encoded will not be hidden.
            </remarks>
        </member>
        <member name="P:C1.Win.C1SuperTooltip.C1SuperTooltip.UseFading">
            <summary>
            Gets or sets whether a fade effect should be used when displaying the tooltip.
            </summary>
        </member>
        <member name="P:C1.Win.C1SuperTooltip.C1SuperTooltip.Images">
            <summary>
            Gets a collection of images that may be shown in tooltips.
            </summary>
        </member>
        <member name="P:C1.Win.C1SuperTooltip.C1SuperTooltip.BackgroundGradient">
            <summary>
            Gets or sets the background gradient for the tooltips.
            </summary>
            <remarks>
            <para>When the <b>BackgroundGradient</b> is set to a value other than none, the gradient
            is used instead of the image specified by the <see cref="P:C1.Win.C1SuperTooltip.C1SuperTooltip.BackgroundImage"/> property.</para>
            <para>If you want to use a gradient different from the built-in ones, create an image
            and assign it to the <see cref="P:C1.Win.C1SuperTooltip.C1SuperTooltip.BackgroundImage"/> property.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1SuperTooltip.C1SuperTooltip.MaximumWidth">
            <summary>
            Gets or sets the maximum width of the tooltips.
            </summary>
            <remarks>
            <para>The <see cref="T:C1.Win.C1SuperTooltip.C1SuperTooltip"/> displays Html text. If the tip contains a lot
            of text without Html tags that cause line breaks (such as &lt;br&gt; or &lt;p&gt;
            for example), then the text will not wrap and the tooltip window may be too wide.</para>
            <para>Use this property to force text to wrap within the tooltip so it fits in the
            given width, even without Html line break tags.</para>
            <para>Values less than or equal to zero disable the property and cause the tip text 
            to wrap only at the specified Html break tags.</para>
            <example>
            The code below forces all super tooltips to be less than or equal to 200 pixels 
            wide.
            <code>
            c1SuperTooltip1.MaximumWidth = 200;
            </code>
            </example>
            </remarks>
        </member>
        <member name="P:C1.Win.C1SuperTooltip.C1SuperTooltip.Opacity">
            <summary>
            Gets or sets the opacity of the tooltips.
            </summary>
            <remarks>
            This property should be set to a value between zero (totally transparent)
            and one (totally opaque).
            </remarks>
        </member>
        <member name="P:C1.Win.C1SuperTooltip.C1SuperTooltip.HitTestVisible">
            <summary>
            Gets or sets a value that determines whether the tooltip can be clicked.
            </summary>
            <remarks>
            <para>This property is set to false by default, so the tooltip is invisible to 
            the mouse. All mouse events are passed on to the control under the tooltip.</para>
            <para>Set this property to true if you want to add clickable areas to the tooltip, 
            such as hyperlinks. In this case, the tooltip becomes visible to the mouse handles
            the mouse events itself instead of passing them to the control under the tooltip.</para>
            </remarks>
        </member>
        <member name="E:C1.Win.C1SuperTooltip.C1SuperTooltip.Popup">
            <summary>
            Fires before the <see cref="T:C1.Win.C1SuperTooltip.C1SuperTooltip"/> is displayed.
            </summary>
            <remarks>
            This event allows you to modify the location of the tooltip (by adjusting the <see cref="P:C1.Win.C1SuperTooltip.PopupEventArgs.Location"/> 
            parameter), or to prevent the tooltip from being displayed (by setting the <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> parameter.
            </remarks>
        </member>
        <member name="E:C1.Win.C1SuperTooltip.C1SuperTooltip.LinkClicked">
            <summary>
            Event that fires when the user clicks a hyperlink within a <see cref="T:C1.Win.C1SuperTooltip.C1SuperTooltip"/>.
            </summary>
            <remarks>
            <para>By default, tooltips are invisible to the mouse and therefore cannot be clicked. 
            You must set the <see cref="P:C1.Win.C1SuperTooltip.C1SuperTooltip.HitTestVisible"/> property is to true in order to make the
            tooltip visible to the mouse (and clickable).</para>
            <para>Hyperlinks are created using "A" tags in the HTML source text. When hyperlinks are clicked,
            the <b>LinkClicked</b> event fires and provides information about the link. The event handler
            can then take appropriate action.</para>
            </remarks>
            <example>
            The example below creates some hyperlinks using "A" tags. When the user clicks the link, the
            event handler shows a message box.
            <code>
            // configure c1superTooltip
            c1superTooltip.HitTestVisible = true;
            var tipText =
                "click &lt;a href='about'&gt;&lt;b&gt;HERE&lt;/b&gt;&lt;/a&gt; to see an about box.&lt;br&gt;" +
                "or click &lt;a href='time'&gt;&lt;b&gt;HERE&lt;/b&gt;&lt;/a&gt; to see the current time.";
            c1superTooltip.SetToolTip(someControl, tipText);
            
            // attach event handler
            c1superTooltip.LinkClicked += c1superTooltip_LinkClicked;
            // ...
            
            void c1superTooltip_LinkClicked(object sender, C1SuperLabelLinkClickedEventArgs e)
            {
              if (e.HRef == "about")
              {
                MessageBox.Show("About C1SuperLabel!");
              }
              else if (e.HRef == "time")
              {
                MessageBox.Show("The time is " + DateTime.Now.ToShortTimeString());
              }
            }
            </code>
            </example>
        </member>
        <member name="T:C1.Win.C1SuperTooltip.C1SuperTooltip.ToolStripItemControl">
            <summary>
            Proxy control to allow adding tooltips to ToolStripItems.
            </summary>
        </member>
        <member name="T:C1.Win.C1SuperTooltip.PopupEventHandler">
            <summary>
            Represents the method that handles the <see cref="E:C1.Win.C1SuperTooltip.C1SuperTooltip.Popup"/> event.
            </summary>
            <param name="sender"><see cref="T:C1.Win.C1SuperTooltip.C1SuperTooltip"/> object that fired the event.</param>
            <param name="e"><see cref="T:C1.Win.C1SuperTooltip.PopupEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:C1.Win.C1SuperTooltip.PopupEventArgs">
            <summary>
            Provides data for the <see cref="E:C1.Win.C1SuperTooltip.C1SuperTooltip.Popup"/> event.
            </summary>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.PopupEventArgs.#ctor(System.Windows.Forms.Form,System.Windows.Forms.Control,System.Drawing.Point,System.String)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Win.C1SuperTooltip.PopupEventArgs"/> object.
            </summary>
            <param name="form"><see cref="P:C1.Win.C1SuperTooltip.PopupEventArgs.Form"/> that contains the tooltip.</param>
            <param name="control"><see cref="P:C1.Win.C1SuperTooltip.PopupEventArgs.Control"/> that contains the tooltip text.</param>
            <param name="location"><see cref="T:System.Drawing.Point"/> that specifies the top left corner of the tooltip.</param>
            <param name="text">String that will be displayed in the tooltip.</param>
        </member>
        <member name="P:C1.Win.C1SuperTooltip.PopupEventArgs.Form">
            <summary>
            Gets a reference to the <see cref="P:C1.Win.C1SuperTooltip.PopupEventArgs.Form"/> that contains the tooltip.
            </summary>
        </member>
        <member name="P:C1.Win.C1SuperTooltip.PopupEventArgs.Control">
            <summary>
            Gets a reference to the <see cref="P:C1.Win.C1SuperTooltip.PopupEventArgs.Control"/> that provides the tooltip text and location.
            </summary>
        </member>
        <member name="P:C1.Win.C1SuperTooltip.PopupEventArgs.ToolStripItem">
            <summary>
            Gets a reference to the <see cref="P:C1.Win.C1SuperTooltip.PopupEventArgs.ToolStripItem"/> that provides the tooltip text.
            </summary>
            <remarks>
            <para>The <see cref="T:C1.Win.C1SuperTooltip.C1SuperTooltip"/> can be used to display information about controls
            or ToolStrip items (see the <see cref="M:C1.Win.C1SuperTooltip.C1SuperTooltip.SetToolTip(System.Windows.Forms.Control,System.String)"/> method).</para>
            <para>If the tooltip is displaying information about a control, then this property 
            returns null. If it is displaying information about a <see cref="P:C1.Win.C1SuperTooltip.PopupEventArgs.ToolStripItem"/>, then 
            this property returns a reference to that item.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1SuperTooltip.PopupEventArgs.Location">
            <summary>
            Gets or sets the location where the tooltip will be displayed.
            </summary>
        </member>
        <member name="P:C1.Win.C1SuperTooltip.PopupEventArgs.Text">
            <summary>
            Gets or sets the text that will be displayed in the tooltip.
            </summary>
        </member>
        <member name="T:C1.Win.C1SuperTooltip.ToolTipWindow">
            <summary>
            Popup control that shows the tooltip content
            </summary>
        </member>
        <member name="T:C1.Win.C1SuperTooltip.ImageCollection">
            <summary>
            Collection of images to be displayed in <see cref="T:C1.Win.C1SuperTooltip.C1SuperLabel"/> or 
            <see cref="T:C1.Win.C1SuperTooltip.C1SuperTooltip"/> components.
            </summary>
        </member>
        <member name="F:C1.Win.C1SuperTooltip.ImageCollection.IMAGE_FILTER">
            <summary>
            String containing all common image extensions, used as a filter for an open file dialog.
            </summary>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.ImageCollection.#ctor(System.ComponentModel.Component)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Win.C1SuperTooltip.ImageCollection"/>.
            </summary>
            <param name="owner">Component that owns the collection.</param>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.ImageCollection.Add(C1.Win.C1SuperTooltip.ImageEntry)">
            <summary>
            Adds an <see cref="T:C1.Win.C1SuperTooltip.ImageEntry"/> to the collection.
            </summary>
            <param name="entry"><see cref="T:C1.Win.C1SuperTooltip.ImageEntry"/> to add to the collection.</param>
            <returns>The index of the new entry in the collection.</returns>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.ImageCollection.Add(System.String,System.Drawing.Image)">
            <summary>
            Adds an <see cref="T:System.Drawing.Image"/> to the collection.
            </summary>
            <param name="key">String used to retrieve the image from the collection.</param>
            <param name="image"><see cref="T:System.Drawing.Image"/> to add to the collection.</param>
            <returns>The index of the new entry in the collection.</returns>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.ImageCollection.Add(System.Windows.Forms.ImageList)">
            <summary>
            Adds all images in an <see cref="T:System.Windows.Forms.ImageList"/> component to the collection.
            </summary>
            <param name="list"><see cref="T:System.Windows.Forms.ImageList"/> component that contains the images to add to the collection.</param>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.ImageCollection.Insert(System.Int32,C1.Win.C1SuperTooltip.ImageEntry)">
            <summary>
            Inserts an <see cref="T:C1.Win.C1SuperTooltip.ImageEntry"/> at a specified position in the collection.
            </summary>
            <param name="index">Position where the <paramref name="entry"/> will be inserted.</param>
            <param name="entry"><see cref="T:C1.Win.C1SuperTooltip.ImageEntry"/> to add to the collection.</param>
            <returns>The index of the new entry in the collection.</returns>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.ImageCollection.Remove(C1.Win.C1SuperTooltip.ImageEntry)">
            <summary>
            Removes an <see cref="T:C1.Win.C1SuperTooltip.ImageEntry"/> from the collection.
            </summary>
            <param name="entry"><see cref="T:C1.Win.C1SuperTooltip.ImageEntry"/> to remove from the collection.</param>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.ImageCollection.IndexOf(C1.Win.C1SuperTooltip.ImageEntry)">
            <summary>
            Gets the index of a given <see cref="T:C1.Win.C1SuperTooltip.ImageEntry"/> in the collection.
            </summary>
            <param name="entry"><see cref="T:C1.Win.C1SuperTooltip.ImageEntry"/> to locate in th collection.</param>
            <returns>The index of the <see cref="T:C1.Win.C1SuperTooltip.ImageEntry"/> in the collection, or -1 if the 
            collection does not contain the key.</returns>
            <remarks>The <paramref name="entry"/> parameter is not case-sensitive.</remarks>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.ImageCollection.Contains(C1.Win.C1SuperTooltip.ImageEntry)">
            <summary>
            Determines whether the <see cref="T:C1.Win.C1SuperTooltip.ImageCollection"/> contains a given key.
            </summary>
            <param name="entry"><see cref="T:C1.Win.C1SuperTooltip.ImageEntry"/> to locate in the collection.</param>
            <returns>True if the collection contains <paramref name="entry"/>, false otherwise.</returns>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.ImageCollection.Contains(System.String)">
            <summary>
            Determines whether the <see cref="T:C1.Win.C1SuperTooltip.ImageCollection"/> contains a given key.
            </summary>
            <param name="key">String that identifies the <see cref="T:C1.Win.C1SuperTooltip.ImageEntry"/>.</param>
            <returns>True if the collection contains an <see cref="T:C1.Win.C1SuperTooltip.ImageEntry"/> associated with the given key, false otherwise.</returns>
            <remarks>The <paramref name="key"/> parameter is not case-sensitive.</remarks>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.ImageCollection.IndexOf(System.String)">
            <summary>
            Gets the index of the <see cref="T:C1.Win.C1SuperTooltip.ImageEntry"/> with a given key.
            </summary>
            <param name="key">String that identifies the <see cref="T:C1.Win.C1SuperTooltip.ImageEntry"/>.</param>
            <returns>The index of the <see cref="T:C1.Win.C1SuperTooltip.ImageEntry"/> in the collection, or -1 if the 
            collection does not contain the key.</returns>
            <remarks>The <paramref name="key"/> parameter is not case-sensitive.</remarks>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.ImageCollection.OnListChanged(System.ComponentModel.ListChangedEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1SuperTooltip.ImageCollection.ListChanged"/> event. 
            </summary>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.ImageCollection.OnClearComplete">
            <summary>
            Performs additional custom processes after clearing the contents of the <see cref="T:C1.Win.C1SuperTooltip.ImageCollection"/> instance.
            </summary>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.ImageCollection.OnInsertComplete(System.Int32,System.Object)">
            <summary>
            Performs additional custom processes after inserting a new element into the <see cref="T:C1.Win.C1SuperTooltip.ImageCollection"/> instance.
            </summary>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.ImageCollection.OnRemoveComplete(System.Int32,System.Object)">
            <summary>
            Performs additional custom processes after removing an element from the <see cref="T:C1.Win.C1SuperTooltip.ImageCollection"/> instance.
            </summary>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.ImageCollection.OnSetComplete(System.Int32,System.Object,System.Object)">
            <summary>
            Performs additional custom processes after setting a value in the <see cref="T:C1.Win.C1SuperTooltip.ImageCollection"/> instance.
            </summary>
        </member>
        <member name="E:C1.Win.C1SuperTooltip.ImageCollection.ListChanged">
            <summary>
            Occurs when list items are added, removed, or changed.
            </summary>
        </member>
        <member name="P:C1.Win.C1SuperTooltip.ImageCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:C1.Win.C1SuperTooltip.ImageEntry"/> at the specified index in the <see cref="T:C1.Win.C1SuperTooltip.ImageCollection"/>.
            </summary>
            <param name="index">Index of the image to get or set.</param>
            <returns>The <see cref="T:C1.Win.C1SuperTooltip.ImageEntry"/> at the specified index.</returns>
        </member>
        <member name="P:C1.Win.C1SuperTooltip.ImageCollection.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:C1.Win.C1SuperTooltip.ImageEntry"/> with the specified key <see cref="T:C1.Win.C1SuperTooltip.ImageCollection"/>.
            </summary>
            <param name="key">String that identifies the <see cref="T:C1.Win.C1SuperTooltip.ImageEntry"/>.</param>
            <returns>The <see cref="T:C1.Win.C1SuperTooltip.ImageEntry"/> with the specified key.</returns>
            <remarks>The <paramref name="key"/> parameter is not case-sensitive.</remarks>
        </member>
        <member name="T:C1.Win.C1SuperTooltip.ImageEntry">
            <summary>
            Entry in a <see cref="T:C1.Win.C1SuperTooltip.ImageCollection"/>.
            </summary>
            <remarks>
            <para>Each entry contains an <see cref="P:C1.Win.C1SuperTooltip.ImageEntry.Image"/> and its associated <see cref="P:C1.Win.C1SuperTooltip.ImageEntry.Key"/>.</para>
            <para>Entries may be retrieved from the collection by index or by key.</para>
            </remarks>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.ImageEntry.#ctor(System.String,System.Drawing.Image)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Win.C1SuperTooltip.ImageEntry"/>.
            </summary>
            <param name="key">String used as a key to retrieve the image.</param>
            <param name="image">Image associated with the key.</param>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.ImageEntry.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Win.C1SuperTooltip.ImageEntry"/>.
            </summary>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.ImageEntry.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Win.C1SuperTooltip.ImageEntry"/>.
            </summary>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.ImageEntry.NewEntries(System.Boolean)">
            <summary>
            This method is intended for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.ImageEntry.NewEntry">
            <summary>
            This method is intended for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1SuperTooltip.ImageEntry.Key">
            <summary>
            Gets or sets the key used to retrieve the image from the <see cref="T:C1.Win.C1SuperTooltip.ImageCollection"/>.
            </summary>
            <remarks>The key value is not case-sensitive.</remarks>
        </member>
        <member name="P:C1.Win.C1SuperTooltip.ImageEntry.Image">
            <summary>
            <see cref="P:C1.Win.C1SuperTooltip.ImageEntry.Image"/> in the <see cref="T:C1.Win.C1SuperTooltip.ImageCollection"/>.
            </summary>
        </member>
        <member name="T:C1.Win.C1SuperTooltip.ImageEntryTypeConverter">
            <summary>
            <see cref="T:System.ComponentModel.TypeConverter"/> used to persist <see cref="T:C1.Win.C1SuperTooltip.ImageEntry"/> objects.
            </summary>
            <remarks>
            <para>This converter causes Visual Studio to persist the type in code-behind, which is version-neutral.</para>
            <para>Without this, the <see cref="T:C1.Win.C1SuperTooltip.ImageEntry"/> objects would be persisted as binary resources,
            along with their specific version, so upgrading the component version would break projects 
            created with previous versions.</para>
            </remarks>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.ImageEntryTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns a value that indicates whether the object can be converted to a specified data type.
            </summary>
            <param name="context">The context.</param>
            <param name="destType">The data type.</param>
            <returns>True if the conversion is supported, false otherwise.</returns>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.ImageEntryTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the object into the specified data type.
            </summary>
            <param name="context">The context.</param>
            <param name="culture">The culture.</param>
            <param name="value">The object to convert.</param>
            <param name="destType">The type to convert to.</param>
            <returns>The converted object.</returns>
        </member>
        <member name="T:C1.Framework.BasePanel">
            <summary>
            Base class for all <see cref="T:C1.Framework.Element"/> object that contain child elements.
            </summary>
            <remarks>
            <para>This class extends <see cref="T:C1.Framework.Element"/> and implements the <see cref="P:C1.Framework.BasePanel.Children"/> property.</para>
            <para>This class acts like a static canvas. It has no layout logic other than sizing itself to fit its children.</para>
            </remarks>
        </member>
        <member name="F:C1.Framework.Element._parent">
            <summary>
            The parent <see cref="T:C1.Framework.Element"/>.
            </summary>
        </member>
        <member name="F:C1.Framework.Element._bounds">
            <summary>
            The <see cref="T:System.Drawing.Rectangle"/> that defines the position of the <see cref="T:C1.Framework.Element"/> within its parent.
            </summary>
        </member>
        <member name="F:C1.Framework.Element._style">
            <summary>
            The <see cref="P:C1.Framework.Element.Style"/> object that defines the appearance of this <see cref="T:C1.Framework.Element"/>.
            </summary>
        </member>
        <member name="F:C1.Framework.Element._flags">
            <summary>
            An <see cref="T:C1.Framework.Element.ElementFlags"/> value that defines the behavior of this <see cref="T:C1.Framework.Element"/>.
            </summary>
        </member>
        <member name="M:C1.Framework.Element.#ctor(C1.Framework.Style)">
            <summary>
            Creates a new instance of an <see cref="T:C1.Framework.Element"/>.
            </summary>
            <param name="style">Style for the new element.</param>
        </member>
        <member name="M:C1.Framework.Element.#ctor">
            <summary>
            Creates a new instance of an <see cref="T:C1.Framework.Element"/>.
            </summary>
        </member>
        <member name="M:C1.Framework.Element.GetBounds(C1.Framework.Element)">
            <summary>
            Gets the element's bounds (size and location) within an arbitrary ancestor, in pixels.
            <param name="ancestor">Ancestor element (parent, grand-parent, etc).</param>
            <returns>A <see cref="T:System.Drawing.Rectangle"/> that corresponds to the element's position 
            within the given <paramref name="ancestor"/>.</returns>
            </summary>
        </member>
        <member name="M:C1.Framework.Element.GetBounds(C1.Framework.Element,System.Boolean,System.Boolean)">
            <summary>
            Gets the element's bounds (size and location) within an arbitrary ancestor, in pixels.
            </summary>
            <param name="ancestor">Ancestor element (parent, grand-parent, etc).</param>
            <param name="contentArea">Whether to return the element's outer bounds or content area.</param>
            <param name="clip">Whether to clip the rectangle to the ancestor's content area.</param>
            <returns>A <see cref="T:System.Drawing.Rectangle"/> that corresponds to the element's position 
            within the given <paramref name="ancestor"/>.</returns>
        </member>
        <member name="M:C1.Framework.Element.Offset(System.Int32,System.Int32)">
            <summary>
            Adjusts the location of this element by the specified amount.
            </summary>
            <param name="x">Offset in the horizontal direction.</param>
            <param name="y">Offset in the vertical direction.</param>
        </member>
        <member name="M:C1.Framework.Element.SetDirty(System.Boolean,System.Boolean)">
            <summary>
            Marks this element as dirty, forcing all parent and child elements to be laid out.
            </summary>
            <param name="dirty">Whether the element needs to be laid out.</param>
            <param name="layoutOnly">Whether <b>ContentElements</b> (e.g. elements without children, such as
            <see cref="T:C1.Framework.TextElement"/>, <see cref="T:C1.Framework.ImageElement"/>) also need to be laid out.</param>
        </member>
        <member name="M:C1.Framework.Element.SetDirty(System.Boolean)">
            <summary>
            Marks this element as dirty, forcing all parent and child elements to be laid out.
            </summary>
            <param name="dirty">Whether the element needs to be laid out.</param>
        </member>
        <member name="M:C1.Framework.Element.SetDirty">
            <summary>
            Marks this element as dirty, forcing all parent and child elements to be laid out.
            </summary>
        </member>
        <member name="M:C1.Framework.Element.Clone">
            <summary>
            Returns a clone of this element.
            </summary>
            <returns>A clone of this element</returns>
        </member>
        <member name="M:C1.Framework.Element.Layout(System.Drawing.Graphics)">
            <summary>
            Lays out this element based on its style and contents.
            </summary>
            <param name="g">Graphics object used to measure the element.</param>
        </member>
        <member name="M:C1.Framework.Element.Layout">
            <summary>
            Perform layout using host control's <see cref="T:System.Drawing.Graphics"/> object.
            </summary>
        </member>
        <member name="M:C1.Framework.Element.Render(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Renders the element into a given rectangle. 
            </summary>
            <param name="g">Graphics object where the element will be rendered.</param>
            <param name="r">Rectangle where the element will be rendered.</param>
        </member>
        <member name="M:C1.Framework.Element.RenderChildren(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Renders the child elements into a given rectangle. 
            </summary>
            <param name="g">Graphics object where the element will be rendered.</param>
            <param name="r">Rectangle where the child elements will be rendered.</param>
            <remarks>
            Derived elements may override this method in order to draw into the <see cref="T:System.Drawing.Graphics"/>
            after the background and borders have been rendered but before the child elements are 
            rendered.
            </remarks>
        </member>
        <member name="M:C1.Framework.Element.RenderContent(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Render this element's content (no children). 
            </summary>
            <param name="g">Graphics object where the element will be rendered.</param>
            <param name="r">Rectangle to render into.</param>
        </member>
        <member name="M:C1.Framework.Element.HitTest(System.Drawing.Point)">
            <summary>
            Returns the element at a given point.
            </summary>
            <param name="pt">Point to check.</param>
            <returns>The element at the point.</returns>
        </member>
        <member name="M:C1.Framework.Element.GetParentOfType(System.Type)">
            <summary>
            Navigates up the tree to find an ancestor of a given type.
            </summary>
            <param name="type">Type of element we're looking for.</param>
            <returns>A reference to the ancestor of the given type, null if not found.</returns>
        </member>
        <member name="M:C1.Framework.Element.GetScrollOrigin">
            <summary>
            Returns the scroll origin (override to implement non-scrolling areas).
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Framework.Element.IsChildOf(C1.Framework.Element)">
            <summary>
            Determines whether this element is a child of another element.
            </summary>
            <param name="parent">Parent element to investigate.</param>
            <returns>True if <paramref name="parent"/> contains this element.</returns>
        </member>
        <member name="M:C1.Framework.Element.Invalidate(System.Boolean)">
            <summary>
            Invalidates this <see cref="T:C1.Framework.Element"/> within the host control.
            </summary>
            <param name="update">Whether to repaint the host control immediately after invalidation.</param>
        </member>
        <member name="M:C1.Framework.Element.Invalidate">
            <summary>
            Invalidates this <see cref="T:C1.Framework.Element"/> within the host control.
            </summary>
        </member>
        <member name="M:C1.Framework.Element.OnMouseEnter(System.EventArgs)">
            <summary>
            Called by the host control when the mouse enters this <see cref="T:C1.Framework.Element"/>.
            </summary>
            <param name="e"><see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.Element.OnMouseLeave(System.EventArgs)">
            <summary>
            Called by the host control when the mouse leaves this <see cref="T:C1.Framework.Element"/>.
            </summary>
            <param name="e"><see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.Element.OnMouseEnterHover(System.EventArgs)">
            <summary>
            Called by the host control when the mouse enters this <see cref="T:C1.Framework.Element"/>, 
            even if another element has captured the mouse.
            </summary>
            <param name="e"><see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.Element.OnMouseLeaveHover(System.EventArgs)">
            <summary>
            Called by the host control when the mouse leaves this <see cref="T:C1.Framework.Element"/>, 
            even if another element has captured the mouse.
            </summary>
            <param name="e"><see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.Element.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Called by the host control when the user presses a mouse button over this <see cref="T:C1.Framework.Element"/>.
            </summary>
            <param name="e"><see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.Element.OnMouseWheel(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Handles MouseWheel events.
            </summary>
            <param name="e"><see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data.</param>
            <returns>True if the event was handled by this element, false otherwise.</returns>
        </member>
        <member name="M:C1.Framework.Element.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Called by the host control when the user releases a mouse button over this <see cref="T:C1.Framework.Element"/>.
            </summary>
            <param name="e"><see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.Element.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Called by the host control when the mouse moves over this <see cref="T:C1.Framework.Element"/>.
            </summary>
            <param name="e"><see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.Element.OnClick(System.EventArgs)">
            <summary>
            Called by the host control when the user clicks this <see cref="T:C1.Framework.Element"/>.
            </summary>
            <param name="e"><see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.Element.OnDoubleClick(System.EventArgs)">
            <summary>
            Called by the host control when the user double-clicks this <see cref="T:C1.Framework.Element"/>.
            </summary>
            <param name="e"><see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.Element.OnGotFocus(System.EventArgs)">
            <summary>
            Called by the host control when this <see cref="T:C1.Framework.Element"/> receives the focus.
            </summary>
            <param name="e"><see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.Element.OnLostFocus(System.EventArgs)">
            <summary>
            Called by the host control when this <see cref="T:C1.Framework.Element"/> loses the focus.
            </summary>
            <param name="e"><see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.Element.OnValidating(System.ComponentModel.CancelEventArgs)">
            <summary>
            Called by the host control when the element is about to lose focus.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Framework.Element.OnValidated(System.EventArgs)">
            <summary>
            Called by the host control after the element has been validated.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Framework.Element.IsInputKey(System.Windows.Forms.Keys)">
            <summary>
            Determines whether the specified key is a regular input key or a special key that requires preprocessing. 
            </summary>
            <param name="keyData">Key that was pressed and needs to be checked.</param>
            <returns><b>true</b> if the specified key is a regular input key; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:C1.Framework.Element.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Called by the host control when the user presses a key and this <see cref="T:C1.Framework.Element"/> has the focus.
            </summary>
            <param name="e"><see cref="T:System.Windows.Forms.KeyEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.Element.OnKeyUp(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Called by the host control when the user releases a key and this <see cref="T:C1.Framework.Element"/> has the focus.
            </summary>
            <param name="e"><see cref="T:System.Windows.Forms.KeyEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.Element.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Called by the host control when the user presses a character key and this <see cref="T:C1.Framework.Element"/> has the focus.
            </summary>
            <param name="e"><see cref="T:System.Windows.Forms.KeyEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.Element.OnStateChanged(C1.Framework.Element.ElementFlags)">
            <summary>
            Called by the host control when the state of this <see cref="T:C1.Framework.Element"/> changes.
            </summary>
            <param name="oldFlags"><see cref="T:C1.Framework.Element.ElementFlags"/> that contains the state before the change.</param>
            <remarks>
            The state of an element is represented by a combination of <see cref="T:C1.Framework.Element.ElementFlags"/> values.
            Each individual flag is represented by a specific property, including <see cref="P:C1.Framework.Element.Visible"/>, <see cref="P:C1.Framework.Element.Enabled"/>,
            etc.
            </remarks>
        </member>
        <member name="M:C1.Framework.Element.GetImageResource(System.String)">
            <summary>
            Gets an <see cref="T:System.Drawing.Image"/> from the application's embedded resources.
            </summary>
            <param name="name">Name of the embedded resource that contains the image.</param>
            <returns>An <see cref="T:System.Drawing.Image"/> stored with the given name, or null if the image could not be found.</returns>
        </member>
        <member name="M:C1.Framework.Element.GetBitmapResource(System.String)">
            <summary>
            Gets a <see cref="T:System.Drawing.Bitmap"/> from the application's embedded resources.
            </summary>
            <param name="name">Name of the embedded resource that contains the bitmap.</param>
            <returns>A <see cref="T:System.Drawing.Bitmap"/> stored with the given name, or null if the image could not be found.</returns>
        </member>
        <member name="M:C1.Framework.Element.FindMnemonic(C1.Framework.Element,System.Char)">
            <summary>
            Finds the <see cref="T:C1.Framework.Element"/> that is represented by a given hot key.
            </summary>
            <param name="e"><see cref="T:C1.Framework.Element"/> to search (including all its children).</param>
            <param name="charCode">Hot key to search for.</param>
            <returns>The <see cref="T:C1.Framework.IMnemonicElement"/> that is represented by the given hot key.</returns>
        </member>
        <member name="P:C1.Framework.Element.Parent">
            <summary>
            Gets the element's parent, or null if this is the root element.
            </summary>
        </member>
        <member name="P:C1.Framework.Element.Root">
            <summary>
            Gets the element's top-level parent.
            </summary>
        </member>
        <member name="P:C1.Framework.Element.Style">
            <summary>
            Gets or sets the Style object used to render this Element.
            </summary>
        </member>
        <member name="P:C1.Framework.Element.RenderStyle">
            <summary>
            Gets the element's style, or a default style if the element doesn't have one.
            This never returns null.
            </summary>
        </member>
        <member name="P:C1.Framework.Element.Visible">
            <summary>
            Gets or sets whether the element is visible.
            </summary>
        </member>
        <member name="P:C1.Framework.Element.IsVisible">
            <summary>
            Gets whether this element and all its ancestors are visible.
            </summary>
        </member>
        <member name="P:C1.Framework.Element.Enabled">
            <summary>
            Gets or sets whether the element is enabled (can receive mouse and keyboard messages).
            </summary>
        </member>
        <member name="P:C1.Framework.Element.IsEnabled">
            <summary>
            Gets whether this element and all its ancestors are enabled.
            </summary>
        </member>
        <member name="P:C1.Framework.Element.HitTestable">
            <summary>
            Gets or sets whether the element is hit-testable (receives mouse messages).
            </summary>
        </member>
        <member name="P:C1.Framework.Element.Focusable">
            <summary>
            Gets or sets whether the element is focusable (receives keyboard messages).
            </summary>
        </member>
        <member name="P:C1.Framework.Element.IsFocusable">
            <summary>
            Gets whether this element can currently receive the focus.
            </summary>
        </member>
        <member name="P:C1.Framework.Element.ShowFocusRectangle">
            <summary>
            Gets or sets whether the element should display a focus rectangle when it has focus.
            </summary>
        </member>
        <member name="P:C1.Framework.Element.IsHot">
            <summary>
            Gets or sets whether the element should be displayed using the Style.Hot style.
            </summary>
        </member>
        <member name="P:C1.Framework.Element.IsPressed">
            <summary>
            Gets or sets whether the element should be displayed using the Style.Pressed style.
            </summary>
        </member>
        <member name="P:C1.Framework.Element.Bounds">
            <summary>
            Gets or sets the element's bounds (size and location) within its parent element, in pixels.
            </summary>
        </member>
        <member name="P:C1.Framework.Element.Size">
            <summary>
            Gets or sets the size of the element.
            </summary>
        </member>
        <member name="P:C1.Framework.Element.ContentBounds">
            <summary>
            Client rectangle, in pixels.
            This discounts margins, borders, and padding.
            </summary>
        </member>
        <member name="P:C1.Framework.Element.Width">
            <summary>
            Element width. Set to -1 to let the element calculate it automatically.
            </summary>
        </member>
        <member name="P:C1.Framework.Element.Height">
            <summary>
            Element height. Set to -1 to let the element calculate it automatically.
            </summary>
        </member>
        <member name="P:C1.Framework.Element.Location">
            <summary>
            Gets or sets the location of the element within its parent.
            </summary>
        </member>
        <member name="P:C1.Framework.Element.Left">
            <summary>
            Gets or sets the horizontal position of the element within its parent.
            </summary>
        </member>
        <member name="P:C1.Framework.Element.Top">
            <summary>
            Gets or sets the vertical position of the element within its parent.
            </summary>
        </member>
        <member name="P:C1.Framework.Element.IsDirty">
            <summary>
            Gets a value that indicates this element needs to be laid out.
            </summary>
        </member>
        <member name="P:C1.Framework.Element.LineDescent">
            <summary>
            Gets the portion of the element that renders below the baseline.
            Usually non-zero only for text elements, depends on font.
            </summary>
        </member>
        <member name="P:C1.Framework.Element.ForceLineBreak">
            <summary>
            Gets a <see cref="T:C1.Framework.Element.LineBreak"/> value that determines whether there should be
            line breaks before and/or after this <see cref="T:C1.Framework.Element"/> when it occurs in a paragraph.
            </summary>
        </member>
        <member name="P:C1.Framework.Element.Children">
            <summary>
            Gets a list of child elements.
            </summary>
            <remarks>
            The base class always returns null; panel elements should be based on <see cref="T:C1.Framework.BasePanel"/>.
            </remarks>
        </member>
        <member name="P:C1.Framework.Element.HasChildren">
            <summary>
            Gets a value that indicates the element has a non-empty <see cref="P:C1.Framework.Element.Children"/> collection.
            </summary>
        </member>
        <member name="P:C1.Framework.Element.HostControl">
            <summary>
            Gets the <see cref="T:System.Windows.Forms.Control"/> that is hosting this <see cref="T:C1.Framework.Element"/>.
            </summary>
        </member>
        <member name="T:C1.Framework.Element.ElementFlags">
            <summary>
            Flags that represent the state of an <see cref="T:C1.Framework.Element"/>.
            </summary>
        </member>
        <member name="F:C1.Framework.Element.ElementFlags.Dirty">
            <summary>
            Element should be laid out before it is rendered.
            </summary>
        </member>
        <member name="F:C1.Framework.Element.ElementFlags.Visible">
            <summary>
            Element is visible.
            </summary>
        </member>
        <member name="F:C1.Framework.Element.ElementFlags.AutoWidth">
            <summary>
            The width of the element is automatically determined by its style and contents.
            </summary>
        </member>
        <member name="F:C1.Framework.Element.ElementFlags.AutoHeight">
            <summary>
            The height of the element is automatically determined by its style and contents.
            </summary>
        </member>
        <member name="F:C1.Framework.Element.ElementFlags.Enabled">
            <summary>
            The element is enabled and may receive mouse and keyboard messages.
            </summary>
        </member>
        <member name="F:C1.Framework.Element.ElementFlags.HitTestable">
            <summary>
            The element recognizes mouse messages.
            </summary>
        </member>
        <member name="F:C1.Framework.Element.ElementFlags.Focusable">
            <summary>
            The element recognizes keyboard messages.
            </summary>
        </member>
        <member name="F:C1.Framework.Element.ElementFlags.ShowFocus">
            <summary>
            The element should display a focus rectangle when it has the focus.
            </summary>
        </member>
        <member name="F:C1.Framework.Element.ElementFlags.TabStop">
            <summary>
            The element can receive the focus when the tab key is pressed.
            </summary>
        </member>
        <member name="F:C1.Framework.Element.ElementFlags.Hot">
            <summary>
            The mouse is over the element.
            </summary>
        </member>
        <member name="F:C1.Framework.Element.ElementFlags.Pressed">
            <summary>
            The mouse is over the element and the left button is pressed.
            </summary>
        </member>
        <member name="F:C1.Framework.Element.ElementFlags.Isolated">
            <summary>
            The Hot state does not propagate automatically to the parent element.
            </summary>
        </member>
        <member name="F:C1.Framework.Element.ElementFlags.Horizontal">
            <summary>
            Flow child elements in the horizontal direction.
            </summary>
        </member>
        <member name="T:C1.Framework.Element.LineBreak">
            <summary>
            Flags that represent the line-breaking behavior caused by an element when it is contained
            in a paragraph.
            </summary>
        </member>
        <member name="F:C1.Framework.Element.LineBreak.None">
            <summary>
            The element does not cause line breaks.
            </summary>
        </member>
        <member name="F:C1.Framework.Element.LineBreak.Before">
            <summary>
            Insert line breaks before the element.
            </summary>
        </member>
        <member name="F:C1.Framework.Element.LineBreak.After">
            <summary>
            Insert line breaks after the element.
            </summary>
        </member>
        <member name="M:C1.Framework.BasePanel.#ctor(C1.Framework.Style)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Framework.BasePanel"/>.
            </summary>
            <param name="style"><see cref="T:C1.Framework.Style"/> object used to measure and render this <see cref="T:C1.Framework.BasePanel"/>.</param>
        </member>
        <member name="M:C1.Framework.BasePanel.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Framework.BasePanel"/>.
            </summary>
        </member>
        <member name="M:C1.Framework.BasePanel.Layout(System.Drawing.Graphics)">
            <summary>
            Layout this element based on its style and contents.
            </summary>
            <param name="g">Graphics object used to measure the element.</param>
        </member>
        <member name="M:C1.Framework.BasePanel.RenderFromRightToLeft">
            <summary>
            Gets a value that determines whether this paragraph should be rendered from
            the right to the left.
            </summary>
        </member>
        <member name="P:C1.Framework.BasePanel.Children">
            <summary>
            Gets or sets the list of child elements contained in this <see cref="T:C1.Framework.Element"/>.
            </summary>
        </member>
        <member name="T:C1.Framework.ContentElement">
            <summary>
            <para>Abstract class for elements that display text or images.</para>
            
            <para>Derived classes should override <see cref="M:C1.Framework.ContentElement.GetValue"/> method to 
            provide the content (text, images, formatted values).</para>
            
            <para>This class does not have child elements.</para>
            </summary>
        </member>
        <member name="M:C1.Framework.ContentElement.#ctor(C1.Framework.Style)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Framework.ContentElement"/>.
            </summary>
            <param name="style">Style for the new element.</param>
        </member>
        <member name="M:C1.Framework.ContentElement.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Framework.ContentElement"/>.
            </summary>
        </member>
        <member name="M:C1.Framework.ContentElement.GetValue">
            <summary>
            Gets the value represented by this <see cref="T:C1.Framework.ContentElement"/>.
            </summary>
            <returns>Object to be rendered as this element's content.</returns>
            <remarks>
            The value is an object that the <see cref="T:C1.Framework.Style"/> class can measure and render, usually a string,
            an <see cref="T:System.Drawing.Image"/>, or an <see cref="T:System.IFormattable"/> object.
            </remarks>
        </member>
        <member name="M:C1.Framework.ContentElement.RenderContent(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Renders the element contents into the specified <see cref="T:System.Drawing.Graphics"/> object at the specified location.
            </summary>
            <param name="g"><see cref="T:System.Drawing.Graphics"/> object where the <see cref="T:C1.Framework.Element"/> will be rendered.</param>
            <param name="r"><see cref="T:System.Drawing.Rectangle"/> where the <see cref="T:C1.Framework.Element"/> contents will be rendered.</param>
        </member>
        <member name="M:C1.Framework.ContentElement.Layout(System.Drawing.Graphics)">
            <summary>
            Layout this element based on its style and contents.
            </summary>
            <param name="g"><see cref="T:System.Drawing.Graphics"/> object used to measure the <see cref="T:C1.Framework.Element"/>.</param>
        </member>
        <member name="M:C1.Framework.ContentElement.ToString">
            <summary>
            Gets a string representation of this <see cref="T:C1.Framework.ContentElement"/>.
            </summary>
            <returns>A string representation of this <see cref="T:C1.Framework.ContentElement"/>.</returns>
        </member>
        <member name="T:C1.Framework.DockPanel">
            <summary>
            
            </summary>
        </member>
        <member name="M:C1.Framework.IControlHostElement.UpdateControlBounds">
            <summary>
            Updates the hosted control bounds to match the element's current bounds.
            </summary>
        </member>
        <member name="P:C1.Framework.IControlHostElement.Control">
            <summary>
            Gets a reference to the <see cref="P:C1.Framework.IControlHostElement.Control"/> that this <see cref="T:C1.Framework.Element"/> is hosting.
            </summary>
        </member>
        <member name="P:C1.Framework.IToolTipElement.ToolTipText">
            <summary>
            Gets or sets the text that appears as a ToolTip for this <see cref="T:C1.Framework.Element"/>.
            </summary>
        </member>
        <member name="M:C1.Framework.IMnemonicElement.HandleMnemonic">
            <summary>
            Method that gets called when the user presses the hot key that corresponds to this <see cref="T:C1.Framework.Element"/>.
            </summary>
            <returns>True if the hot key was handled by the element, false otherwise.</returns>
        </member>
        <member name="T:C1.Framework.ElementList">
            <summary>
            Contains a list of Elements that belong to a parent element.
            </summary>
        </member>
        <member name="M:C1.Framework.ElementList.Offset(System.Int32,System.Int32)">
            <summary>
            Adjusts the location of all <see cref="T:C1.Framework.Element"/> objects in the list by the specified amount. 
            </summary>
            <param name="x">Horizontal offset in pixels.</param>
            <param name="y">Vertical offset in pixels.</param>
        </member>
        <member name="M:C1.Framework.ElementList.Offset(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Adjusts the location of some <see cref="T:C1.Framework.Element"/> objects in the list by the specified amount. 
            </summary>
            <param name="x">Horizontal offset in pixels.</param>
            <param name="y">Vertical offset in pixels.</param>
            <param name="first">Index of the first <see cref="T:C1.Framework.Element"/> to be offset.</param>
            <param name="count">Number of elements to offset.</param>
        </member>
        <member name="M:C1.Framework.ElementList.OnListChanged">
            <summary>
            Called when elements are added or removed from the list.
            </summary>
        </member>
        <member name="M:C1.Framework.ElementList.Add(System.Object)">
            <summary>
            Adds an <see cref="T:C1.Framework.Element"/> to the list.
            </summary>
            <param name="value"><see cref="T:C1.Framework.Element"/> to add to the list.</param>
            <returns>The index of the new object in the list.</returns>
        </member>
        <member name="M:C1.Framework.ElementList.Insert(System.Int32,System.Object)">
            <summary>
            Inserts an <see cref="T:C1.Framework.Element"/> at a specified index.
            </summary>
            <param name="index">Index where the <see cref="T:C1.Framework.Element"/> will be inserted.</param>
            <param name="value"><see cref="T:C1.Framework.Element"/> to add to the list.</param>
        </member>
        <member name="M:C1.Framework.ElementList.InsertRange(System.Int32,System.Collections.ICollection)">
            <summary>
            Inserts the elements of a collection into the list at the specified index. 
            </summary>
            <param name="index">Index where the elements will be inserted.</param>
            <param name="c"><see cref="T:System.Collections.ICollection"/> whose elements will be inserted.</param>
        </member>
        <member name="M:C1.Framework.ElementList.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:C1.Framework.Element"/> at the specified index from the list.
            </summary>
            <param name="index">The index of the <see cref="T:C1.Framework.Element"/> to remove.</param>
        </member>
        <member name="M:C1.Framework.ElementList.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of elements from the list.
            </summary>
            <param name="index">Index of the first element to remove from the list.</param>
            <param name="count">Number of elements to remove.</param>
        </member>
        <member name="M:C1.Framework.ElementList.Reverse(System.Int32,System.Int32)">
            <summary>
            Reverses the order of the elements in the list or a portion of it. 
            </summary>
            <param name="index">Index where the reversal should start.</param>
            <param name="count">Number of elements to reverse.</param>
        </member>
        <member name="M:C1.Framework.ElementList.Reverse">
            <summary>
            Reverses the order of the elements in the list or a portion of it. 
            </summary>
        </member>
        <member name="M:C1.Framework.ElementList.Clear">
            <summary>
            Removes all elements from the list.
            </summary>
        </member>
        <member name="P:C1.Framework.ElementList.Owner">
            <summary>
            Gets a reference to the <see cref="T:C1.Framework.Element"/> that owns this <see cref="T:C1.Framework.ElementList"/>.
            </summary>
        </member>
        <member name="P:C1.Framework.ElementList.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:C1.Framework.Element"/> at a specified index in the list.
            </summary>
            <param name="index">Index of the element to get or set</param>.
            <returns>The <see cref="T:C1.Framework.Element"/> at the specified index.</returns>
        </member>
        <member name="P:C1.Framework.ElementList.Last">
            <summary>
            Gets or sets the last <see cref="T:C1.Framework.Element"/> on the list.
            </summary>
        </member>
        <member name="T:C1.Framework.FlowPanel">
            <summary>
            <para>Panel that stacks children horizontally or vertically.</para>
            </summary>
        </member>
        <member name="T:C1.Framework.GridCell">
            <summary>
            This class is an accessor for getting and setting elements at intersections
            of grid rows and columns. The actual elements are stored in the rows.
            </summary>
        </member>
        <member name="T:C1.Framework.GridColumn">
            <summary>
            Keeps track of column widths and positions
            </summary>
        </member>
        <member name="T:C1.Framework.ValueElement">
            <summary>
            <para>Element that displays a simple value (numbers, dates, etc).</para>
            
            <para>The element's <see cref="T:C1.Framework.Style"/> is responsible for formatting the value 
            (with <see cref="T:System.IFormattable"/>).</para>
            </summary>
        </member>
        <member name="T:C1.Framework.GridColumnCollection">
            <summary>
            GridColumn collection. Just an ElementList typed to get and set GridColumn objects.
            </summary>
        </member>
        <member name="T:C1.Framework.GridPanel">
            <summary>
            Inherits from BasePanel and provides a grid with rows and columns.
            At each intersection there is a cell object that contains an element.
            Cells may span rows and columns.
            </summary>
        </member>
        <member name="T:C1.Framework.GridRow">
            <summary>
            Keeps track of row heights and positions, stores cells in Children member.
            </summary>
        </member>
        <member name="T:C1.Framework.GridRowCollection">
            <summary>
            GridRow collection. Just an ElementList typed to get and set GridRow objects.
            </summary>
        </member>
        <member name="T:C1.Framework.CellSpanInfo">
            <summary>
            
            </summary>
        </member>
        <member name="T:C1.Framework.ImageElement">
            <summary>
            <para>Element that displays an <see cref="P:C1.Framework.ImageElement.Image"/>.</para>
            
            <para>Alignment and scaling are controlled by the element's <see cref="T:C1.Framework.Style"/>.</para>
            </summary>
        </member>
        <member name="M:C1.Framework.ImageElement.GetValue">
            <summary>
            The content of this element is the image.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.Framework.ImageElement.LineDescent">
            <summary>
            No descent for images.
            </summary>
        </member>
        <member name="T:C1.Framework.ParagraphElement">
            <summary>
            <see cref="T:C1.Framework.BasePanel"/> that displays paragraphs.
            </summary>
            <remarks>
            This class is a panel that wraps and aligns its child elements.
            </remarks>
        </member>
        <member name="T:C1.Framework.StackPanel">
            <summary>
            <para>Panel that stacks children horizontally or vertically.</para>
            </summary>
        </member>
        <member name="T:C1.Framework.RowPanel">
            <summary>
            <para>Panel that stacks children horizontally.</para>
            </summary>
        </member>
        <member name="T:C1.Framework.ColumnPanel">
            <summary>
            <para>Panel that stacks children vertically.</para>
            </summary>
        </member>
        <member name="T:C1.Framework.BackgroundBrushProvider">
            <summary>
            Class that encapsulates <see cref="P:C1.Framework.BackgroundBrushProvider.Brush"/> objects used to paint element backgrounds.
            It exposes properties that can be used to create and serialize <see cref="T:System.Drawing.SolidBrush"/>, 
            <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush"/>, and <see cref="T:System.Drawing.Drawing2D.PathGradientBrush"/> objects.
            </summary>
        </member>
        <member name="M:C1.Framework.BackgroundBrushProvider.GetBrush(System.Drawing.Rectangle)">
            <summary>
            Gets an updated <see cref="P:C1.Framework.BackgroundBrushProvider.Brush"/> that can be used to fill a given <see cref="T:System.Drawing.Rectangle"/>.
            </summary>
            <param name="rc">Rectangle used to build the gradient brush if the <see cref="P:C1.Framework.BackgroundBrushProvider.GradientMode"/> 
            property is set to a value other than <b>None</b>.</param>
            <returns>A <see cref="P:C1.Framework.BackgroundBrushProvider.Brush"/> that can be used to paint an element's background.</returns>
        </member>
        <member name="M:C1.Framework.BackgroundBrushProvider.Clone">
            <summary>
            Gets a clone of this <see cref="T:C1.Framework.BackgroundBrushProvider"/>.
            </summary>
            <returns>A clone of this <see cref="T:C1.Framework.BackgroundBrushProvider"/>.</returns>
        </member>
        <member name="P:C1.Framework.BackgroundBrushProvider.GradientMode">
            <summary>
            Gets or sets the <see cref="P:C1.Framework.BackgroundBrushProvider.GradientMode"/> for this <see cref="T:C1.Framework.BackgroundBrushProvider"/>.
            </summary>
        </member>
        <member name="P:C1.Framework.BackgroundBrushProvider.GammaCorrection">
            <summary>
            Gets or sets whether gamma correction is applied to the gradient.
            </summary>
        </member>
        <member name="P:C1.Framework.BackgroundBrushProvider.BackColor">
            <summary>
            Gets or sets the main color (used when <see cref="P:C1.Framework.BackgroundBrushProvider.GradientMode"/> is set to <b>None</b>).
            </summary>
        </member>
        <member name="P:C1.Framework.BackgroundBrushProvider.GradientColor">
            <summary>
            Gets or sets the secondary color (used when <see cref="P:C1.Framework.BackgroundBrushProvider.GradientMode"/> is set to a value other than <b>None</b>).
            </summary>
        </member>
        <member name="P:C1.Framework.BackgroundBrushProvider.Blend">
            <summary>
            Gets or sets the <see cref="P:C1.Framework.BackgroundBrushProvider.Blend"/> used to create the gradient.
            </summary>
        </member>
        <member name="P:C1.Framework.BackgroundBrushProvider.InterpolationColors">
            <summary>
            Gets or sets a <see cref="T:System.Drawing.Drawing2D.ColorBlend"/> that defines a multicolor gradient.
            </summary>
        </member>
        <member name="P:C1.Framework.BackgroundBrushProvider.Center">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.PointF"/> that represents the center of a radial gradient.
            </summary>
        </member>
        <member name="P:C1.Framework.BackgroundBrushProvider.Brush">
            <summary>
            Gets or sets a <see cref="P:C1.Framework.BackgroundBrushProvider.Brush"/> object that may be something other than a <see cref="T:System.Drawing.SolidBrush"/>.
            </summary>
        </member>
        <member name="T:C1.Framework.BlendConverter">
            <summary>
            <see cref="T:System.ComponentModel.TypeConverter"/> that converts <see cref="T:System.Drawing.Drawing2D.Blend"/> objects to and from strings.
            </summary>
            <remarks>
            <para>The <see cref="T:System.Drawing.Drawing2D.Blend"/> object is converted to a string with the following format:</para>
            <para>[p1],[f1];[p2],[f2];...;[pn],[fn]</para>
            <para>Where the 'pi' are positions between 0 and 1 along the blend line and
            'fi' are factors between 0 and 1 that correspond to the amount of the 
            secondary color in the blend.</para>
            <para>The positions must be increasing, and the last one must be 1.</para>
            <para>This converter allows persisting <see cref="T:System.Drawing.Drawing2D.Blend"/> objects to Xml.</para>
            </remarks>
            <example>
            These are some simple blend strings:
            <para>"0,0;1,1": default blend, starting with color1 (0,0) and finishing with color2 (1,1).</para>
            <para>"0,1;1,0": reverse blend, starting with color2 (1,0) and finishing with color1 (0,1).</para>
            <para>"0,0;.5,1;1,0": starts with color1, switches to color2 halfway, then back to color1.</para>
            <para>"0,0;.1,1;.9,1;1,0": starts with color1, switches to color2 at 10%, continues with color2 up to 90%, then switches back to color1.</para>
            </example>
        </member>
        <member name="T:C1.Framework.ColorBlendConverter">
            <summary>
            <see cref="T:System.ComponentModel.TypeConverter"/> that converts <see cref="T:System.Drawing.Drawing2D.ColorBlend"/> objects to and from strings.
            </summary>
        </member>
        <member name="T:C1.Framework.BorderEdges">
            <summary>
            Class that stores colors for individual border edges.
            </summary>
            <remarks>
            <para>In most cases, borders have a single color and this class is not used at all.</para>
            <para>If the members of this class are set to non-transparent colors, then the specified
            colors are used to paint over specific edges.</para>
            <para>This class paints the borders with a bevel so they line up at the corners, but
            it does not handle corners at all, so only rectangular elements can have multi-colored
            borders.</para>
            </remarks>
        </member>
        <member name="M:C1.Framework.BorderEdges.#ctor(C1.Framework.Style)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Framework.BorderEdges"/>.
            </summary>
            <param name="style"><see cref="P:C1.Framework.BorderEdges.Style"/> that owns the new instance.</param>
        </member>
        <member name="M:C1.Framework.BorderEdges.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Framework.BorderEdges"/>.
            </summary>
        </member>
        <member name="M:C1.Framework.BorderEdges.Clone">
            <summary>
            Gets a clone of this <see cref="T:C1.Framework.BorderEdges"/> object.
            </summary>
            <returns>A clone of this <see cref="T:C1.Framework.BorderEdges"/> object.</returns>
        </member>
        <member name="M:C1.Framework.BorderEdges.Equals(System.Object)">
            <summary>
            Returns true if the colors are the same for all edges.
            </summary>
            <remarks>
            This is important when handling persistence and comparing to the default value.
            </remarks>
            <param name="obj"><see cref="T:C1.Framework.BorderEdges"/> to compare to this object.</param>
            <returns>True if the colors are the same for all edges.</returns>
        </member>
        <member name="M:C1.Framework.BorderEdges.GetHashCode">
            <summary>
            Serves as a hash function for a <see cref="T:C1.Framework.BorderEdges"/> object.
            </summary>
            <returns>An integer that serves as a hash function for a <see cref="T:C1.Framework.BorderEdges"/> object.</returns>
        </member>
        <member name="M:C1.Framework.BorderEdges.Render(System.Drawing.Graphics,System.Drawing.Rectangle,C1.Framework.Corners,C1.Framework.Thickness)">
            <summary>
            Renders a border with edges of different colors.
            </summary>
            <param name="g"><see cref="T:System.Drawing.Graphics"/> object where the border will be drawn.</param>
            <param name="r"><see cref="T:System.Drawing.Rectangle"/> within which the border will be drawn.</param>
            <param name="c"><see cref="T:C1.Framework.Corners"/> object that specifies which corners are rounded; 
            edges adjacent to rounded corners are not drawn by the <see cref="T:C1.Framework.BorderEdges"/> class.</param>
            <param name="t"><see cref="T:C1.Framework.Thickness"/> object that specifies the thickness of each edge.</param>
        </member>
        <member name="M:C1.Framework.BorderEdges.OnPropertyChanged">
            <summary>
            Notifies the owner <see cref="P:C1.Framework.BorderEdges.Style"/> that this object has changed.
            </summary>
        </member>
        <member name="P:C1.Framework.BorderEdges.Left">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Color"/> used to paint the left edge of the border.
            </summary>
        </member>
        <member name="P:C1.Framework.BorderEdges.Top">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Color"/> used to paint the top edge of the border.
            </summary>
        </member>
        <member name="P:C1.Framework.BorderEdges.Right">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Color"/> used to paint the right edge of the border.
            </summary>
        </member>
        <member name="P:C1.Framework.BorderEdges.Bottom">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Color"/> used to paint the bottom edge of the border.
            </summary>
        </member>
        <member name="P:C1.Framework.BorderEdges.IsEmpty">
            <summary>
            Gets a value that determines if colors have been specified for any of the edges.
            </summary>
        </member>
        <member name="P:C1.Framework.BorderEdges.Style">
            <summary>
            Gets or sets the <see cref="P:C1.Framework.BorderEdges.Style"/> that owns this <see cref="T:C1.Framework.BorderEdges"/> object.
            </summary>
        </member>
        <member name="T:C1.Framework.BorderEdgesConverter">
            <summary>
            <see cref="T:System.ComponentModel.ExpandableObjectConverter"/> that converts <see cref="T:C1.Framework.BorderEdges"/> objects to and from strings.
            </summary>
            <remarks>
            This converter allows persisting <see cref="T:C1.Framework.BorderEdges"/> objects to Xml.
            </remarks>
        </member>
        <member name="T:C1.Framework.Corners">
            <summary>
            Represents corners associated with a user interface (UI) element.
            </summary>
        </member>
        <member name="M:C1.Framework.Corners.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Framework.Corners"/> object. 
            </summary>
            <param name="leftTop">Radius of the left top corner, in pixels.</param>
            <param name="rightTop">Radius of the right top corner, in pixels.</param>
            <param name="leftBottom">Radius of the left bottom corner, in pixels.</param>
            <param name="rightBottom">Radius of the right bottom corner, in pixels.</param>
        </member>
        <member name="M:C1.Framework.Corners.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Framework.Corners"/> object.
            </summary>
            <param name="radius">Radius of all corners, in pixels.</param>
        </member>
        <member name="M:C1.Framework.Corners.op_Implicit(System.Int32)~C1.Framework.Corners">
            <summary>
            Converts an <see cref="T:System.Int32"/> into a <see cref="T:C1.Framework.Corners"/>.
            </summary>
        </member>
        <member name="M:C1.Framework.Corners.GetHashCode">
            <summary>
            Generates a hash code for the current <see cref="T:C1.Framework.Corners"/>. 
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:C1.Framework.Corners.Equals(System.Object)">
            <summary>
            Determines whether the value of the specified object is equivalent 
            to the current <see cref="T:C1.Framework.Corners"/>. 
            </summary>
            <param name="obj">The object to compare to the current <see cref="T:C1.Framework.Corners"/>.</param>
            <returns>true if the two <see cref="T:C1.Framework.Corners"/> objects are equal; 
            otherwise, false. </returns>
        </member>
        <member name="M:C1.Framework.Corners.op_Equality(C1.Framework.Corners,C1.Framework.Corners)">
            <summary>
            Tests whether two specified <see cref="T:C1.Framework.Corners"/> objects are equivalent. 
            </summary>
            <param name="c1">A <see cref="T:C1.Framework.Corners"/> to test.</param>
            <param name="c2">A <see cref="T:C1.Framework.Corners"/> to test.</param>
            <returns>true if the two <see cref="T:C1.Framework.Corners"/> objects are equal; 
            otherwise, false. </returns>
        </member>
        <member name="M:C1.Framework.Corners.op_Inequality(C1.Framework.Corners,C1.Framework.Corners)">
            <summary>
            Tests whether two specified <see cref="T:C1.Framework.Corners"/> objects are not equivalent. 
            </summary>
            <param name="c1">A <see cref="T:C1.Framework.Corners"/> to test.</param>
            <param name="c2">A <see cref="T:C1.Framework.Corners"/> to test.</param>
            <returns>True if the two <see cref="T:C1.Framework.Corners"/> objects are different; 
            otherwise, false. </returns>
        </member>
        <member name="P:C1.Framework.Corners.Empty">
            <summary>
            Provides a <see cref="T:C1.Framework.Corners"/> object with no thickness.
            </summary>
        </member>
        <member name="P:C1.Framework.Corners.LeftTop">
            <summary>
            Gets or sets the radius for the left top corner. 
            </summary>
        </member>
        <member name="P:C1.Framework.Corners.RightTop">
            <summary>
            Gets or sets the radius for the right top corner. 
            </summary>
        </member>
        <member name="P:C1.Framework.Corners.LeftBottom">
            <summary>
            Gets or sets the radius for the left bottom corner. 
            </summary>
        </member>
        <member name="P:C1.Framework.Corners.RightBottom">
            <summary>
            Gets or sets the radius for the right bottom corner. 
            </summary>
        </member>
        <member name="P:C1.Framework.Corners.IsEmpty">
            <summary>
            Returns true if the <see cref="T:C1.Framework.Corners"/> object is empty. 
            </summary>
        </member>
        <member name="T:C1.Framework.CornersConverter">
            <summary>
            Provides a type converter to convert <see cref="T:C1.Framework.Corners"/> values 
            to and from various other representations. 
            </summary>
        </member>
        <member name="M:C1.Framework.CornersConverter.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Framework.CornersConverter"/>.
            </summary>
        </member>
        <member name="M:C1.Framework.CornersConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of one type to the type of this converter.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="sourceType">A <see cref="T:System.Type"/> that represents the type from which to convert.</param>
            <returns>True if the conversion can be performed; false otherwise.</returns>
        </member>
        <member name="M:C1.Framework.CornersConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type, using the specified context. 
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="destinationType">A <see cref="T:System.Type"/> that represents the type to convert to.</param>
            <returns>True if the conversion can be performed; false otherwise.</returns>
        </member>
        <member name="M:C1.Framework.CornersConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given value to the type of this converter. 
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <returns>An <see cref="T:System.Object"/> that represents the converted value. </returns>
        </member>
        <member name="M:C1.Framework.CornersConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> into which <paramref name="value"/> will be converted.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"/> to convert the <paramref name="value"/> to.</param>
            <returns>An <see cref="T:System.Object"/> that represents the converted value. </returns>
        </member>
        <member name="M:C1.Framework.CornersConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <summary>
            Creates a <see cref="T:C1.Framework.Corners"/> object given a set of property values for the object. 
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="propertyValues">A contains a series of name-value pairs with the new property values.</param>
            <returns>The newly created object, or null if the object could not be created.</returns>
        </member>
        <member name="M:C1.Framework.CornersConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns whether changing a value on this object requires a call to 
            the <see cref="M:C1.Framework.CornersConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)"/> method to create a new value.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <returns>True if the <see cref="M:C1.Framework.CornersConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)"/> method should be called when a change is made to one or more properties of this object.</returns>
        </member>
        <member name="M:C1.Framework.CornersConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            Returns a collection of properties for the type of array specified by the value parameter.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="value">An <see cref="T:System.Object"/> that specifies the type of array for which to get properties.</param>
            <param name="attributes">An array of type <see cref="T:System.Attribute"/> that is used as a filter.</param>
            <returns>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/> with the properties that are exposed for this data type.</returns>
        </member>
        <member name="M:C1.Framework.CornersConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns whether this object supports properties.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <returns>Always returns true.</returns>
        </member>
        <member name="T:C1.Framework.Alignment">
            <summary>
            Specifies the text alignment.
            </summary>
        </member>
        <member name="F:C1.Framework.Alignment.NotSet">
            <summary>
            Default value.
            </summary>
        </member>
        <member name="F:C1.Framework.Alignment.Near">
            <summary>
            Near.
            </summary>
        </member>
        <member name="F:C1.Framework.Alignment.Far">
            <summary>
            Far.
            </summary>
        </member>
        <member name="F:C1.Framework.Alignment.Center">
            <summary>
            Center.
            </summary>
        </member>
        <member name="F:C1.Framework.Alignment.Spread">
            <summary>
            Spread.
            </summary>
        </member>
        <member name="T:C1.Framework.ImageAlignment">
            <summary>
            Specifies the image alignment.
            </summary>
        </member>
        <member name="F:C1.Framework.ImageAlignment.LeftTop">
            <summary>
            Image is vertically aligned at the top, 
            and horizontally aligned on the left. 
            </summary>
        </member>
        <member name="F:C1.Framework.ImageAlignment.CenterTop">
            <summary>
            Image is vertically aligned at the top, 
            and horizontally aligned at the center.
            </summary>
        </member>
        <member name="F:C1.Framework.ImageAlignment.RightTop">
            <summary>
            Image is vertically aligned at the top, 
            and horizontally aligned on the right. 
            </summary>
        </member>
        <member name="F:C1.Framework.ImageAlignment.LeftCenter">
            <summary>
            Image is vertically aligned in the middle, 
            and horizontally aligned on the left. 
            </summary>
        </member>
        <member name="F:C1.Framework.ImageAlignment.CenterCenter">
            <summary>
            Image is vertically aligned in the middle, 
            and horizontally aligned at the center. 
            </summary>
        </member>
        <member name="F:C1.Framework.ImageAlignment.RightCenter">
            <summary>
            Image is vertically aligned in the middle, 
            and horizontally aligned on the right. 
            </summary>
        </member>
        <member name="F:C1.Framework.ImageAlignment.LeftBottom">
            <summary>
            Image is vertically aligned at the bottom, 
            and horizontally aligned on the left. 		
            </summary>
        </member>
        <member name="F:C1.Framework.ImageAlignment.CenterBottom">
            <summary>
            Image is vertically aligned at the bottom, 
            and horizontally aligned at the center.
            </summary>
        </member>
        <member name="F:C1.Framework.ImageAlignment.RightBottom">
            <summary>
            Image is vertically aligned at the bottom, 
            and horizontally aligned on the right. 
            </summary>
        </member>
        <member name="T:C1.Framework.ImageScaling">
            <summary>
            Specifies the image scaling.
            </summary>
        </member>
        <member name="F:C1.Framework.ImageScaling.Clip">
            <summary>
            Use the image's original size, clipping it to the display area if necessary.
            </summary>
        </member>
        <member name="F:C1.Framework.ImageScaling.Stretch">
            <summary>
            Stretch the image to fill the display area. 
            This mode will usually change the image's aspect ratio.
            </summary>
        </member>
        <member name="F:C1.Framework.ImageScaling.Scale">
            <summary>
            Scale the image to fit the display area. 
            This mode may increase or reduce the size of the image 
            while maintaining its aspect ratio.
            </summary>
        </member>
        <member name="F:C1.Framework.ImageScaling.Tile">
            <summary>
            Tile the image to fill the display area.
            </summary>
        </member>
        <member name="F:C1.Framework.ImageScaling.TileStretch">
            <summary>
            Tile the image into the 3x3 matrix and stretch it to fill the display area.
            </summary>
        </member>
        <member name="F:C1.Framework.ImageScaling.TileStretchHorizontal">
            <summary>
            Tile the image into the row of 3 images and stretch it to fill the display area.
            </summary>
        </member>
        <member name="F:C1.Framework.ImageScaling.TileStretchVertical">
            <summary>
            Tile the image into the column of 3 images and stretch it to fill the display area.
            </summary>
        </member>
        <member name="F:C1.Framework.ImageScaling.Hide">
            <summary>
            Hide the image.
            </summary>
        </member>
        <member name="F:C1.Framework.GradientMode.None">
            <summary>
            No gradient.
            </summary>
        </member>
        <member name="F:C1.Framework.GradientMode.Horizontal">
            <summary>
            Horizontal gradient (left to right).
            </summary>
        </member>
        <member name="F:C1.Framework.GradientMode.Vertical">
            <summary>
            Vertical gradient (top to bottom).
            </summary>
        </member>
        <member name="F:C1.Framework.GradientMode.DiagonalDown">
            <summary>
            Diagonal gradient (left-top to right-bottom).
            </summary>
        </member>
        <member name="F:C1.Framework.GradientMode.DiagonalUp">
            <summary>
            Diagonal gradient (left-bottom to right-top).
            </summary>
        </member>
        <member name="F:C1.Framework.GradientMode.Radial">
            <summary>
            Radial gradient.
            </summary>
        </member>
        <member name="T:C1.Framework.TextDirection">
            <summary>
            Specifies the text direction (horizontal or vertical).
            </summary>
        </member>
        <member name="F:C1.Framework.TextDirection.Normal">
            <summary>
            Text is drawn in the horizontal direction, left to right.
            </summary>
        </member>
        <member name="F:C1.Framework.TextDirection.Up">
            <summary>
            Text is draw vertically, from the bottom up.
            </summary>
        </member>
        <member name="F:C1.Framework.TextDirection.Down">
            <summary>
            Text is draw vertically, from the top down.
            </summary>
        </member>
        <member name="T:C1.Framework.StyleFlags">
            <summary>
            Specifies flags for the style.
            </summary>
        </member>
        <member name="F:C1.Framework.StyleFlags.None">
            <summary>
            No special flags.
            </summary>
        </member>
        <member name="F:C1.Framework.StyleFlags.PageBreakBefore">
            <summary>
            Add a page break before this element.
            </summary>
        </member>
        <member name="F:C1.Framework.StyleFlags.PageBreakAfter">
            <summary>
            Add a page break after this element.
            </summary>
        </member>
        <member name="T:C1.Framework.Style">
            <summary>
            <para>The <see cref="T:C1.Framework.Style"/> class contains display attributes that 
            determine the appearance of content on the screen/printer. 
            It includes most elements found in Css styles.</para>
            <para>The <see cref="T:C1.Framework.Style"/> class also contains methods for rendering 
            and measuring content (strings and images) based on the style settings 
            (fonts, margins, etc).</para>
            <para>The <see cref="T:C1.Framework.Style"/> objects are not hierarchical in the sense 
            that they don't have parent styles and don't inherit attributes 
            from the parent style. To create a new style based on an existing one, 
            you would clone the original style, then apply whatever attributes 
            you want to the new style.</para>
            <para>The <see cref="T:C1.Framework.Style"/> objects are hierarchical in the sense that 
            two style attributes (<see cref="P:C1.Framework.Style.Font"/> and <see cref="P:C1.Framework.Style.ForeBrush"/>) don't 
            need to be set. If these attributes are not set, they are inherited, 
            but not from a parent <see cref="T:C1.Framework.Style"/> object. Rather, these attributes 
            are inherited from the parent UI object.</para>
            <para>This type of inheritance make it easy to define a font on 
            a <see cref="T:C1.Framework.Style"/> associated with a parent UI object and have that 
            font be automatically applied to all UI objects contained in the parent. 
            By contrast, a <see cref="P:C1.Framework.Style.BackBrush"/> attribute is not explicitly inherited. 
            Instead, the parent UI object paints its client area with a brush, 
            and child UI objects have a transparent background by default,
            so the parent background shows through by default. Other attributes such
            as alignment, margins, padding, etc are also not inherited.</para>
            </summary>
        </member>
        <member name="M:C1.Framework.Style.#ctor(System.String)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Framework.Style"/>.
            </summary>
            <param name="name">The name of the new <see cref="T:C1.Framework.Style"/> object.</param>
        </member>
        <member name="M:C1.Framework.Style.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Framework.Style"/>.
            </summary>
        </member>
        <member name="M:C1.Framework.Style.Inflate(System.Drawing.Rectangle)">
            <summary>
            Inflates the specified <see cref="T:System.Drawing.Rectangle"/> by the values of
            the current <see cref="T:C1.Framework.Style"/> margins, padding and border.
            </summary>
            <param name="r">A <see cref="T:System.Drawing.Rectangle"/> to inflate.</param>
            <returns>The resulting <see cref="T:System.Drawing.Rectangle"/>.</returns>
        </member>
        <member name="M:C1.Framework.Style.Deflate(System.Drawing.Rectangle)">
            <summary>
            Deflates the specified <see cref="T:System.Drawing.Rectangle"/> by the values of
            the current <see cref="T:C1.Framework.Style"/> margins, padding and border.
            </summary>
            <param name="r">A <see cref="T:System.Drawing.Rectangle"/> to deflate.</param>
            <returns>The resulting <see cref="T:System.Drawing.Rectangle"/>.</returns>
        </member>
        <member name="M:C1.Framework.Style.Clone">
            <summary>
            Creates an instance of the <see cref="T:C1.Framework.Style"/> class that is identical 
            to the current <see cref="T:C1.Framework.Style"/> (except for the <see cref="P:C1.Framework.Style.Locked"/> property,
            which is always false for clones).
            </summary>
            <returns>The copy of the current <see cref="T:C1.Framework.Style"/>.</returns>
        </member>
        <member name="M:C1.Framework.Style.Copy(C1.Framework.Style)">
            <summary>
            Copies all attributes from another <see cref="T:C1.Framework.Style"/> object.
            </summary>
            <param name="source"><see cref="T:C1.Framework.Style"/> object that contains the attributes to copy.</param>
            <remarks>
            The difference between this method and <see cref="M:C1.Framework.Style.Clone"/> is that <b>Clone</b> returns a new
            object, while <b>Copy</b> modifies the attributes in an existing style.
            </remarks>
        </member>
        <member name="M:C1.Framework.Style.Merge(C1.Framework.Style)">
            <summary>
            Copies attributes set to non-default values from another <see cref="T:C1.Framework.Style"/> object.
            </summary>
            <param name="source"><see cref="T:C1.Framework.Style"/> object that contains the attributes to copy.</param>
            <remarks>
            The difference between <see cref="M:C1.Framework.Style.Copy(C1.Framework.Style)"/> and <b>Merge</b> is that <b>Merge</b> will not copy
            attributes that are set to their default values in the <paramref name="source"/> <see cref="T:C1.Framework.Style"/>.
            </remarks>
        </member>
        <member name="M:C1.Framework.Style.OnStyleChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:C1.Framework.Style.StyleChanged"/> event.
            </summary>
            <param name="e"><see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="P:C1.Framework.Style.Name">
            <summary>
            Gets or sets the style name.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.Locked">
            <summary>
            Gets or sets whether the style is locked and cannot be modified.
            </summary>
            <remarks>
            This property is useful when you want to prevent code from accidentally 
            modifying 'stock' styles.
            </remarks>
        </member>
        <member name="P:C1.Framework.Style.Font">
            <summary>
            Gets or sets the font used to paint text within the element.
            </summary>
            <remarks>
            If this property is set to null, the text will be painted using the font
            specified by the parent element's font.
            </remarks>
        </member>
        <member name="P:C1.Framework.Style.BackBrush">
            <summary>
            Gets or sets the brush used to render the element background.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.BackImage">
            <summary>
            Gets or sets the background image for the element.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.BackImageAlignment">
            <summary>
            Gets or sets the alignment used to render the background image.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.BackImageScaling">
            <summary>
            Gets or sets the scaling used to render the background image.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.ForeBrush">
            <summary>
            Gets or sets the brush used to paint the text within the element.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.BorderBrush">
            <summary>
            Gets or sets the brush used to paint the borders around the element.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.Padding">
            <summary>
            Gets or sets the thickness of the padding between the element edges and its content.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.Border">
            <summary>
            Gets or sets the thickness of the border around the element.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.BorderColor">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Color"/> used to draw the border around the element.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.BorderEdges">
            <summary>
            Gets <see cref="P:C1.Framework.Style.BorderEdges"/> object that defines the colors used to paint each edge of the borders.
            </summary>
            <remarks>
            <para>Normally, this property is empty, and the border is drawn using the color specified by the <see cref="P:C1.Framework.Style.BorderColor"/>
            property.</para>
            <para>If any of the members of this property are set to non-transparent colors, then the specified color
            is used to paint the specific border.</para>
            <para>This property is only applicable if the <see cref="P:C1.Framework.Style.Corners"/> are set to zero.</para>
            </remarks>
        </member>
        <member name="P:C1.Framework.Style.Corners">
            <summary>
            Gets or sets the radii of the element corners.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.Margins">
            <summary>
            Gets or sets the thickness of the margins around the element.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.Clip">
            <summary>
            Gets or sets whether text content should be clipped to the element area.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.FontPadding">
            <summary>
            Gets or sets whether text bounding rectangle should include padding.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.HorizontalAlignment">
            <summary>
            Gets or sets how elements should be aligned in the horizontal direction.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.VerticalAlignment">
            <summary>
            Gets or sets how elements should be aligned in the vertical direction.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.ImageAlignment">
            <summary>
            Gets or sets how images should be aligned within the element.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.ImageScaling">
            <summary>
            Gets or sets how images should be scaled within the element.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.WordWrap">
            <summary>
            Gets or sets whether text should be allowed to wrap within the element.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.Trimming">
            <summary>
            Gets or sets how to trim characters that do not fit in the space available.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.Format">
            <summary>
            Gets or sets the format string used to convert the element value into a string.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.Indent">
            <summary>
            Gets or sets the indentation for the first text element.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.ChildSpacing">
            <summary>
            Gets or sets the amount of space between child elements.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.Width">
            <summary>
            Gets or sets the style width (set to -1 to use the default width).
            </summary>
        </member>
        <member name="P:C1.Framework.Style.Height">
            <summary>
            Gets or sets the style height (set to -1 to use the default height).
            </summary>
        </member>
        <member name="P:C1.Framework.Style.Cursor">
            <summary>
            Gets or sets the cursor that should be displayed when the mouse is over elements with this style.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.HotkeyPrefix">
            <summary>
            Gets or sets the <see cref="P:C1.Framework.Style.HotkeyPrefix"/> value determining how to display hot keys. 
            </summary>
        </member>
        <member name="P:C1.Framework.Style.TextDirection">
            <summary>
            Gets or sets the direction in which text is rendered.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.RightToLeft">
            <summary>
            Gets or sets whether text should be rendered from right to left, such as in Arabic or Hebrew.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.Hot">
            <summary>
            Gets or sets the style to be used when the element is hot.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.Pressed">
            <summary>
            Gets or sets the style to be used when the element is pressed.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.HotPressed">
            <summary>
            Gets or sets the style to be used when the element is hot and pressed.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.Disabled">
            <summary>
            Gets or sets the style to be used when the element is disabled.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.Shadow">
            <summary>
            Gets or sets whether the style includes a shadow.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.HotTransitionDelay">
            <summary>
            Gets or sets the delay used to animate transitions to and from the Hot state, in milliseconds.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.DefaultStyle">
            <summary>
            Gets a reference to the default style.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.ForeColor">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Color"/> used to paint the text.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.BackColor">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Color"/> used to paint the background.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.GradientMode">
            <summary>
            Gets or sets the <see cref="P:C1.Framework.Style.GradientMode"/> used to paint the background.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.GradientBlend">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Drawing2D.Blend"/> used to paint the background gradient.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.GradientInterpolationColors">
            <summary>
            Gets or sets a <see cref="T:System.Drawing.Drawing2D.ColorBlend"/> that defines a multicolor gradient.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.GradientCenter">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.PointF"/> that represents the center of a radial gradient background in percentage units.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.BackColor2">
            <summary>
            Gets or sets the secondary color used to build the background gradient.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.GammaCorrection">
            <summary>
            Gets or sets whether to apply gamma correction to the background gradient.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.Flags">
            <summary>
            Gets or sets the style flags.
            </summary>
        </member>
        <member name="E:C1.Framework.Style.StyleChanged">
            <summary>
            Fires when any elements of the <see cref="T:C1.Framework.Style"/> change.
            </summary>
        </member>
        <member name="T:C1.Framework.Theme">
            <summary>
            Class that contains a keyed collection of <see cref="T:C1.Framework.Style"/> objects and methods 
            to serialize the styles into Xml files and streams.
            </summary>
            <remarks>
            <para>The Theme class is a named/keyed collection of <see cref="T:C1.Framework.Style"/> objects.</para>
            <para>The class is designed to be used as a base class for components that need
            to add custom elements to themes in addition to a style collection.</para>
            <para>Inheritors should override the following methods:</para>
            <code>
            // specify the name of the component that will use this theme
            protected virtual string ComponentType
            
            // save component-specific elements to xml
            protected virtual void WriteCustomData(XmlWriter writer)
            
            // load component-specific elements from xml
            protected virtual void ReadCustomData(XmlNode node)
            </code>
            </remarks>
        </member>
        <member name="M:C1.Framework.Theme.#ctor(System.String)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Framework.Theme"/>.
            </summary>
            <param name="name">Name of the new theme.</param>
        </member>
        <member name="M:C1.Framework.Theme.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Framework.Theme"/>.
            </summary>
        </member>
        <member name="M:C1.Framework.Theme.SaveThemes(C1.Framework.Theme[],System.String)">
            <summary>
            Saves a collection of themes into an Xml file.
            </summary>
            <param name="themes">Array containing <see cref="T:C1.Framework.Theme"/> objects.</param>
            <param name="fileName">Name of the Xml file where the themes will be saved.</param>
            <remarks>
            Use the <see cref="M:C1.Framework.Theme.LoadThemes(System.String)"/> method to load the saved themes.
            </remarks>
        </member>
        <member name="M:C1.Framework.Theme.LoadThemes(System.String)">
            <summary>
            Loads a collection of themes from an Xml file.
            </summary>
            <param name="fileName">Name of the Xml file that contains the themes.</param>
            <returns>An array containing the themes loaded from the file.</returns>
            <remarks>
            Use this method to load themes saved with the <see cref="M:C1.Framework.Theme.SaveThemes(C1.Framework.Theme[],System.String)"/> method.
            </remarks>
        </member>
        <member name="M:C1.Framework.Theme.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Writes this <see cref="T:C1.Framework.Theme"/> into an <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <param name="writer"><see cref="T:System.Xml.XmlWriter"/> that will receive the theme definition.</param>
        </member>
        <member name="M:C1.Framework.Theme.ReadXml(System.Xml.XmlReader)">
            <summary>
            Reads this <see cref="T:C1.Framework.Theme"/> from an <see cref="T:System.Xml.XmlReader"/>.
            </summary>
            <param name="reader"><see cref="T:System.Xml.XmlReader"/> that contains the theme definition.</param>
        </member>
        <member name="M:C1.Framework.Theme.WriteXml(System.String)">
            <summary>
            Writes this <see cref="T:C1.Framework.Theme"/> into an Xml file.
            </summary>
            <param name="fileName">Name of the file where the theme will be saved.</param>
        </member>
        <member name="M:C1.Framework.Theme.WriteXml(System.IO.Stream)">
            <summary>
            Writes this <see cref="T:C1.Framework.Theme"/> into an Xml <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream"><see cref="T:System.IO.Stream"/> where the theme will be saved.</param>
        </member>
        <member name="M:C1.Framework.Theme.ReadXml(System.String)">
            <summary>
            Reads this <see cref="T:C1.Framework.Theme"/> from an Xml file.
            </summary>
            <param name="fileName">File that contains the theme data.</param>
        </member>
        <member name="M:C1.Framework.Theme.ReadXml(System.IO.Stream)">
            <summary>
            Reads this <see cref="T:C1.Framework.Theme"/> from an Xml <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream"><see cref="T:System.IO.Stream"/> that contains the theme data in Xml format.</param>
        </member>
        <member name="M:C1.Framework.Theme.ReadXml(System.Xml.XmlNode)">
            <summary>
            Reads this <see cref="T:C1.Framework.Theme"/> from an <see cref="T:System.Xml.XmlNode"/>.
            </summary>
            <param name="node"><see cref="T:System.Xml.XmlNode"/> that contains the theme data.</param>
        </member>
        <member name="M:C1.Framework.Theme.ReadXmlString(System.String)">
            <summary>
            Reads this <see cref="T:C1.Framework.Theme"/> from an Xml string.
            </summary>
            <param name="xmlString">String that contains the theme data in Xml format.</param>
        </member>
        <member name="M:C1.Framework.Theme.WriteCustomData(System.Xml.XmlWriter)">
            <summary>
            Writes component-specific data into the theme.
            </summary>
            <param name="writer"><see cref="T:System.Xml.XmlWriter"/> where custom theme data is saved.</param>
            <remarks>
            Derived classes should override this method to save any custom data their themes may need 
            (anything other than the <see cref="T:C1.Framework.Style"/> collection).
            </remarks>
        </member>
        <member name="M:C1.Framework.Theme.ReadCustomData(System.Xml.XmlNode)">
            <summary>
            Reads component-specific theme data.
            </summary>
            <param name="node"><see cref="T:System.Xml.XmlNode"/> that contains the theme data.</param>
            <remarks>
            Derived classes should override this method to read any custom data their themes may need 
            (anything other than the <see cref="T:C1.Framework.Style"/> collection).
            </remarks>
        </member>
        <member name="M:C1.Framework.Theme.SaveImage(System.Xml.XmlWriter,System.String,System.Drawing.Image)">
            <summary>
            Saves an image into the Xml output stream.
            </summary>
            <param name="writer"><see cref="T:System.Xml.XmlWriter"/> that contains the theme definition.</param>
            <param name="propertyName">Name of the node where the image will be stored.</param>
            <param name="image"><see cref="T:System.Drawing.Image"/> that will be saved in the stream.</param>
            <remarks>
            <para>The default implementation keeps a list of the images that have been saved. If any
            images are saved more than once, only the index is stored for the repeated instances.</para>
            <para>For example:</para>
            <code>
            SaveImage(writer, "MyImageProperty", img);
            SaveImage(writer, "MyImagePropertyAgain", img);
            SaveImage(writer, "MyImagePropertyAndAgain", img);
            
            [MyImageProperty]base64data[/MyImageProperty]
            [MyImagePropertyAgain index="0"/]
            [MyImagePropertyAndAgain index="0"/]
            </code>
            </remarks>
        </member>
        <member name="M:C1.Framework.Theme.LoadImage(System.Xml.XmlNode)">
            <summary>
            Loads an image from the Xml stream.
            </summary>
            <param name="node"><see cref="T:System.Xml.XmlNode"/> that contains the image information.</param>
            <returns>An <see cref="T:System.Drawing.Image"/> object.</returns>
            <remarks>
            <para>The first instance of each image is stored as node data (base 64-encoded). When this
            instance is loaded for the first time, the image is stored in an internal image list.</para>
            <para>Subsequent instances of the same image are not stored in the node as binary data;
            an "index" attribute is used instead that specifies the index of the image in the
            internal image collection.</para>
            </remarks>
        </member>
        <member name="M:C1.Framework.Theme.GetKeyForItem(C1.Framework.Style)">
            <summary>
            Styles are indexed by style name.
            </summary>
            <param name="style">Collection member.</param>
            <returns>Style name (must be unique within collection).</returns>
        </member>
        <member name="M:C1.Framework.Theme.WriteStyle(System.Xml.XmlWriter,C1.Framework.Style,System.Collections.Generic.List{System.Drawing.Image},C1.Framework.Style)">
            <summary>
            Saves a <see cref="T:C1.Framework.Style"/> into an <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <param name="writer"><see cref="T:System.Xml.XmlWriter"/> that will receive the style data.</param>
            <param name="style"><see cref="T:C1.Framework.Style"/> that will be saved.</param>
            <param name="images">List of images whose indices will be saved.</param>
            <param name="parentStyle">Base <see cref="T:C1.Framework.Style"/> that 'owns' the style being saved.</param>
            <remarks>
            <para>To save space, the following rules apply:</para>
            <para>Properties of the main style are saved only if they are set to values different from the default.</para>
            <para>Properties of substyles (hot, pressed, etc) are saved only if they are different from the main style.</para>
            <para>Images are saved in a separate list, and only references are saved in the styles.</para>
            </remarks>
        </member>
        <member name="M:C1.Framework.Theme.ReadStyle(System.Xml.XmlNode,System.Collections.Generic.List{System.Drawing.Image},C1.Framework.Style)">
            <summary>
            Loads a <see cref="T:C1.Framework.Style"/> from an <see cref="T:System.Xml.XmlNode"/>.
            </summary>
            <param name="node"><see cref="T:System.Xml.XmlNode"/> that contains the style data.</param>
            <param name="images">List of images whose indices were saved.</param>
            <param name="parentStyle">Base <see cref="T:C1.Framework.Style"/> that 'owns' the style being loaded.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Framework.Theme.SaveBinaryObject(System.Xml.XmlWriter,System.Object)">
            <summary>
            Saves a binary object into  the specified <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <param name="writer"><see cref="T:System.Xml.XmlWriter"/> that will receive the object data.</param>
            <param name="obj">An object to write.</param>
        </member>
        <member name="M:C1.Framework.Theme.LoadBinaryObject(System.Xml.XmlNode)">
            <summary>
            Loads a binary object from the specified <see cref="T:System.Xml.XmlNode"/>.
            </summary>
            <param name="node">A <see cref="T:System.Xml.XmlNode"/> which contains the object data.</param>
            <returns>The binary object.</returns>
        </member>
        <member name="P:C1.Framework.Theme.Name">
            <summary>
            Gets or sets the theme name (e.g. "RedMoon");
            </summary>
        </member>
        <member name="P:C1.Framework.Theme.ComponentType">
            <summary>
            Gets or sets the name of the component that owns the theme
            (e.g., "C1Schedule", "C1Calendar" or "C1Ribbon"). 
            </summary>
        </member>
        <member name="T:C1.Framework.Thickness">
            <summary>
            Represents padding, border or margin information associated with a 
            user interface (UI) element.
            </summary>
        </member>
        <member name="M:C1.Framework.Thickness.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Framework.Thickness"/>. 
            </summary>
            <param name="left">Thickness of the left edge, in pixels.</param>
            <param name="top">Thickness of the top edge, in pixels.</param>
            <param name="right">Thickness of the right edge, in pixels.</param>
            <param name="bottom">Thickness of the bottom edge, in pixels.</param>
        </member>
        <member name="M:C1.Framework.Thickness.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Framework.Thickness"/>.
            </summary>
            <param name="leftRight">Thickness of the left and right edges, in pixels.</param>
            <param name="topBottom">Thickness of the top and bottom edges, in pixels.</param>
        </member>
        <member name="M:C1.Framework.Thickness.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Framework.Thickness"/>.
            </summary>
            <param name="width">Thickness of all edges, in pixels.</param>
        </member>
        <member name="M:C1.Framework.Thickness.Inflate(System.Int32,System.Int32)">
            <summary>
            Inflates the current <see cref="T:C1.Framework.Thickness"/> by the specified values.
            </summary>
            <param name="width">The inflate size for vertical edges.</param>
            <param name="height">The inflate size for horizontal edges.</param>
            <returns>The new <see cref="T:C1.Framework.Thickness"/>.</returns>
        </member>
        <member name="M:C1.Framework.Thickness.Inflate(System.Int32)">
            <summary>
            Inflates the current <see cref="T:C1.Framework.Thickness"/> by the specified size.
            </summary>
            <param name="size">The size.</param>
            <returns>The new <see cref="T:C1.Framework.Thickness"/>.</returns>
        </member>
        <member name="M:C1.Framework.Thickness.Inflate(System.Drawing.Rectangle)">
            <summary>
            Inflates the specified <see cref="T:System.Drawing.Rectangle"/> by the current <see cref="T:C1.Framework.Thickness"/>.
            </summary>
            <param name="r">A <see cref="T:System.Drawing.Rectangle"/> to deflate.</param>
            <returns>The inflated <see cref="T:System.Drawing.Rectangle"/>.</returns>
        </member>
        <member name="M:C1.Framework.Thickness.Deflate(System.Drawing.Rectangle)">
            <summary>
            Deflates the specified <see cref="T:System.Drawing.Rectangle"/> by the current <see cref="T:C1.Framework.Thickness"/>.
            </summary>
            <param name="r">A <see cref="T:System.Drawing.Rectangle"/> to deflate.</param>
            <returns>The deflated <see cref="T:System.Drawing.Rectangle"/>.</returns>
        </member>
        <member name="M:C1.Framework.Thickness.SwapLeftRight">
            <summary>
            Swaps the values of the Left and Right properties.
            </summary>
        </member>
        <member name="M:C1.Framework.Thickness.op_Implicit(System.Int32)~C1.Framework.Thickness">
            <summary>
            Converts an <see cref="T:System.Int32"/> into a <see cref="T:C1.Framework.Thickness"/>.
            </summary>
        </member>
        <member name="M:C1.Framework.Thickness.GetHashCode">
            <summary>
            Generates a hash code for the current <see cref="T:C1.Framework.Thickness"/>. 
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:C1.Framework.Thickness.Equals(System.Object)">
            <summary>
            Determines whether the value of the specified object is equivalent 
            to the current <see cref="T:C1.Framework.Thickness"/>. 
            </summary>
            <param name="obj">The object to compare to the current <see cref="T:C1.Framework.Thickness"/>.</param>
            <returns>true if the two <see cref="T:C1.Framework.Thickness"/> objects are equal; 
            otherwise, false. </returns>
        </member>
        <member name="M:C1.Framework.Thickness.op_Equality(C1.Framework.Thickness,C1.Framework.Thickness)">
            <summary>
            Tests whether two specified <see cref="T:C1.Framework.Thickness"/> objects are equivalent. 
            </summary>
            <param name="t1">A <see cref="T:C1.Framework.Thickness"/> to test.</param>
            <param name="t2">A <see cref="T:C1.Framework.Thickness"/> to test.</param>
            <returns>true if the two <see cref="T:C1.Framework.Thickness"/> objects are equal; 
            otherwise, false. </returns>
        </member>
        <member name="M:C1.Framework.Thickness.op_Inequality(C1.Framework.Thickness,C1.Framework.Thickness)">
            <summary>
            Tests whether two specified <see cref="T:C1.Framework.Thickness"/> objects are not equivalent. 
            </summary>
            <param name="t1">A <see cref="T:C1.Framework.Thickness"/> to test.</param>
            <param name="t2">A <see cref="T:C1.Framework.Thickness"/> to test.</param>
            <returns>True if the two <see cref="T:C1.Framework.Thickness"/> objects are different; 
            otherwise, false. </returns>
        </member>
        <member name="P:C1.Framework.Thickness.Empty">
            <summary>
            Provides a <see cref="T:C1.Framework.Thickness"/> object with no thickness.
            </summary>
        </member>
        <member name="P:C1.Framework.Thickness.Left">
            <summary>
            Gets or sets the thickness value for the left edge. 
            </summary>
        </member>
        <member name="P:C1.Framework.Thickness.Top">
            <summary>
            Gets or sets the thickness value for the top edge. 
            </summary>
        </member>
        <member name="P:C1.Framework.Thickness.Right">
            <summary>
            Gets or sets the thickness value for the right edge. 
            </summary>
        </member>
        <member name="P:C1.Framework.Thickness.Bottom">
            <summary>
            Gets or sets the thickness value for the bottom edge. 
            </summary>
        </member>
        <member name="P:C1.Framework.Thickness.IsEmpty">
            <summary>
            Returns true if the <see cref="T:C1.Framework.Thickness"/> object is empty. 
            </summary>
        </member>
        <member name="P:C1.Framework.Thickness.Height">
            <summary>
            Gets the combined thickness for the top and bottom edges. 
            </summary>
        </member>
        <member name="P:C1.Framework.Thickness.Width">
            <summary>
            Gets the combined thickness for the right and left edges. 
            </summary>
        </member>
        <member name="T:C1.Framework.ThicknessConverter">
            <summary>
            Provides a type converter to convert <see cref="T:C1.Framework.Thickness"/> values 
            to and from various other representations. 
            </summary>
        </member>
        <member name="M:C1.Framework.ThicknessConverter.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Framework.ThicknessConverter"/>.
            </summary>
        </member>
        <member name="M:C1.Framework.ThicknessConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of one type to the type of this converter.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="sourceType">A <see cref="T:System.Type"/> that represents the type from which to convert.</param>
            <returns>True if the conversion can be performed; false otherwise.</returns>
        </member>
        <member name="M:C1.Framework.ThicknessConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type, using the specified context. 
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="destinationType">A <see cref="T:System.Type"/> that represents the type to convert to.</param>
            <returns>True if the conversion can be performed; false otherwise.</returns>
        </member>
        <member name="M:C1.Framework.ThicknessConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given value to the type of this converter. 
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <returns>An <see cref="T:System.Object"/> that represents the converted value. </returns>
        </member>
        <member name="M:C1.Framework.ThicknessConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> into which <paramref name="value"/> will be converted.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"/> to convert the <paramref name="value"/> to.</param>
            <returns>An <see cref="T:System.Object"/> that represents the converted value. </returns>
        </member>
        <member name="M:C1.Framework.ThicknessConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <summary>
            Creates a <see cref="T:C1.Framework.Thickness"/> object given a set of property values for the object. 
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="propertyValues">A contains a series of name-value pairs with the new property values.</param>
            <returns>The newly created object, or null if the object could not be created.</returns>
        </member>
        <member name="M:C1.Framework.ThicknessConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns whether changing a value on this object requires a call to 
            the <see cref="M:C1.Framework.ThicknessConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)"/> method to create a new value.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <returns>True if the <see cref="M:C1.Framework.ThicknessConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)"/> method should be called when a change is made to one or more properties of this object.</returns>
        </member>
        <member name="M:C1.Framework.ThicknessConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            Returns a collection of properties for the type of array specified by the value parameter.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="value">An <see cref="T:System.Object"/> that specifies the type of array for which to get properties.</param>
            <param name="attributes">An array of type <see cref="T:System.Attribute"/> that is used as a filter.</param>
            <returns>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/> with the properties that are exposed for this data type.</returns>
        </member>
        <member name="M:C1.Framework.ThicknessConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns whether this object supports properties.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <returns>Always returns true.</returns>
        </member>
        <member name="T:C1.Framework.TextElement">
            <summary>
            <para>Element that displays a string.</para>
            
            <para>Alignment and formatting are controlled by the element's <see cref="T:C1.Framework.Style"/>.</para>
            </summary>
        </member>
        <member name="M:C1.Framework.TextElement.#ctor(C1.Framework.Style,System.String)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Framework.TextElement"/> with a given style and contents.
            </summary>
            <param name="style"><see cref="T:C1.Framework.Style"/> used to measure and render the <see cref="T:C1.Framework.TextElement"/>,</param>
            <param name="text">String displayed in the <see cref="T:C1.Framework.TextElement"/>,</param>
        </member>
        <member name="M:C1.Framework.TextElement.#ctor(C1.Framework.Style)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Framework.TextElement"/> with a given style.
            </summary>
            <param name="style"><see cref="T:C1.Framework.Style"/> used to measure and render the <see cref="T:C1.Framework.TextElement"/>,</param>
        </member>
        <member name="M:C1.Framework.TextElement.#ctor(System.String)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Framework.TextElement"/> with a given text.
            </summary>
            <param name="text">String displayed in the <see cref="T:C1.Framework.TextElement"/>,</param>
        </member>
        <member name="M:C1.Framework.TextElement.#ctor">
            <summary>
            Initializes a new instance of an empty <see cref="T:C1.Framework.TextElement"/>.
            </summary>
        </member>
        <member name="M:C1.Framework.TextElement.GetValue">
            <summary>
            Gets the string represented by this <see cref="T:C1.Framework.TextElement"/>.
            </summary>
            <returns>The string represented by this <see cref="T:C1.Framework.TextElement"/>.</returns>
        </member>
        <member name="P:C1.Framework.TextElement.Text">
            <summary>
            Gets or sets the string displayed by this <see cref="T:C1.Framework.TextElement"/>.
            </summary>
        </member>
        <member name="P:C1.Framework.TextElement.ForceLineBreak">
            <summary>
            Gets a <see cref="T:C1.Framework.Element.LineBreak"/> value that determines whether there should be
            line breaks before and/or after this <see cref="T:C1.Framework.TextElement"/> when it occurs in a paragraph.
            </summary>
        </member>
        <member name="T:C1.Framework.ResourceLoader">
            <summary>
            Class with static methods used for enumerating and retrieving application
            resources.
            </summary>
        </member>
        <member name="M:C1.Framework.ResourceLoader.GetImages">
            <summary>
            Returns all images from the entry assembly. 
            </summary>
            <returns>A collection of name/image pairs.</returns>
        </member>
        <member name="M:C1.Framework.ResourceLoader.GetImages(System.Reflection.Assembly)">
            <summary>
            Returns all images from the specified assembly. 
            </summary>
            <param name="a">An <see cref="T:System.Reflection.Assembly"/> to load images from.</param>
            <returns>A collection of name/image pairs.</returns>
        </member>
        <member name="M:C1.Framework.ResourceLoader.GetImage(System.String)">
            <summary>
            Loads an image from the entry assembly. 
            </summary>
            <param name="name">The case-insensitive name of the requested image.</param>
            <returns>The <see cref="T:System.Drawing.Image"/> if it is found; null otherwise.</returns>
        </member>
        <member name="M:C1.Framework.ResourceLoader.GetImage(System.Reflection.Assembly,System.String)">
            <summary>
            Loads an image from the specified assembly. 
            </summary>
            <param name="a">An <see cref="T:System.Reflection.Assembly"/> to load image from.</param>
            <param name="name">The case-insensitive name of the requested image.</param>
            <returns>The <see cref="T:System.Drawing.Image"/> if it is found; null otherwise.</returns>
        </member>
        <member name="M:C1.Framework.ResourceLoader.GetStream(System.String)">
            <summary>
            Loads the specified manifest resource from the entry assembly. 
            </summary>
            <param name="name">The case-insensitive name of the manifest resource being requested.</param>
            <returns>A <see cref="T:System.IO.Stream"/> representing this manifest resource.</returns>
        </member>
        <member name="M:C1.Framework.ResourceLoader.GetStream(System.Reflection.Assembly,System.String)">
            <summary>
            Loads the specified manifest resource from the specified assembly. 
            </summary>
            <param name="a">An <see cref="T:System.Reflection.Assembly"/> to load resource from.</param>
            <param name="name">The case-insensitive name of the manifest resource being requested.</param>
            <returns>A <see cref="T:System.IO.Stream"/> representing this manifest resource.</returns>
        </member>
        <member name="M:C1.Framework.ResourceLoader.DecodeImage(System.String)">
            <summary>
            Decodes an image from a base-64-encoded string.
            </summary>
            <param name="data">String that contains the encoded image data.</param>
            <returns>The <see cref="T:System.Drawing.Image"/> encoded in the string.</returns>
        </member>
        <member name="M:C1.Framework.Html.Css.ParseAttribute(System.Collections.Hashtable,System.String,System.String)">
            <summary>
            Adds a StyleAttribute to a table based on a name and value.
            </summary>
        </member>
        <member name="T:C1.Framework.Html.HtmlDiv">
            <summary>
            Class that represents Html DIV tags.
            </summary>
        </member>
        <member name="M:C1.Framework.Html.HtmlDiv.BreakBefore(C1.Framework.Element,System.Int32,System.Int32)">
            <summary>
            Gets a value that determines whether a line break should be inserted before
            a given element.
            </summary>
            <param name="e">Element to test for a line break.</param>
            <param name="lineEnd">Position of the line end if no breaks are added.</param>
            <param name="width">Width available for rendering the paragraph.</param>
            <returns>True if a line break should be inserted before the given element.</returns>
        </member>
        <member name="M:C1.Framework.Html.HtmlDiv.BreakAfter(C1.Framework.Element)">
            <summary>
            Gets a value that determines whether a line break should be inserted after
            a given element.
            </summary>
            <param name="e">Element to test for a line break.</param>
            <returns>True if a line break should be inserted after the given element.</returns>
        </member>
        <member name="M:C1.Framework.Html.HtmlDiv.GetExtraSpacing(C1.Framework.Element,C1.Framework.Element)">
            <summary>
            Gets the amount of space, in pixels, to be added between two elements.
            </summary>
            <param name="above">Element above the space.</param>
            <param name="below">Element below the space.</param>
            <returns>Amount of space, in pixels, to be added between the two elements.</returns>
        </member>
        <member name="M:C1.Framework.Html.HtmlDiv.AddTextElement(C1.Framework.Style,System.String)">
            <summary>
            Adds a string with a given style to this paragraph.
            </summary>
            <param name="s"><see cref="T:C1.Framework.Style"/> used to render the new string.</param>
            <param name="text">String to add to this paragraph.</param>
        </member>
        <member name="M:C1.Framework.Html.HtmlDiv.RenderChildren(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Renders the child elements into a given rectangle. 
            </summary>
            <param name="g">Graphics object where the element will be rendered.</param>
            <param name="r">Rectangle where the child elements will be rendered.</param>
            <remarks>
            Derived elements may override this method in order to draw into the <see cref="T:System.Drawing.Graphics"/>
            after the background and borders have been rendered but before the child elements are 
            rendered.
            </remarks>
        </member>
        <member name="T:C1.Framework.Html.HtmlDiv.BaseLineTextElement">
            <summary>
            Like a <see cref="T:C1.Framework.TextElement"/>, but with an adjustable base line offset 
            (for implementing sub/super scripts)
            </summary>
        </member>
        <member name="T:C1.Framework.Html.HtmlElement">
            <summary>
            Class that represents a generic Html <see cref="T:C1.Framework.Element"/>.
            </summary>
        </member>
        <member name="T:C1.Framework.Html.HtmlFont">
            <summary>
            Class that represents HTML 'FONT' tags.
            </summary>
        </member>
        <member name="T:C1.Framework.Html.HtmlSpan">
            <summary>
            Represents an HTML span.
            </summary>
        </member>
        <member name="T:C1.Framework.Html.HtmlHr">
            <summary>
            Extends Element to provide a horizontal rule across the document.
            </summary>
        </member>
        <member name="T:C1.Framework.Html.HtmlHyperlink">
            <summary>
            Class that represents HTML 'A' tags.
            </summary>
        </member>
        <member name="T:C1.Framework.Html.HyperlinkElement">
            <summary>
            Invisible elements inserted in the HTML stream to delimit hyperlinks.
            To use this, the viewer should handle the MouseDown event, use HitTest to 
            find the element clicked, then scan the Children collection to determine
            whether the click was on a link and what the link parameters are.
            </summary>
        </member>
        <member name="T:C1.Framework.Html.HtmlImage">
            <summary>
            Represents an HTML 'img' tag.
            </summary>
        </member>
        <member name="T:C1.Framework.Html.HtmlList">
            <summary>
            REVIEW: Replace with 2-column table?
            The current setup works but makes the document dirty when it renders...
            </summary>
        </member>
        <member name="T:C1.Framework.Html.HtmlListItem">
            <summary>
            Class that represents an item in an ordered or unordered list.
            </summary>
        </member>
        <member name="T:C1.Framework.Html.HtmlLoader">
            <summary>
            Utility class with static methods used for loading (and caching)
            text and images from the web, from disk, or from app resources.
            </summary>
        </member>
        <member name="T:C1.Framework.Html.HtmlParagraph">
            <summary>
            Class that represents an HTML paragraph.
            </summary>
        </member>
        <member name="T:C1.Framework.Html.HtmlParser">
            <summary>
            Class used to parse that HTML into tags and text.
            </summary>
            <remarks>
            The main method in this class is <see cref="M:C1.Framework.Html.HtmlParser.Read"/>, which advances a pointer and 
            sets the <see cref="P:C1.Framework.Html.HtmlParser.Tag"/> and <see cref="P:C1.Framework.Html.HtmlParser.Text"/> properties.
            </remarks>
        </member>
        <member name="T:C1.Framework.Html.HtmlReader">
            <summary>
            <para>Class used to parse that HTML into tags and text.</para>
            
            <para>The main method is <see cref="M:C1.Framework.Html.HtmlReader.Read"/>, which advances a pointer and 
            sets the <see cref="P:C1.Framework.Html.HtmlReader.Tag"/> and <see cref="P:C1.Framework.Html.HtmlReader.Text"/> properties.</para>
            </summary>
        </member>
        <member name="T:C1.Framework.Html.HtmlRenderer">
            <summary>
            Helper class used for measuring and rendering HTML.
            </summary>
        </member>
        <member name="T:C1.Framework.Html.HtmlTable">
            <summary>
            <para>HtmlTable derives from HtmlDiv and contains a single GridPanel, exposed by
            the <see cref="P:C1.Framework.Html.HtmlTable.Table"/> property.</para>
            <para>HtmlTable does not derive directly from GridPanel for two reasons:</para>
            <para>1) To allow horizontal alignment of the table within the paragraph, and</para>
            <para>2) Because this is simpler than using an interface and different parent classes.</para>
            </summary>
        </member>
        <member name="T:C1.Framework.Html.HtmlCell">
            <summary>
            Represents a cell in a table.
            </summary>
        </member>
        <member name="T:C1.Win.Localization.EndUserLocalizeOptionsAttribute">
            <summary>
            Allows to redefine default enduser localize options for
            property, field or class.
            </summary>
        </member>
        <member name="P:C1.Win.Localization.EndUserLocalizeOptionsAttribute.Properties">
            <summary>
            Defines the list of properties that should be localized.
            </summary>
        </member>
        <member name="P:C1.Win.Localization.EndUserLocalizeOptionsAttribute.ExcludedMembers">
            <summary>
            Defines a list of members of control that should be excluded from localization.
            Currently used only AddControlToResources application for automatically generating
            control resources.
            </summary>
        </member>
        <member name="P:C1.Win.Localization.EndUserLocalizeOptionsAttribute.Exclude">
            <summary>
            If true then class, property or field will be not displayed for 
            enduser localization.
            </summary>
        </member>
        <member name="P:C1.Win.Localization.EndUserLocalizeOptionsAttribute.Description">
            <summary>
            Gets the description of string that will be displayed in the
            end user localizer in design-time.
            </summary>
        </member>
        <member name="P:C1.Win.Localization.EndUserLocalizeOptionsAttribute.StringsType">
            <summary>
            Gets or sets type providing string used to localize <see cref="P:C1.Win.Localization.EndUserLocalizeOptionsAttribute.Description"/>.
            </summary>
        </member>
        <member name="P:C1.Win.Localization.EndUserLocalizeOptionsAttribute.Key">
            <summary>
            Gets or sets resource key containing localized string for <see cref="P:C1.Win.Localization.EndUserLocalizeOptionsAttribute.Description"/>.
            </summary>
        </member>
        <member name="T:C1.Win.Localization.C1DescriptionAttribute">
            <summary>
            C1DescriptionAttribute replaces the DescriptionAttribute
            and uses the StringsManager and Strings classes to
            return the localized Attribute string.
            </summary>
        </member>
        <member name="T:C1.Win.Localization.C1CategoryAttribute">
            <summary>
            C1CategoryAttribute replaces the CategoryAttribute
            and uses the StringsManager and Strings classes to
            return the localized Attribute string.
            </summary>
        </member>
        <member name="M:C1.Win.Localization.StringsManager.GetC1BuiltinResourceStream(System.String,System.Reflection.Assembly,System.String)">
            <summary>
            Returns ResourceStream for "official" resources
            that provided only by C1, typicallly those resources contains
            design-time strings.
            Those resources can be only in main control assembly like C1.C1Preview.2.dll 
            and name of resource should have following format:
            CulturePrefix.StringsTypeName
            for example:
            ja.C1.C1Preview.Design.DesignStrings.resx
            </summary>
            <param name="resourceName"></param>
            <param name="assembly"></param>
            <param name="cultureName"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.Localization.StringsManager.GetParentCulture(System.String)">
            <summary>
            Returns the parent of the CultureInfo passed in. Differs from ci.Parent
            in that while ci can be equal to ci.Parent, this method it never returns
            the passed ci itself, rather it would return null.
            Also this function has special handling for chinese culture.
            Under NET2 it returns "zh" culture name for
            neutral "zh-Hans" and "zh-Hant" chinese cultures, under
            NET2 "zh" is not exists.
            </summary>
            <param name="cultureName">The culture name to get parent for.</param>
            <returns>The parent of the culture info, or null.</returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.C1FrameworkHelper.ApplyStyle(C1.Win.C1Themes.Shared.C1ThemeProxy,C1.Framework.Style,System.String)">
            <summary>
            fills style props with values from the specified path
            </summary>
            <param name="tp"></param>
            <param name="style"></param>
            <param name="path"></param>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.C1FrameworkHelper.ApplyHotStyle(C1.Win.C1Themes.Shared.C1ThemeProxy,C1.Framework.Style,System.String)">
            <summary>
            
            </summary>
            <param name="tp"></param>
            <param name="style">reference to the framework style, for which hot style should be applied</param>
            <param name="path">xml path to the hot style</param>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.BackgroundPictureDrawModeEnum">
            <summary>
            Used in:
            C1TrueDBGrid\Style
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.BackgroundPictureDrawModeEnum.Center">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.BackgroundPictureDrawModeEnum.Stretch">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.BackgroundPictureDrawModeEnum.Tile">
            <summary>For internal use.</summary>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.BorderType">
            <summary>
            Used in:
            C1TrueDBGrid\GridBorder
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.BorderType.None">
            <summary>
            No borders.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.BorderType.Flat">
            <summary>
            Borders have a Flat appearance.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.BorderType.Raised">
            <summary>
            Borders have a 3D raised appearance.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.BorderType.Inset">
            <summary>
            Borders have a 3D inset appearance.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.BorderType.Groove">
            <summary>
            A line around the inside of the border.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.BorderType.Fillet">
            <summary>
            A fillet type border.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.BorderType.RaisedBevel">
            <summary>
            Borders have a 3D raised with a bevel.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.BorderType.InsetBevel">
            <summary>
            Borders have a 3D inset with a bevel.
            </summary>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.ForegroundPicturePosition">
            <summary>
            Used in:
            C1TrueDBGrid\Style
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ForegroundPicturePosition.Near">
            <summary>
            Image is rendered in the near side of the cell.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ForegroundPicturePosition.Far">
            <summary>
            Image is rendered in the far side of the cell.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ForegroundPicturePosition.LeftOfText">
            <summary>
            Image is rendered to the left of any text in the cell.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ForegroundPicturePosition.RightOfText">
            <summary>
            Image is rendered to the right of any text in the cell.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ForegroundPicturePosition.TopOfText">
            <summary>
            Image is rendered on top of any text in the cell.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ForegroundPicturePosition.BottomOfText">
            <summary>
            Image is rendered below any text in the cell.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ForegroundPicturePosition.PictureOnly">
            <summary>
            Text is not displayed.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ForegroundPicturePosition.TextOnly">
            <summary>
            Image is not displayed.
            </summary>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.AlignHorzEnum">
            <summary>
            Used in:
            C1TrueDBGrid\Style
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.AlignHorzEnum.General">
            <summary>
            Text is aligned Near and numeric values Far
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.AlignHorzEnum.Near">
            <summary>
            Text is aligned to the left.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.AlignHorzEnum.Center">
            <summary>
            Text is aligned centered.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.AlignHorzEnum.Far">
            <summary>
            Text is aligned to the right.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.AlignHorzEnum.Justify">
            <summary>
            Text is aligned with respect to the cells boundries.
            </summary>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.AlignVertEnum">
            <summary>
            Used in:
            C1TrueDBGrid\Style
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.AlignVertEnum.Top">
            <summary>
            Text is rendered at the top of the cell.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.AlignVertEnum.Center">
            <summary>
            Text is rendered at the center of the cell.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.AlignVertEnum.Bottom">
            <summary>
            Text is rendered at the bottom of the cell.
            </summary>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.LineStyle">
            <summary>
            Used in:
            C1TrueDBGrid\GridLines
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.LineStyle.None">
            <summary>
            No line.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.LineStyle.Single">
            <summary>
            Single line.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.LineStyle.Double">
            <summary>
            Double line.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.LineStyle.Raised">
            <summary>
            Line with 3D raised appearance.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.LineStyle.Inset">
            <summary>
            Line with 3D inset appearance.
            </summary>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.PaletteType">
            <summary>
            Used in:
            C1Schedule\PaletteType
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.PaletteType.Office2007">
            <summary>
            Office 2007 palette includes back and border colors 
            of free and working hours and days, day headers, grid borders 
            and calendar tabs. 
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.PaletteType.Office2010">
            <summary>
            Office 2010 palette includes back and border colors 
            of free and working hours and days, day headers, grid borders 
            and calendar tabs. 
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.BackgroundGradient.None">
            <summary>
            Use no background gradient.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.BackgroundGradient.Automatic">
            <summary>
            Use a gradient that matches the current system Visual Style.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.BackgroundGradient.Silver">
            <summary>
            Use a silver background gradient.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.BackgroundGradient.Blue">
            <summary>
            Use a blue background gradient.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.BackgroundGradient.Gold">
            <summary>
            Use a gold background gradient.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.BackgroundGradient.Olive">
            <summary>
            Use an olive background gradient.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.BackgroundGradient.Vista">
            <summary>
            Use the Vista-style background gradient.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.GradientMode.None">
            <summary>
            No gradient.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.GradientMode.Horizontal">
            <summary>
            Horizontal gradient (left to right).
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.GradientMode.Vertical">
            <summary>
            Vertical gradient (top to bottom).
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.GradientMode.DiagonalDown">
            <summary>
            Diagonal gradient (left-top to right-bottom).
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.GradientMode.DiagonalUp">
            <summary>
            Diagonal gradient (left-bottom to right-top).
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.GradientMode.Radial">
            <summary>
            Radial gradient.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageAlignment.LeftTop">
            <summary>
            Image is vertically aligned at the top, 
            and horizontally aligned on the left. 
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageAlignment.CenterTop">
            <summary>
            Image is vertically aligned at the top, 
            and horizontally aligned at the center.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageAlignment.RightTop">
            <summary>
            Image is vertically aligned at the top, 
            and horizontally aligned on the right. 
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageAlignment.LeftCenter">
            <summary>
            Image is vertically aligned in the middle, 
            and horizontally aligned on the left. 
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageAlignment.CenterCenter">
            <summary>
            Image is vertically aligned in the middle, 
            and horizontally aligned at the center. 
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageAlignment.RightCenter">
            <summary>
            Image is vertically aligned in the middle, 
            and horizontally aligned on the right. 
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageAlignment.LeftBottom">
            <summary>
            Image is vertically aligned at the bottom, 
            and horizontally aligned on the left. 		
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageAlignment.CenterBottom">
            <summary>
            Image is vertically aligned at the bottom, 
            and horizontally aligned at the center.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageAlignment.RightBottom">
            <summary>
            Image is vertically aligned at the bottom, 
            and horizontally aligned on the right. 
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageScaling.Clip">
            <summary>
            Use the image's original size, clipping it to the display area if necessary.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageScaling.Stretch">
            <summary>
            Stretch the image to fill the display area. 
            This mode will usually change the image's aspect ratio.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageScaling.Scale">
            <summary>
            Scale the image to fit the display area. 
            This mode may increase or reduce the size of the image 
            while maintaining its aspect ratio.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageScaling.Tile">
            <summary>
            Tile the image to fill the display area.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageScaling.TileStretch">
            <summary>
            Tile the image into the 3x3 matrix and stretch it to fill the display area.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageScaling.TileStretchHorizontal">
            <summary>
            Tile the image into the row of 3 images and stretch it to fill the display area.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageScaling.TileStretchVertical">
            <summary>
            Tile the image into the column of 3 images and stretch it to fill the display area.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageScaling.Hide">
            <summary>
            Hide the image.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Alignment.NotSet">
            <summary>
            Default value.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Alignment.Near">
            <summary>
            Near.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Alignment.Far">
            <summary>
            Far.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Alignment.Center">
            <summary>
            Center.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Alignment.Spread">
            <summary>
            Spread.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.TextDirection.Normal">
            <summary>
            Text is drawn in the horizontal direction, left to right.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.TextDirection.Up">
            <summary>
            Text is draw vertically, from the bottom up.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.TextDirection.Down">
            <summary>
            Text is draw vertically, from the top down.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.RadialMenuTooltipPosition.None">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.RadialMenuTooltipPosition.Left">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.RadialMenuTooltipPosition.Top">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.RadialMenuTooltipPosition.Right">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.RadialMenuTooltipPosition.Bottom">
            <summary>For internal use.</summary>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.ImageSetEnum">
            <summary>
            Describes the image set used for toolbar images of the
            preview actions.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageSetEnum.Classic">
            <summary>
            Classic image set.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageSetEnum.XP">
            <summary>
            XP image set.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageSetEnum.XP2">
            <summary>
            XP alternative image set.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageSetEnum.XP3">
            <summary>
            XP second alternative image set.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageSetEnum.Adobe">
            <summary>
            Adobe image set.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageSetEnum.OsX">
            <summary>
            Os X image set.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageSetEnum.Original">
            <summary>
            Original (C1Preview "classic") image set.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_BorderDirEnum.Both">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_BorderDirEnum.Horizontal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_BorderDirEnum.Vertical">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_BorderStyleEnum.None">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_BorderStyleEnum.Flat">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_BorderStyleEnum.Double">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_BorderStyleEnum.Raised">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_BorderStyleEnum.Inset">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_BorderStyleEnum.Groove">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_BorderStyleEnum.Fillet">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_BorderStyleEnum.Dotted">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_DisplayEnum.TextOnly">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_DisplayEnum.ImageOnly">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_DisplayEnum.Overlay">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_DisplayEnum.Stack">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_DisplayEnum.None">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_ImageAlignEnum.LeftTop">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_ImageAlignEnum.LeftCenter">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_ImageAlignEnum.LeftBottom">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_ImageAlignEnum.CenterTop">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_ImageAlignEnum.CenterCenter">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_ImageAlignEnum.CenterBottom">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_ImageAlignEnum.RightTop">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_ImageAlignEnum.RightCenter">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_ImageAlignEnum.RightBottom">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_ImageAlignEnum.Scale">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_ImageAlignEnum.Stretch">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_ImageAlignEnum.Tile">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_ImageAlignEnum.Hide">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_ImageAlignEnum.TileStretch">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TextAlignEnum.LeftTop">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TextAlignEnum.LeftCenter">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TextAlignEnum.LeftBottom">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TextAlignEnum.CenterTop">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TextAlignEnum.CenterCenter">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TextAlignEnum.CenterBottom">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TextAlignEnum.RightTop">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TextAlignEnum.RightCenter">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TextAlignEnum.RightBottom">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TextAlignEnum.GeneralTop">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TextAlignEnum.GeneralCenter">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TextAlignEnum.GeneralBottom">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TextDirectionEnum.Normal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TextDirectionEnum.Up">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TextDirectionEnum.Down">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TextEffectEnum.Flat">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TextEffectEnum.Raised">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TextEffectEnum.Inset">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TreeStyleFlags.None">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TreeStyleFlags.Lines">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TreeStyleFlags.Symbols">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TreeStyleFlags.ButtonBar">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TreeStyleFlags.Leaf">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TreeStyleFlags.Complete">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TreeStyleFlags.Simple">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TreeStyleFlags.CompleteLeaf">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TreeStyleFlags.SimpleLeaf">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_FocusRectEnum.None">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_FocusRectEnum.Light">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_FocusRectEnum.Heavy">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_FocusRectEnum.Solid">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_FocusRectEnum.Raised">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_FocusRectEnum.Inset">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_BarShape.None">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_BarShape.ThickBar">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_BarShape.TopBar">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_BarShape.MiddleBar">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_BarShape.BottomBar">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_BarShape.TopLine">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_BarShape.MiddleLine">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_BarShape.BottomLine">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_HatchPattern.Empty">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_HatchPattern.SolidBrush">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_HatchPattern.Gradient">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_HatchPattern.Percent25">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_HatchPattern.Percent50">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_HatchPattern.Percent70">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_HatchPattern.ForwardDiagonal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_HatchPattern.BackwardDiagonal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_HatchPattern.DiagonalCross">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_HatchPattern.Vertical">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_HatchPattern.Horizontal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_HatchPattern.NarrowVertical">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_HatchPattern.NarrowHorizontal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_HatchPattern.Confetti">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_HatchPattern.ZigZag">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_TaskProperty.None">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_TaskProperty.Name">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_TaskProperty.Mode">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_TaskProperty.Calendar">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_TaskProperty.Duration">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_TaskProperty.DurationUnits">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_TaskProperty.Start">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_TaskProperty.Finish">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_TaskProperty.PercentComplete">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_TaskProperty.Deadline">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_TaskProperty.ConstraintType">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_TaskProperty.ConstraintDate">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_TaskProperty.Predecessors">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_TaskProperty.ResourceNames">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_TaskProperty.Notes">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_ProgressLineStyle.None">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_ProgressLineStyle.Solid">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_ProgressLineStyle.Dash">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_ProgressLineStyle.Dot">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_ProgressLineStyle.DashDot">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_ProgressLineStyle.DashDotDot">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Ribbon_ThemeColor.Azure">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Ribbon_ThemeColor.Blue">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Ribbon_ThemeColor.Green">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Ribbon_ThemeColor.Orange">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Ribbon_ThemeColor.Orchid">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Ribbon_ThemeColor.Red">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Ribbon_ThemeColor.Teal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Ribbon_ThemeColor.Violet">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Ribbon_ThemeLightness.DarkGray">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Ribbon_ThemeLightness.LightGray">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Ribbon_ThemeLightness.White">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.CopyCurrentToCustom">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Custom">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Standard">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Office">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.GrayScale">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Apex">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Aspect">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Civic">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Concourse">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Equity">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Flow">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Foundry">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Median">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Metro">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Module">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Opulent">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Oriel">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Origin">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Paper">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Solstice">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Technic">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Trek">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Urban">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Verve">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_GradientStyleEnum.None">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_GradientStyleEnum.Horizontal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_GradientStyleEnum.HorizontalCenter">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_GradientStyleEnum.Vertical">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_GradientStyleEnum.VerticalCenter">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_GradientStyleEnum.Diagonal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_GradientStyleEnum.DiagonalCenter">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_GradientStyleEnum.DiagonalBack">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_GradientStyleEnum.DiagonalBackCenter">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_GradientStyleEnum.Radial">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_GradientStyleEnum.FromCenter">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.None">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Horizontal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Vertical">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.ForwardDiagonal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.BackwardDiagonal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Cross">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.DiagonalCross">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Percent05">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Percent10">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Percent20">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Percent25">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Percent30">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Percent40">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Percent50">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Percent60">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Percent70">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Percent75">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Percent80">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Percent90">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.LightDownwardDiagonal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.LightUpwardDiagonal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.DarkDownwardDiagonal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.DarkUpwardDiagonal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.WideDownwardDiagonal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.WideUpwardDiagonal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.LightVertical">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.LightHorizontal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.NarrowVertical">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.NarrowHorizontal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.DarkVertical">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.DarkHorizontal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.DashedDownwardDiagonal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.DashedUpwardDiagonal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.DashedHorizontal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.DashedVertical">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.SmallConfetti">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.LargeConfetti">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.ZigZag">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Wave">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.DiagonalBrick">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.HorizontalBrick">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Weave">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Plaid">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Divot">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.DottedGrid">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.DottedDiamond">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Shingle">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Trellis">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Sphere">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.SmallGrid">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.SmallCheckerBoard">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.LargeCheckerBoard">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.OutlinedDiamond">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.SolidDiamond">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_AlignImageEnum.Hide">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_AlignImageEnum.Left">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_AlignImageEnum.Right">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_AlignImageEnum.Top">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_AlignImageEnum.Bottom">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_AlignImageEnum.Center">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_AlignImageEnum.Scale">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_AlignImageEnum.Stretch">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_AlignImageEnum.Tile">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_RotationEnum.Rotate0">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_RotationEnum.Rotate90">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_RotationEnum.Rotate180">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_RotationEnum.Rotate270">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_BorderStyleEnum.NotSet">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_BorderStyleEnum.None">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_BorderStyleEnum.Empty">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_BorderStyleEnum.Solid">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_BorderStyleEnum.Raised">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_BorderStyleEnum.Inset">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_BorderStyleEnum.RaisedBevel">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_BorderStyleEnum.InsetBevel">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_BorderStyleEnum.Groove">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_BorderStyleEnum.Fillet">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_BorderStyleEnum.Double">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_BorderStyleEnum.Dashed">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_BorderStyleEnum.Opaque">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.Custom">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.System">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.Office2007Blue">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.Office2007Black">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.Office2007Silver">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.Office2010Blue">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.Office2010Black">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.Office2010Silver">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.Windows7">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.WinXPBlue">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.WinXPSilver">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.WinXPOlive">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.Royale">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.Yahoo">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.Aero">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.Office2003Blue">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.Office2003Olive">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.Office2003Silver">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.OfficeXP">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.Classic">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.WindowsXP">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.IC1ThemeControl.ThemeChanged(System.Object)">
            <summary>
            For internal use.
            </summary>
            <param name="theme"></param>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.ThemeBrushBase">
            <summary>
            Abstract base class for all classes representing a brush in a theme.
            Use the <see cref="M:C1.Win.C1Themes.Shared.ThemeBrushBase.GetBrush(System.Drawing.Rectangle)"/> method to get an actual matching GDI+ brush.
            Classes derived from <see cref="T:C1.Win.C1Themes.Shared.ThemeBrushBase"/> override Equals() and
            GetHashCode() methods and compare objects by content rather than by references.
            </summary>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeBrushBase.EncodeValues(C1.Win.C1Themes.Shared.Utils.ValuesStore)">
            <summary>
            For internal use.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeBrushBase.DecodeValues(C1.Win.C1Themes.Shared.Utils.ValuesStore)">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeBrushBase.AssignFrom(C1.Win.C1Themes.Shared.ThemeBrushBase)">
            <summary>
            Assigns (copies) properties from another <see cref="T:C1.Win.C1Themes.Shared.ThemeBrushBase"/> to the current object.
            </summary>
            <param name="source">The source object to copy properties from.</param>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeBrushBase.Clone">
            <summary>
            Creates an exact copy of this <see cref="T:C1.Win.C1Themes.Shared.ThemeBrushBase"/>.
            </summary>
            <returns>The <see cref="T:C1.Win.C1Themes.Shared.ThemeBrushBase"/> this method creates.</returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeBrushBase.GetBrush(System.Drawing.Rectangle)">
            <summary>
            Returns a GDI+ brush matching the theme brush.
            It is the caller's responsibility to dispose this brush when it is no longer needed.
            </summary>
            <param name="brushRect">The brush rectangle (used for gradient brushes).</param>
            <returns>The GDI+ <see cref="T:System.Drawing.Brush"/> object.</returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeBrushBase.DependOnRect">
            <summary>
            Returns true if a GDI+ brush created for this theme brush depends on the rectangle
            passed to the <see cref="M:C1.Win.C1Themes.Shared.ThemeBrushBase.GetBrush(System.Drawing.Rectangle)"/> method. E.g. gradient brushes return
            true in this method while solid return false.
            </summary>
            <returns>True if the GDI+ brush depends on the application area, false otherwise.</returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeBrushBase.EncodeToString">
            <summary>
            Encodes this <see cref="T:C1.Win.C1Themes.Shared.ThemeBrushBase"/> object to string.
            </summary>
            <returns>String represengin this <see cref="T:C1.Win.C1Themes.Shared.ThemeBrushBase"/> object.</returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeBrushBase.IsBrushesEqual(C1.Win.C1Themes.Shared.ThemeBrushBase,C1.Win.C1Themes.Shared.ThemeBrushBase)">
            <summary>
            Checks whether the two <see cref="T:C1.Win.C1Themes.Shared.ThemeBrushBase"/> objects are equal by value
            (i.e. represent identically described theme brushes).
            </summary>
            <param name="tb1">First <see cref="T:C1.Win.C1Themes.Shared.ThemeBrushBase"/> object.</param>
            <param name="tb2">Second <see cref="T:C1.Win.C1Themes.Shared.ThemeBrushBase"/> object.</param>
            <returns>True if the two brushes are identical, or are both null.</returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeBrushBase.TryDecodeFromString(System.String,C1.Win.C1Themes.Shared.ThemeBrushBase@)">
            <summary>
            Create <see cref="T:C1.Win.C1Themes.Shared.ThemeBrushBase"/> object from specified string.
            </summary>
            <param name="s">String representing <see cref="T:C1.Win.C1Themes.Shared.ThemeBrushBase"/> object.</param>
            <param name="value"><see cref="T:C1.Win.C1Themes.Shared.ThemeBrushBase"/> object created from string.</param>
            <returns>True if string was successfully parsed, false otherwise.</returns>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.ThemeSolidBrush">
            <summary>
            Represents a solid theme brush.
            </summary>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeSolidBrush.EncodeValues(C1.Win.C1Themes.Shared.Utils.ValuesStore)">
            <summary>
            For internal use.
            </summary>
            <param name="store"></param>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeSolidBrush.DecodeValues(C1.Win.C1Themes.Shared.Utils.ValuesStore)">
            <summary>
            For internal use.
            </summary>
            <param name="store"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeSolidBrush.AssignFrom(C1.Win.C1Themes.Shared.ThemeBrushBase)">
            <summary>
            Overridden, assigns (copies) properties from another <see cref="T:C1.Win.C1Themes.Shared.ThemeBrushBase"/> to the current object.
            </summary>
            <param name="source">The source object to copy properties from.</param>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeSolidBrush.GetBrush(System.Drawing.Rectangle)">
            <summary>
            Overridden, creates a GDI+ <see cref="T:System.Drawing.SolidBrush"/> matching this <see cref="T:C1.Win.C1Themes.Shared.ThemeSolidBrush"/> object.
            Can return null if color is not specified or transparent.
            </summary>
            <param name="brushRect">Target application area for the brush (ignored).</param>
            <returns>A <see cref="T:System.Drawing.SolidBrush"/> object.</returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeSolidBrush.DependOnRect">
            <summary>
            For internal use.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeSolidBrush.GetHashCode">
            <summary>
            For internal use.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeSolidBrush.Equals(System.Object)">
            <summary>
            For internal use.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1Themes.Shared.ThemeSolidBrush.Color">
            <summary>
            Gets or sets the color of this solid brush.
            </summary>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.ThemeGradientBrush">
            <summary>
            Abstract base class for gradient theme brushes.
            </summary>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeGradientBrush.DependOnRect">
            <summary>
            For internal use.
            </summary>
            <returns></returns>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.ThemeLinearBrush">
            <summary>
            Abstract base class for linear gradient theme brushes.
            </summary>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeLinearBrush.EncodeValues(C1.Win.C1Themes.Shared.Utils.ValuesStore)">
            <summary>
            For internal use.
            </summary>
            <param name="store"></param>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeLinearBrush.DecodeValues(C1.Win.C1Themes.Shared.Utils.ValuesStore)">
            <summary>
            For internal use.
            </summary>
            <param name="store"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeLinearBrush.AssignFrom(C1.Win.C1Themes.Shared.ThemeBrushBase)">
            <summary>
            Overridden, assigns (copies) properties from another <see cref="T:C1.Win.C1Themes.Shared.ThemeBrushBase"/> to the current object.
            </summary>
            <param name="source">The source object to copy properties from.</param>
        </member>
        <member name="P:C1.Win.C1Themes.Shared.ThemeLinearBrush.GammaCorrection">
            <summary>
            Gets or sets a value indicating whether gamma correction is enabled,
            same as LinearGradientBrush.GammaCorrection.
            </summary>
        </member>
        <member name="P:C1.Win.C1Themes.Shared.ThemeLinearBrush.Angle">
            <summary>
            Gets or sets the angle, measured in degrees clockwise from the x-axis,
            of the gradient's orientation line. 
            </summary>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.ThemeTwoColorLinearBrush">
            <summary>
            Represents a linear gradient brush based on the starting and ending colors,
            and a <see cref="P:C1.Win.C1Themes.Shared.ThemeTwoColorLinearBrush.Blend"/> object.
            </summary>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeTwoColorLinearBrush.EncodeValues(C1.Win.C1Themes.Shared.Utils.ValuesStore)">
            <summary>
            For internal use.
            </summary>
            <param name="store"></param>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeTwoColorLinearBrush.DecodeValues(C1.Win.C1Themes.Shared.Utils.ValuesStore)">
            <summary>
            For internal use.
            </summary>
            <param name="store"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeTwoColorLinearBrush.AssignFrom(C1.Win.C1Themes.Shared.ThemeBrushBase)">
            <summary>
            Overridden, assigns (copies) properties from another <see cref="T:C1.Win.C1Themes.Shared.ThemeBrushBase"/> to the current object.
            </summary>
            <param name="source">The source object to copy properties from.</param>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeTwoColorLinearBrush.GetBrush(System.Drawing.Rectangle)">
            <summary>
            Overridden, creates a <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush"/> matching this <see cref="T:C1.Win.C1Themes.Shared.ThemeTwoColorLinearBrush"/> object.
            </summary>
            <param name="brushRect">The gradient rectangle.</param>
            <returns>A <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush"/> object.</returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeTwoColorLinearBrush.GetHashCode">
            <summary>
            For internal use.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeTwoColorLinearBrush.Equals(System.Object)">
            <summary>
            For internal use.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1Themes.Shared.ThemeTwoColorLinearBrush.StartColor">
            <summary>
            Gets or sets the starting gradient color.
            </summary>
        </member>
        <member name="P:C1.Win.C1Themes.Shared.ThemeTwoColorLinearBrush.EndColor">
            <summary>
            Gets or sets the ending gradient color.
            </summary>
        </member>
        <member name="P:C1.Win.C1Themes.Shared.ThemeTwoColorLinearBrush.Blend">
            <summary>
            Gets or sets the <see cref="P:C1.Win.C1Themes.Shared.ThemeTwoColorLinearBrush.Blend"/> object. Can be null.
            </summary>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.ThemeMultiColorLinearBrush">
            <summary>
            Represents a multicolor linear gradient brush.
            </summary>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeMultiColorLinearBrush.EncodeValues(C1.Win.C1Themes.Shared.Utils.ValuesStore)">
            <summary>
            For internal use.
            </summary>
            <param name="store"></param>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeMultiColorLinearBrush.DecodeValues(C1.Win.C1Themes.Shared.Utils.ValuesStore)">
            <summary>
            For internal use.
            </summary>
            <param name="store"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeMultiColorLinearBrush.AssignFrom(C1.Win.C1Themes.Shared.ThemeBrushBase)">
            <summary>
            Overridden, assigns (copies) properties from another <see cref="T:C1.Win.C1Themes.Shared.ThemeBrushBase"/> to the current object.
            </summary>
            <param name="source">The source object to copy properties from.</param>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeMultiColorLinearBrush.GetBrush(System.Drawing.Rectangle)">
            <summary>
            Overridden, creates a <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush"/> matching this <see cref="T:C1.Win.C1Themes.Shared.ThemeMultiColorLinearBrush"/> object.
            </summary>
            <param name="brushRect">Gradient brush rectangle.</param>
            <returns>A <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush"/> object.</returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeMultiColorLinearBrush.GetHashCode">
            <summary>
            For internal use.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeMultiColorLinearBrush.Equals(System.Object)">
            <summary>
            For internal use.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1Themes.Shared.ThemeMultiColorLinearBrush.InterpolationColors">
            <summary>
            Gets or sets a <see cref="T:System.Drawing.Drawing2D.ColorBlend"/> that defines a multicolor linear gradient.
            </summary>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.ThemeRadialBrush">
            <summary>
            Abstract base class for radial gradient theme brushes.
            </summary>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeRadialBrush.CreateBrush(System.Drawing.Rectangle)">
            <summary>
            For internal use.
            </summary>
            <param name="brushRect"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeRadialBrush.EncodeValues(C1.Win.C1Themes.Shared.Utils.ValuesStore)">
            <summary>
            For internal use.
            </summary>
            <param name="store"></param>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeRadialBrush.DecodeValues(C1.Win.C1Themes.Shared.Utils.ValuesStore)">
            <summary>
            For internal use.
            </summary>
            <param name="store"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeRadialBrush.AssignFrom(C1.Win.C1Themes.Shared.ThemeBrushBase)">
            <summary>
            Overridden, assigns (copies) properties from another <see cref="T:C1.Win.C1Themes.Shared.ThemeBrushBase"/> to the current object.
            </summary>
            <param name="source">The source object to copy properties from.</param>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeRadialBrush.DependOnRect">
            <summary>
            For internal use.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1Themes.Shared.ThemeRadialBrush.Center">
            <summary>
            Gets or sets a <see cref="T:System.Drawing.Point"/> structure that defines position
            of center point.
            (0,0) is the top-left corner, (100,100) is the bottom-right corner.
            </summary>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.ThemeTwoColorRadialBrush">
            <summary>
            Represents a radial gradient brush based on center point,
            surrounding color and a <see cref="P:C1.Win.C1Themes.Shared.ThemeTwoColorRadialBrush.Blend"/> object.
            </summary>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeTwoColorRadialBrush.EncodeValues(C1.Win.C1Themes.Shared.Utils.ValuesStore)">
            <summary>
            For internal use.
            </summary>
            <param name="store"></param>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeTwoColorRadialBrush.DecodeValues(C1.Win.C1Themes.Shared.Utils.ValuesStore)">
            <summary>
            For internal use.
            </summary>
            <param name="store"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeTwoColorRadialBrush.AssignFrom(C1.Win.C1Themes.Shared.ThemeBrushBase)">
            <summary>
            Overridden, assigns (copies) properties from another <see cref="T:C1.Win.C1Themes.Shared.ThemeBrushBase"/> to the current object.
            </summary>
            <param name="source">The source object to copy properties from.</param>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeTwoColorRadialBrush.GetBrush(System.Drawing.Rectangle)">
            <summary>
            Overridden, creates a <see cref="T:System.Drawing.Drawing2D.PathGradientBrush"/> matching this <see cref="T:C1.Win.C1Themes.Shared.ThemeTwoColorRadialBrush"/> object.
            </summary>
            <param name="brushRect">The gradient rectangle.</param>
            <returns>A <see cref="T:System.Drawing.Drawing2D.PathGradientBrush"/> object.</returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeTwoColorRadialBrush.Equals(System.Object)">
            <summary>
            For internal use.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeTwoColorRadialBrush.GetHashCode">
            <summary>
            For internal use.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1Themes.Shared.ThemeTwoColorRadialBrush.CenterColor">
            <summary>
            Gets or sets the color at the center of the radial gradient.
            </summary>
        </member>
        <member name="P:C1.Win.C1Themes.Shared.ThemeTwoColorRadialBrush.SurroundColor">
            <summary>
            Gets or sets the surrounding color of the radial gradient.
            </summary>
        </member>
        <member name="P:C1.Win.C1Themes.Shared.ThemeTwoColorRadialBrush.Blend">
            <summary>
            Gets or sets the <see cref="P:C1.Win.C1Themes.Shared.ThemeTwoColorRadialBrush.Blend"/> object. Can be null.
            </summary>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.ThemeMultiColorRadialBrush">
            <summary>
            Represents a multicolor radial gradient brush.
            </summary>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeMultiColorRadialBrush.EncodeValues(C1.Win.C1Themes.Shared.Utils.ValuesStore)">
            <summary>
            For internal use.
            </summary>
            <param name="store"></param>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeMultiColorRadialBrush.DecodeValues(C1.Win.C1Themes.Shared.Utils.ValuesStore)">
            <summary>
            For internal use.
            </summary>
            <param name="store"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeMultiColorRadialBrush.AssignFrom(C1.Win.C1Themes.Shared.ThemeBrushBase)">
            <summary>
            Overridden, assigns (copies) properties from another <see cref="T:C1.Win.C1Themes.Shared.ThemeBrushBase"/> to the current object.
            </summary>
            <param name="source">The source object to copy properties from.</param>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeMultiColorRadialBrush.GetBrush(System.Drawing.Rectangle)">
            <summary>
            Overridden, creates a <see cref="T:System.Drawing.Drawing2D.PathGradientBrush"/> matching this <see cref="T:C1.Win.C1Themes.Shared.ThemeMultiColorRadialBrush"/> object.
            </summary>
            <param name="brushRect">The gradient rectangle.</param>
            <returns>A <see cref="T:System.Drawing.Drawing2D.PathGradientBrush"/> object.</returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeMultiColorRadialBrush.Equals(System.Object)">
            <summary>
            For internal use.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeMultiColorRadialBrush.GetHashCode">
            <summary>
            For internal use.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1Themes.Shared.ThemeMultiColorRadialBrush.InterpolationColors">
            <summary>
            Gets or sets a <see cref="T:System.Drawing.Drawing2D.ColorBlend"/> that defines this multicolor radiant gradient.
            </summary>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeBrushHelper.CreateThemeBrushNoTransparentOrEmpty(C1.Win.C1Themes.Shared.C1ThemeProxy,System.String,C1.Win.C1Themes.Shared.ThemeBrushBase)">
            <summary>
            Creates brush based on specified theme path.
            Returns defaultValue if brush can not be created or it is solid and color is transparent or empty.
            </summary>
            <param name="themeProxy"></param>
            <param name="path"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1Themes.Shared.ThemeBrushHelper.ForeignBrush">
            <summary>
            Gets or sets a brush object which is stored but not managed by this ThemeBrushHelper -
            i.e. it will not be disposed when this ThemeBrushHelper is disposed, or a new brush is
            assigned to it.
            Note that while the 'get' accessor is provided for this property, there is no need to use it -
            just use the <see cref="M:C1.Win.C1Themes.Shared.ThemeBrushHelper.GetBrush(System.Drawing.Rectangle)"/> method to get a usable GDI+ brush.
            </summary>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.Utils.Utils.IsBlendEqual(System.Drawing.Drawing2D.Blend,System.Drawing.Drawing2D.Blend)">
            <summary>
            For internal use.
            </summary>
            <param name="b1"></param>
            <param name="b2"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.Utils.Utils.IsColorBlendEqual(System.Drawing.Drawing2D.ColorBlend,System.Drawing.Drawing2D.ColorBlend)">
            <summary>
            For internal use.
            </summary>
            <param name="cb1"></param>
            <param name="cb2"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.Utils.Utils.GradientModeToAngle(C1.Win.C1Themes.Shared.GradientMode)">
            <summary>
            For internal use.
            </summary>
            <param name="gradientMode"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.Utils.Utils.AngleToGradientMode(System.Single)">
            <summary>
            For internal use.
            </summary>
            <param name="angle"></param>
            <returns></returns>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.ThemeVersions">
            <summary>
            Versions of c1theme XML.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVersions.c_PlatformVersionPrefix">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVersions.c_InitialFormatVersion">
            <summary>
            First public versions of C1Themes.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVersions.c_NewBackgroundsFormatVersion">
            <summary>
            Version of theme XML when structure of BackgroundProp was changed.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVersions.c_NewRibbonFormatVersion">
            <summary>
            Version of theme XML when structure of C1Ribbon theme was changed
            </summary>
        </member>
        <member name="F:C1.Util.Licensing.AboutForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Util.Licensing.AboutForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Util.Licensing.AboutForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:C1.Util.Licensing.ProviderInfo">
            <summary>
            <para>Provides static <see cref="M:C1.Util.Licensing.ProviderInfo.Validate(System.Type,System.Object)"/> methods that 
            should be called from the constructors of licensed classes.</para>
            <para>Also provides a static <see cref="M:C1.Util.Licensing.ProviderInfo.ShowAboutBox(System.Object)"/> method that can 
            be called to show the about box with product and licensing information.</para>
            </summary>
        </member>
        <member name="M:C1.Util.Licensing.ProviderInfo.Validate(System.Type,System.Object)">
            <summary>
            Perform license validation. Call this method from the licensed object's 
            constructor to save a license key at design time, validate it at runtime, 
            and display a nag dialog if a valid license is not found.
            </summary>
            <param name="type">Type of licensed object (use typeof() and not GetType()).</param>
            <param name="instance">Reference to the licensed object (not currently used).</param>
            <returns>A <see cref="T:C1.Util.Licensing.LicenseInfo"/> object that contains information about the license.</returns>
            <remarks>
            <para>Check the <b>ShouldNag</b> property of the returned <see cref="T:C1.Util.Licensing.LicenseInfo"/> 
            to determine whether the licensed class should nag the user. This value is set
            to true in situations where a valid license was not found but a nag dialog
            could not be displayed. In these cases, the licensed class is supposed to nag
            in some other way (with a watermark for example).</para>
            </remarks>
        </member>
        <member name="M:C1.Util.Licensing.ProviderInfo.Validate(System.Type,System.Object,System.Boolean)">
            <summary>
            Perform license validation. Call this method from the licensed object's 
            constructor to save a license key at design time, validate it at runtime, 
            and display a nag dialog if a valid license is not found.
            </summary>
            <param name="type">Type of licensed object (use typeof() and not GetType()).</param>
            <param name="instance">Reference to the licensed object (not currently used).</param>
            <param name="showNagDialog">Whether the nag dialog should be displayed when a valid license is not found.</param>
            <returns>A <see cref="T:C1.Util.Licensing.LicenseInfo"/> object that contains information about the license.</returns>
            <remarks>
            <para>This overload was created for use in WPF. It should be called in the control's constructor
            in order to support license persistence correctly. But it should not show the nag dialog until the
            control is fully loaded, or the VS designer may remain blank.</para>
            <para>So the solution is this:</para>
            <code>
            LicenseInfo _licInfo;
            public LicensedControl()
            {
              // check license but don't nag yet
              _licInfo = ProviderInfo.Validate(typeof(LicensedControl), this, false);
              
              // perform licensing after control is fully loaded
              Loaded += LicensedControl_Loaded;
            }
            void LicensedControl_Loaded(object sender, RoutedEventArgs e)
            {
              // nag after loading
              if (_licInfo.ShouldNag)
              {
                ProviderInfo.ShowAboutBox(this);
              }
            }
            </code>
            </remarks>
        </member>
        <member name="M:C1.Util.Licensing.ProviderInfo.Nag(System.Type,C1.Util.Licensing.LicenseInfo,System.Boolean)">
            <summary>
            Nag user by showing AboutBox with license information.
            Show it only once per day per assembly.
            </summary>
            <param name="type">Type of licensed object (use typeof() and not GetType()).</param>
            <param name="li"><see cref="T:C1.Util.Licensing.LicenseInfo"/> object that contains information about the license.</param>
            <param name="designTime">Whether we're running at design or run time.</param>
        </member>
        <member name="M:C1.Util.Licensing.ProviderInfo.Validate(System.Type,System.Object,System.Reflection.Assembly,System.String)">
            <summary>
            Version of Validate used by constructors that take runtime keys.
            </summary>
            <param name="type">Type of licensed object (use typeof() and not GetType()).</param>
            <param name="instance">Reference to the licensed object.</param>
            <param name="callingAsm">Assembly that contains the owner licensed control.</param>
            <param name="runtimeKey">Any valid C1 runtime key.</param>
            <returns>A <see cref="T:C1.Util.Licensing.LicenseInfo"/> with information about the runtime key.</returns>
            <remarks>
            <para>This allows a licensed C1 class to create other C1 objects bypassing 
            license verification for the child objects.</para>
            <para>For extra safety, we check that the owner object is defined in an assembly
            the contains a 'C1ProductInfo' attribute.</para>
            </remarks>
        </member>
        <member name="M:C1.Util.Licensing.ProviderInfo.ValidateDesigntime(System.Type,System.ComponentModel.LicenseContext)">
            <summary>
            Design time validation. Looks for a license in the registry and saves it in the
            provided <see cref="T:System.ComponentModel.LicenseContext"/>.
            </summary>
            <param name="type">Type of licensed object (use typeof() and not GetType()).</param>
            <param name="context"><see cref="T:System.ComponentModel.LicenseContext"/> where the runtime key will be stored.</param>
            <returns>A <see cref="T:C1.Util.Licensing.LicenseInfo"/> with information about the license.</returns>
            <remarks>
            Call this method from application-type products (that always require a license to be
            installed in the registry). In this case, the <paramref name="context"/> parameter 
            should be set to null.
            </remarks>
        </member>
        <member name="M:C1.Util.Licensing.ProviderInfo.ValidateRuntime(System.Type,System.ComponentModel.LicenseContext)">
            <summary>
            Runtime validation.
            Looks for a runtime key stored in the current application's resources.
            </summary>
            <param name="type">Type of licensed object (use typeof() and not GetType()).</param>
            <param name="context"><see cref="T:System.ComponentModel.LicenseContext"/> where the runtime key will be stored.</param>
            <returns>A <see cref="T:C1.Util.Licensing.LicenseInfo"/> with information about the license.</returns>
        </member>
        <member name="M:C1.Util.Licensing.ProviderInfo.ShowAboutBox(System.Object)">
            <summary>
            Shows the About Box for an instance of a C1 product.
            </summary>
        </member>
        <member name="M:C1.Util.Licensing.ProviderInfo.GetC1Type(System.Object)">
            <summary>
            Get the type whose assembly contains a 'C1ProductInfoAttribute'.
            </summary>
            <param name="instance">Instance of an object whose type is to be checked.</param>
            <returns>The type whose assembly contains a 'C1ProductInfoAttribute'</returns>
        </member>
        <member name="T:C1.Util.Licensing.LicenseInfo">
            <summary>
            Contains information about a license stored in an application.
            </summary>
        </member>
        <member name="M:C1.Util.Licensing.LicenseInfo.#ctor(System.Type,C1.Util.Licensing.LicenseStatus,C1.Util.Licensing.ProductLicense)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Util.Licensing.LicenseInfo"/> class.
            </summary>
        </member>
        <member name="M:C1.Util.Licensing.LicenseInfo.#ctor(System.Type,C1.Util.Licensing.LicenseStatus)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Util.Licensing.LicenseInfo"/> class.
            </summary>
        </member>
        <member name="P:C1.Util.Licensing.LicenseInfo.LicenseStatus">
            <summary>
            Gets or sets the status of this license (valid, expired, unlicensed).
            </summary>
        </member>
        <member name="P:C1.Util.Licensing.LicenseInfo.License">
            <summary>
            Gets or sets the <see cref="T:C1.Util.Licensing.ProductLicense"/> associated with this license.
            </summary>
        </member>
        <member name="P:C1.Util.Licensing.LicenseInfo.Type">
            <summary>
            Gets or sets the <see cref="P:C1.Util.Licensing.LicenseInfo.Type"/> associated with this license.
            </summary>
        </member>
        <member name="P:C1.Util.Licensing.LicenseInfo.EvaluationDaysElapsed">
            <summary>
            Gets the number of evaluation days elapsed.
            Returns -1 for valid licenses.
            </summary>
        </member>
        <member name="P:C1.Util.Licensing.LicenseInfo.EvaluationDaysLeft">
            <summary>
            Gets the number of evaluation days still left.
            </summary>
        </member>
        <member name="P:C1.Util.Licensing.LicenseInfo.ShouldNag">
            <summary>
            Gets or sets a value that determines whether the caller should
            nag the user. This is the case when the component/control is 
            not licensed, but is not running in interactive mode. So we can't
            show a dialog and the caller is supposed to nag some other way
            (typically by adding watermarks to the UI or output).
            </summary>
        </member>
        <member name="P:C1.Util.Licensing.LicenseInfo.IsValid">
            <summary>
            Gets a value that determines whether the license found is valid.
            </summary>
        </member>
        <member name="P:C1.Util.Licensing.LicenseInfo.IsExpired">
            <summary>
            Gets a value that determines whether the license found is expired.
            </summary>
        </member>
        <member name="P:C1.Util.Licensing.LicenseInfo.IsLocalHost">
            <summary>
            Gets a value that determines whether the component is running under
            localhost and therefore should not nag the user with alert dialogs.
            </summary>
        </member>
        <member name="T:C1.Util.Licensing.SafeLicenseContext">
            <summary>
            
            Provides a version of GetSavedLicenseKey that doesn't require
            special permissions.
            
            The code was mostly copied from the .NET framework, but then changed 
            in a few places to require fewer permissions (assembly name, file io, 
            etc). 
            
            The main change is the use of a custom deserializer to read Hashtable 
            objects instead of the original BinaryFormatter, which requires
            permissions.
            
            </summary>
        </member>
        <member name="T:C1.Util.Licensing.C1AboutNameAttribute">
            <summary>
            Attribute used to specify the product name shown on the About Box.
            </summary>
        </member>
        <member name="T:C1.Util.Licensing.C1ProductInfoAttribute">
            <summary>
            Attribute used to attach licensing/product information to assemblies.
            </summary>
        </member>
        <member name="T:C1.Util.Localization.C1DescriptionAttribute">
            <summary>
            C1DescriptionAttribute replaces the DescriptionAttribute
            and uses the C1Localizer class to return the localized Attribute string
            </summary>
        </member>
        <member name="T:C1.Util.Localization.C1CategoryAttribute">
            <summary>
            C1CategoryAttribute replaces the CategoryAttribute
            and uses the C1Localizer class to return the localized Attribute string
            </summary>
        </member>
        <member name="T:C1.Util.Localization.C1Localizer">
            <summary>
            Localization tables and methods for looking up localized strings.
            </summary>
        </member>
        <member name="T:C1.Util.Licensing.ProductLicense">
            <summary>
            Represents a license for a product (e.g. C1BarCode, C1Studio Enterprise).
            
            Provides methods for:
            - generating new license keys (administrative task)
            - checking license key validity (used by installer and products)
            - generating and checking runtime keys (used by products)
            - installing/uninstalling licenses (used by installer)
            
            The install/uninstall code requires elevated permissions, and is
            used only by setups and utilities (not by controls). The code is 
            implemented in the ProductLicense.Installer.cs, which controls should
            not include since it won't be useful to them.
            
            When a product is sold, we send the user a license KEY. The user installs
            a license on his machine by providing his name, his company name, and the 
            key.
            
            The <see cref="P:C1.Util.Licensing.ProductLicense.Key"/> is a string in the following format:
            
                AAQYYCC-XX-NNNNNN-DD-DZZZZZZ
                
            Where:
            
                AA:     Product code (should match one of the products in the 
                        product catalog (see ProductInformation.GetProductCatalog()).
                Q:      Quarter when the license key was issued (1, 2, or 3)
                YY:     Year when the license key was issued (e.g., 10 for 2010)
                CC:     Order code, two chars that indicate whether this is a 
                        new sale, upgrade, renewal, special offer, etc.
                XX:     Hash code to ensure key validity.
                NNNNNN: Unique serial number.
                DDD:    Vendor code, three chars
                ZZZZZZ: Combination of random numbers for uniqueness and extra hash.
                
            </summary>
        </member>
        <member name="T:C1.Win.C1SuperTooltip.Strings">
            <summary>
            Static class containing UI strings used by the designer.
            </summary>
        </member>
        <member name="T:C1.Util.Localization.StringTables">
            <summary>
            Provide localization for error messages in Japanese.
            </summary>
        </member>
        <member name="T:C1.Win.C1SuperTooltip.C1SuperErrorProvider">
            <summary>
            Provides a user interface for indicating that a control on a form has an error associated with it.
            </summary>
            <remarks>
            <b>C1SuperErrorProvider</b> presents a mechanism for indicating to the end user that a control
            on a form has an error associated with it. If an error description string is specified for
            the control, an icon appears next to the control. The icon flashes in the manner specified
            by <see cref="P:C1.Win.C1SuperTooltip.C1SuperErrorProvider.BlinkStyle"/>, at the rate specified by <see cref="P:C1.Win.C1SuperTooltip.C1SuperErrorProvider.BlinkRate"/>. When the mouse hovers over the icon,
            a <see cref="T:C1.Win.C1SuperTooltip.C1SuperTooltip"/> appears showing the error description as HTML text.
            </remarks>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperErrorProvider.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Win.C1SuperTooltip.C1SuperErrorProvider"/> component.
            </summary>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperErrorProvider.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Win.C1SuperTooltip.C1SuperErrorProvider"/> component.
            </summary>
            <param name="container">The <see cref="T:System.ComponentModel.IContainer"/> to monitor for errors.</param>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperErrorProvider.#ctor(System.Windows.Forms.ContainerControl)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Win.C1SuperTooltip.C1SuperErrorProvider"/> component.
            </summary>
            <param name="parentControl">The container of the control to monitor for errors.</param>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperErrorProvider.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperErrorProvider.ThemeChanged(System.Object)">
            <summary>
            For internal use.
            </summary>
            <param name="newTheme"></param>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperErrorProvider.GetError(System.Windows.Forms.Control)">
            <summary>
            Returns the current error description text for the specified control.
            </summary>
            <param name="control">The item to get the error description text for.</param>
            <returns>The error description text for the specified control.</returns>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperErrorProvider.SetError(System.Windows.Forms.Control,System.String)">
            <summary>
            Sets the error description text for the specified control.
            </summary>
            <param name="control">The control to set the error description text for.</param>
            <param name="value">The error description text.</param>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperErrorProvider.GetIconAlignment(System.Windows.Forms.Control)">
            <summary>
            Gets a value indicating where the error icon should be placed in relation to the control.
            </summary>
            <param name="control">The control to get the icon location for.</param>
            <returns>One of the ErrorIconAlignment values. The default icon alignment is MiddleRight.</returns>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperErrorProvider.SetIconAlignment(System.Windows.Forms.Control,System.Windows.Forms.ErrorIconAlignment)">
            <summary>
            Sets the location where the error icon should be placed in relation to the control.
            </summary>
            <param name="control">The control to set the icon location for.</param>
            <param name="value">One of the ErrorIconAlignment values.</param>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperErrorProvider.GetIconPadding(System.Windows.Forms.Control)">
            <summary>
            Returns the amount of extra space to leave next to the error icon.
            </summary>
            <param name="control">The control to get the padding for.</param>
            <returns>The number of pixels to leave between the icon and the control.</returns>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperErrorProvider.SetIconPadding(System.Windows.Forms.Control,System.Int32)">
            <summary>
            Sets the amount of extra space to leave between the specified control and the error icon.
            </summary>
            <param name="control">The control to set the padding for.</param>
            <param name="padding">The number of pixels to add between the icon and the control.</param>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperErrorProvider.ShouldSerializeIcon">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperErrorProvider.ResetIcon">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperErrorProvider.OnIconClick(C1.Win.C1SuperTooltip.IconClickEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1SuperTooltip.C1SuperErrorProvider.IconClick"/> event.
            </summary>
            <param name="e"><see cref="T:C1.Win.C1SuperTooltip.IconClickEventArgs"/> object that contains the event data.</param>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperErrorProvider.OnIconDoubleClick(C1.Win.C1SuperTooltip.IconClickEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1SuperTooltip.C1SuperErrorProvider.IconDoubleClick"/> event.
            </summary>
            <param name="e"><see cref="T:C1.Win.C1SuperTooltip.IconClickEventArgs"/> object that contains the event data.</param>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperErrorProvider.ShowAboutBox">
            <summary>
            Displays the AboutBox for this component.
            </summary>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperErrorProvider.BindToDataAndErrors(System.Object,System.String)">
            <summary>
            Provides a method to set both the <see cref="P:C1.Win.C1SuperTooltip.C1SuperErrorProvider.DataSource"/> and <see cref="P:C1.Win.C1SuperTooltip.C1SuperErrorProvider.DataMember"/> at run time.
            </summary>
            <param name="newDataSource">A data set based on the IList interface to be monitored for errors. Typically, this is a DataSet to be monitored for errors.</param>
            <param name="newDataMember">A collection within the newDataSource to monitor for errors. Typically, this will be a DataTable.</param>
            <remarks>
            To avoid conflicts at run time that can occur when changing <see cref="P:C1.Win.C1SuperTooltip.C1SuperErrorProvider.DataSource"/> and <see cref="P:C1.Win.C1SuperTooltip.C1SuperErrorProvider.DataMember"/>,
            you should use BindToDataAndErrors instead of setting <see cref="P:C1.Win.C1SuperTooltip.C1SuperErrorProvider.DataSource"/> and <see cref="P:C1.Win.C1SuperTooltip.C1SuperErrorProvider.DataMember"/> individually.
            </remarks>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperErrorProvider.UpdateBinding">
            <summary>
            Provides a method to update the bindings of the <see cref="P:C1.Win.C1SuperTooltip.C1SuperErrorProvider.DataSource"/>, <see cref="P:C1.Win.C1SuperTooltip.C1SuperErrorProvider.DataMember"/>, and the error text.
            </summary>
            <remarks>
            Typically, you call this method after you have called <see cref="M:C1.Win.C1SuperTooltip.C1SuperErrorProvider.BindToDataAndErrors(System.Object,System.String)"/>.
            </remarks>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperErrorProvider.Clear">
            <summary>
            Removes all error glyphs and clears their settings associated with this component.
            </summary>
        </member>
        <member name="P:C1.Win.C1SuperTooltip.C1SuperErrorProvider.Site">
            <summary>
            Gets or sets the ISite of the Component.
            </summary>
        </member>
        <member name="P:C1.Win.C1SuperTooltip.C1SuperErrorProvider.ContainerControl">
            <summary>
            Gets or sets a value indicating the parent control for this <see cref="T:C1.Win.C1SuperTooltip.C1SuperErrorProvider"/>.
            </summary>
        </member>
        <member name="P:C1.Win.C1SuperTooltip.C1SuperErrorProvider.ToolTip">
            <summary>
            Gets or sets the associated <see cref="T:C1.Win.C1SuperTooltip.C1SuperTooltip"/> component displaying the error description text.
            </summary>
        </member>
        <member name="P:C1.Win.C1SuperTooltip.C1SuperErrorProvider.DataSource">
            <summary>
            Gets or sets the data source that the <see cref="T:C1.Win.C1SuperTooltip.C1SuperErrorProvider"/> monitors.
            </summary>
        </member>
        <member name="P:C1.Win.C1SuperTooltip.C1SuperErrorProvider.DataMember">
            <summary>
            Gets or sets the list within a data source to monitor.
            </summary>
        </member>
        <member name="P:C1.Win.C1SuperTooltip.C1SuperErrorProvider.Icon">
            <summary>
            Gets or sets the Icon that is displayed next to a control when an error description text has been set for the control.
            </summary>
            <remarks>
            The Icon property is used if the <see cref="P:C1.Win.C1SuperTooltip.C1SuperErrorProvider.Image"/> property is empty.
            </remarks>
        </member>
        <member name="P:C1.Win.C1SuperTooltip.C1SuperErrorProvider.Image">
            <summary>
            Gets or sets the Image that is displayed next to a control when an error description text has been set for the control.
            </summary>
            <remarks>
            If the Image is not empty it is used instead of the <see cref="P:C1.Win.C1SuperTooltip.C1SuperErrorProvider.Icon"/>.
            </remarks>
        </member>
        <member name="P:C1.Win.C1SuperTooltip.C1SuperErrorProvider.ImageHot">
            <summary>
            Gets or sets the Image that appears next to a control when the mouse hovers over the error icon.
            </summary>
        </member>
        <member name="P:C1.Win.C1SuperTooltip.C1SuperErrorProvider.Antiphased">
            <summary>
            Gets or sets whether the error icon should blink in different phase for various controls.
            </summary>
        </member>
        <member name="P:C1.Win.C1SuperTooltip.C1SuperErrorProvider.BlinkCount">
            <summary>
            Gets or sets the number of icon blinks when a new error text is set for the control.
            </summary>
        </member>
        <member name="P:C1.Win.C1SuperTooltip.C1SuperErrorProvider.BlinkRate">
            <summary>
            Gets or sets the rate, in milliseconds, at which the error icon should flash. The default is 250 milliseconds.
            </summary>
            <remarks>
            The error icon flashes at the specified rate. A value of zero sets <see cref="P:C1.Win.C1SuperTooltip.C1SuperErrorProvider.BlinkStyle"/> to NeverBlink.
            </remarks>
        </member>
        <member name="P:C1.Win.C1SuperTooltip.C1SuperErrorProvider.BlinkStyle">
            <summary>
            Gets or sets a value indicating when the error icon flashes.
            </summary>
        </member>
        <member name="P:C1.Win.C1SuperTooltip.C1SuperErrorProvider.Tag">
            <summary>
            Gets or sets an object that contains data about the component.
            </summary>
        </member>
        <member name="E:C1.Win.C1SuperTooltip.C1SuperErrorProvider.IconClick">
            <summary>
            Occurs when the error icon is clicked by the mouse.
            </summary>
        </member>
        <member name="E:C1.Win.C1SuperTooltip.C1SuperErrorProvider.IconDoubleClick">
            <summary>
            Occurs when the error icon is clicked two or more times.
            </summary>
        </member>
        <member name="T:C1.Win.C1SuperTooltip.IconClickEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:C1.Win.C1SuperTooltip.C1SuperErrorProvider.IconClick"/> event.
            </summary>
            <param name="sender">Object that fired the event.</param>
            <param name="e"><see cref="T:C1.Win.C1SuperTooltip.IconClickEventArgs"/> object that contains the event data.</param>
        </member>
        <member name="T:C1.Win.C1SuperTooltip.IconClickEventArgs">
            <summary>
            Provides data for the <see cref="E:C1.Win.C1SuperTooltip.C1SuperErrorProvider.IconClick"/> event.
            </summary>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.IconClickEventArgs.#ctor(System.Windows.Forms.Control,System.String,System.Windows.Forms.MouseButtons,System.Int32,System.Drawing.Point)">
            <summary>
            Initializes a new instance of an <see cref="T:C1.Win.C1SuperTooltip.IconClickEventArgs"/>.
            </summary>
            <param name="control">Control that has an associated error.</param>
            <param name="error">Error description text.</param>
            <param name="button">Button that was clicked on the icon.</param>
            <param name="clicks">Number of times the mouse button was clicked.</param>
            <param name="location">Location of the mouse in screen coordinates.</param>
        </member>
        <member name="P:C1.Win.C1SuperTooltip.IconClickEventArgs.Control">
            <summary>
            Gets the control that has an associated error.
            </summary>
        </member>
        <member name="P:C1.Win.C1SuperTooltip.IconClickEventArgs.Error">
            <summary>
            Gets the error description text.
            </summary>
        </member>
        <member name="P:C1.Win.C1SuperTooltip.IconClickEventArgs.Button">
            <summary>
            Gets which mouse button was clicked on the icon.
            </summary>
        </member>
        <member name="P:C1.Win.C1SuperTooltip.IconClickEventArgs.Clicks">
            <summary>
            Gets the number of times the mouse button was clicked.
            </summary>
        </member>
        <member name="P:C1.Win.C1SuperTooltip.IconClickEventArgs.Location">
            <summary>
            Gets the location of the mouse (in screen coordinates) during the generating event.
            </summary>
        </member>
        <member name="P:C1.Win.C1SuperTooltip.IconClickEventArgs.X">
            <summary>
            Gets the x-coordinate of the mouse during the generating event.
            </summary>
        </member>
        <member name="P:C1.Win.C1SuperTooltip.IconClickEventArgs.Y">
            <summary>
            Gets the y-coordinate of the mouse during the generating event.
            </summary>
        </member>
    </members>
</doc>
