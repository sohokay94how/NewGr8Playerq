<?xml version="1.0"?>
<doc>
    <assembly>
        <name>C1.Win.C1SpellChecker.4</name>
    </assembly>
    <members>
        <member name="T:C1.Win.Localization.EndUserLocalizeOptionsAttribute">
            <summary>
            Allows to redefine default enduser localize options for
            property, field or class.
            </summary>
        </member>
        <member name="P:C1.Win.Localization.EndUserLocalizeOptionsAttribute.Properties">
            <summary>
            Defines the list of properties that should be localized.
            </summary>
        </member>
        <member name="P:C1.Win.Localization.EndUserLocalizeOptionsAttribute.ExcludedMembers">
            <summary>
            Defines a list of members of control that should be excluded from localization.
            Currently used only AddControlToResources application for automatically generating
            control resources.
            </summary>
        </member>
        <member name="P:C1.Win.Localization.EndUserLocalizeOptionsAttribute.Exclude">
            <summary>
            If true then class, property or field will be not displayed for 
            enduser localization.
            </summary>
        </member>
        <member name="P:C1.Win.Localization.EndUserLocalizeOptionsAttribute.Description">
            <summary>
            Gets the description of string that will be displayed in the
            end user localizer in design-time.
            </summary>
        </member>
        <member name="P:C1.Win.Localization.EndUserLocalizeOptionsAttribute.StringsType">
            <summary>
            Gets or sets type providing string used to localize <see cref="P:C1.Win.Localization.EndUserLocalizeOptionsAttribute.Description"/>.
            </summary>
        </member>
        <member name="P:C1.Win.Localization.EndUserLocalizeOptionsAttribute.Key">
            <summary>
            Gets or sets resource key containing localized string for <see cref="P:C1.Win.Localization.EndUserLocalizeOptionsAttribute.Description"/>.
            </summary>
        </member>
        <member name="T:C1.Win.Localization.C1DescriptionAttribute">
            <summary>
            C1DescriptionAttribute replaces the DescriptionAttribute
            and uses the StringsManager and Strings classes to
            return the localized Attribute string.
            </summary>
        </member>
        <member name="T:C1.Win.Localization.C1CategoryAttribute">
            <summary>
            C1CategoryAttribute replaces the CategoryAttribute
            and uses the StringsManager and Strings classes to
            return the localized Attribute string.
            </summary>
        </member>
        <member name="M:C1.Win.Localization.StringsManager.GetC1BuiltinResourceStream(System.String,System.Reflection.Assembly,System.String)">
            <summary>
            Returns ResourceStream for "official" resources
            that provided only by C1, typicallly those resources contains
            design-time strings.
            Those resources can be only in main control assembly like C1.C1Preview.2.dll 
            and name of resource should have following format:
            CulturePrefix.StringsTypeName
            for example:
            ja.C1.C1Preview.Design.DesignStrings.resx
            </summary>
            <param name="resourceName"></param>
            <param name="assembly"></param>
            <param name="cultureName"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.Localization.StringsManager.GetParentCulture(System.String)">
            <summary>
            Returns the parent of the CultureInfo passed in. Differs from ci.Parent
            in that while ci can be equal to ci.Parent, this method it never returns
            the passed ci itself, rather it would return null.
            Also this function has special handling for chinese culture.
            Under NET2 it returns "zh" culture name for
            neutral "zh-Hans" and "zh-Hant" chinese cultures, under
            NET2 "zh" is not exists.
            </summary>
            <param name="cultureName">The culture name to get parent for.</param>
            <returns>The parent of the culture info, or null.</returns>
        </member>
        <member name="F:C1.Util.Licensing.AboutForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Util.Licensing.AboutForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Util.Licensing.AboutForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:C1.Util.Licensing.ProviderInfo">
            <summary>
            <para>Provides static <see cref="M:C1.Util.Licensing.ProviderInfo.Validate(System.Type,System.Object)"/> methods that 
            should be called from the constructors of licensed classes.</para>
            <para>Also provides a static <see cref="M:C1.Util.Licensing.ProviderInfo.ShowAboutBox(System.Object)"/> method that can 
            be called to show the about box with product and licensing information.</para>
            </summary>
        </member>
        <member name="M:C1.Util.Licensing.ProviderInfo.Validate(System.Type,System.Object)">
            <summary>
            Perform license validation. Call this method from the licensed object's 
            constructor to save a license key at design time, validate it at runtime, 
            and display a nag dialog if a valid license is not found.
            </summary>
            <param name="type">Type of licensed object (use typeof() and not GetType()).</param>
            <param name="instance">Reference to the licensed object (not currently used).</param>
            <returns>A <see cref="T:C1.Util.Licensing.LicenseInfo"/> object that contains information about the license.</returns>
            <remarks>
            <para>Check the <b>ShouldNag</b> property of the returned <see cref="T:C1.Util.Licensing.LicenseInfo"/> 
            to determine whether the licensed class should nag the user. This value is set
            to true in situations where a valid license was not found but a nag dialog
            could not be displayed. In these cases, the licensed class is supposed to nag
            in some other way (with a watermark for example).</para>
            </remarks>
        </member>
        <member name="M:C1.Util.Licensing.ProviderInfo.Validate(System.Type,System.Object,System.Boolean)">
            <summary>
            Perform license validation. Call this method from the licensed object's 
            constructor to save a license key at design time, validate it at runtime, 
            and display a nag dialog if a valid license is not found.
            </summary>
            <param name="type">Type of licensed object (use typeof() and not GetType()).</param>
            <param name="instance">Reference to the licensed object (not currently used).</param>
            <param name="showNagDialog">Whether the nag dialog should be displayed when a valid license is not found.</param>
            <returns>A <see cref="T:C1.Util.Licensing.LicenseInfo"/> object that contains information about the license.</returns>
            <remarks>
            <para>This overload was created for use in WPF. It should be called in the control's constructor
            in order to support license persistence correctly. But it should not show the nag dialog until the
            control is fully loaded, or the VS designer may remain blank.</para>
            <para>So the solution is this:</para>
            <code>
            LicenseInfo _licInfo;
            public LicensedControl()
            {
              // check license but don't nag yet
              _licInfo = ProviderInfo.Validate(typeof(LicensedControl), this, false);
              
              // perform licensing after control is fully loaded
              Loaded += LicensedControl_Loaded;
            }
            void LicensedControl_Loaded(object sender, RoutedEventArgs e)
            {
              // nag after loading
              if (_licInfo.ShouldNag)
              {
                ProviderInfo.ShowAboutBox(this);
              }
            }
            </code>
            </remarks>
        </member>
        <member name="M:C1.Util.Licensing.ProviderInfo.Nag(System.Type,C1.Util.Licensing.LicenseInfo,System.Boolean)">
            <summary>
            Nag user by showing AboutBox with license information.
            Show it only once per day per assembly.
            </summary>
            <param name="type">Type of licensed object (use typeof() and not GetType()).</param>
            <param name="li"><see cref="T:C1.Util.Licensing.LicenseInfo"/> object that contains information about the license.</param>
            <param name="designTime">Whether we're running at design or run time.</param>
        </member>
        <member name="M:C1.Util.Licensing.ProviderInfo.Validate(System.Type,System.Object,System.Reflection.Assembly,System.String)">
            <summary>
            Version of Validate used by constructors that take runtime keys.
            </summary>
            <param name="type">Type of licensed object (use typeof() and not GetType()).</param>
            <param name="instance">Reference to the licensed object.</param>
            <param name="callingAsm">Assembly that contains the owner licensed control.</param>
            <param name="runtimeKey">Any valid C1 runtime key.</param>
            <returns>A <see cref="T:C1.Util.Licensing.LicenseInfo"/> with information about the runtime key.</returns>
            <remarks>
            <para>This allows a licensed C1 class to create other C1 objects bypassing 
            license verification for the child objects.</para>
            <para>For extra safety, we check that the owner object is defined in an assembly
            the contains a 'C1ProductInfo' attribute.</para>
            </remarks>
        </member>
        <member name="M:C1.Util.Licensing.ProviderInfo.ValidateDesigntime(System.Type,System.ComponentModel.LicenseContext)">
            <summary>
            Design time validation. Looks for a license in the registry and saves it in the
            provided <see cref="T:System.ComponentModel.LicenseContext"/>.
            </summary>
            <param name="type">Type of licensed object (use typeof() and not GetType()).</param>
            <param name="context"><see cref="T:System.ComponentModel.LicenseContext"/> where the runtime key will be stored.</param>
            <returns>A <see cref="T:C1.Util.Licensing.LicenseInfo"/> with information about the license.</returns>
            <remarks>
            Call this method from application-type products (that always require a license to be
            installed in the registry). In this case, the <paramref name="context"/> parameter 
            should be set to null.
            </remarks>
        </member>
        <member name="M:C1.Util.Licensing.ProviderInfo.ValidateRuntime(System.Type,System.ComponentModel.LicenseContext)">
            <summary>
            Runtime validation.
            Looks for a runtime key stored in the current application's resources.
            </summary>
            <param name="type">Type of licensed object (use typeof() and not GetType()).</param>
            <param name="context"><see cref="T:System.ComponentModel.LicenseContext"/> where the runtime key will be stored.</param>
            <returns>A <see cref="T:C1.Util.Licensing.LicenseInfo"/> with information about the license.</returns>
        </member>
        <member name="M:C1.Util.Licensing.ProviderInfo.ShowAboutBox(System.Object)">
            <summary>
            Shows the About Box for an instance of a C1 product.
            </summary>
        </member>
        <member name="M:C1.Util.Licensing.ProviderInfo.GetC1Type(System.Object)">
            <summary>
            Get the type whose assembly contains a 'C1ProductInfoAttribute'.
            </summary>
            <param name="instance">Instance of an object whose type is to be checked.</param>
            <returns>The type whose assembly contains a 'C1ProductInfoAttribute'</returns>
        </member>
        <member name="T:C1.Util.Licensing.LicenseInfo">
            <summary>
            Contains information about a license stored in an application.
            </summary>
        </member>
        <member name="M:C1.Util.Licensing.LicenseInfo.#ctor(System.Type,C1.Util.Licensing.LicenseStatus,C1.Util.Licensing.ProductLicense)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Util.Licensing.LicenseInfo"/> class.
            </summary>
        </member>
        <member name="M:C1.Util.Licensing.LicenseInfo.#ctor(System.Type,C1.Util.Licensing.LicenseStatus)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Util.Licensing.LicenseInfo"/> class.
            </summary>
        </member>
        <member name="P:C1.Util.Licensing.LicenseInfo.LicenseStatus">
            <summary>
            Gets or sets the status of this license (valid, expired, unlicensed).
            </summary>
        </member>
        <member name="P:C1.Util.Licensing.LicenseInfo.License">
            <summary>
            Gets or sets the <see cref="T:C1.Util.Licensing.ProductLicense"/> associated with this license.
            </summary>
        </member>
        <member name="P:C1.Util.Licensing.LicenseInfo.Type">
            <summary>
            Gets or sets the <see cref="P:C1.Util.Licensing.LicenseInfo.Type"/> associated with this license.
            </summary>
        </member>
        <member name="P:C1.Util.Licensing.LicenseInfo.EvaluationDaysElapsed">
            <summary>
            Gets the number of evaluation days elapsed.
            Returns -1 for valid licenses.
            </summary>
        </member>
        <member name="P:C1.Util.Licensing.LicenseInfo.EvaluationDaysLeft">
            <summary>
            Gets the number of evaluation days still left.
            </summary>
        </member>
        <member name="P:C1.Util.Licensing.LicenseInfo.ShouldNag">
            <summary>
            Gets or sets a value that determines whether the caller should
            nag the user. This is the case when the component/control is 
            not licensed, but is not running in interactive mode. So we can't
            show a dialog and the caller is supposed to nag some other way
            (typically by adding watermarks to the UI or output).
            </summary>
        </member>
        <member name="P:C1.Util.Licensing.LicenseInfo.IsValid">
            <summary>
            Gets a value that determines whether the license found is valid.
            </summary>
        </member>
        <member name="P:C1.Util.Licensing.LicenseInfo.IsExpired">
            <summary>
            Gets a value that determines whether the license found is expired.
            </summary>
        </member>
        <member name="P:C1.Util.Licensing.LicenseInfo.IsLocalHost">
            <summary>
            Gets a value that determines whether the component is running under
            localhost and therefore should not nag the user with alert dialogs.
            </summary>
        </member>
        <member name="T:C1.Util.Licensing.SafeLicenseContext">
            <summary>
            
            Provides a version of GetSavedLicenseKey that doesn't require
            special permissions.
            
            The code was mostly copied from the .NET framework, but then changed 
            in a few places to require fewer permissions (assembly name, file io, 
            etc). 
            
            The main change is the use of a custom deserializer to read Hashtable 
            objects instead of the original BinaryFormatter, which requires
            permissions.
            
            </summary>
        </member>
        <member name="T:C1.Util.Licensing.C1AboutNameAttribute">
            <summary>
            Attribute used to specify the product name shown on the About Box.
            </summary>
        </member>
        <member name="T:C1.Util.Licensing.C1ProductInfoAttribute">
            <summary>
            Attribute used to attach licensing/product information to assemblies.
            </summary>
        </member>
        <member name="T:C1.Util.Localization.C1DescriptionAttribute">
            <summary>
            C1DescriptionAttribute replaces the DescriptionAttribute
            and uses the C1Localizer class to return the localized Attribute string
            </summary>
        </member>
        <member name="T:C1.Util.Localization.C1CategoryAttribute">
            <summary>
            C1CategoryAttribute replaces the CategoryAttribute
            and uses the C1Localizer class to return the localized Attribute string
            </summary>
        </member>
        <member name="T:C1.Util.Localization.C1Localizer">
            <summary>
            Localization tables and methods for looking up localized strings.
            </summary>
        </member>
        <member name="T:C1.Util.Licensing.ProductLicense">
            <summary>
            Represents a license for a product (e.g. C1BarCode, C1Studio Enterprise).
            
            Provides methods for:
            - generating new license keys (administrative task)
            - checking license key validity (used by installer and products)
            - generating and checking runtime keys (used by products)
            - installing/uninstalling licenses (used by installer)
            
            The install/uninstall code requires elevated permissions, and is
            used only by setups and utilities (not by controls). The code is 
            implemented in the ProductLicense.Installer.cs, which controls should
            not include since it won't be useful to them.
            
            When a product is sold, we send the user a license KEY. The user installs
            a license on his machine by providing his name, his company name, and the 
            key.
            
            The <see cref="P:C1.Util.Licensing.ProductLicense.Key"/> is a string in the following format:
            
                AAQYYCC-XX-NNNNNN-DD-DZZZZZZ
                
            Where:
            
                AA:     Product code (should match one of the products in the 
                        product catalog (see ProductInformation.GetProductCatalog()).
                Q:      Quarter when the license key was issued (1, 2, or 3)
                YY:     Year when the license key was issued (e.g., 10 for 2010)
                CC:     Order code, two chars that indicate whether this is a 
                        new sale, upgrade, renewal, special offer, etc.
                XX:     Hash code to ensure key validity.
                NNNNNN: Unique serial number.
                DDD:    Vendor code, three chars
                ZZZZZZ: Combination of random numbers for uniqueness and extra hash.
                
            </summary>
        </member>
        <member name="T:C1.C1Zip.C1CryptStream">
            <summary>
            C1CryptStream
            reads and decrypts data from an encrypted zip base stream, or
            encrypts and writes data to an encrypted zip base stream
            </summary>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntry.CheckCRC32">
            <summary>
            Calculates a checksum value for the entry and compares it to the checksum that
            was stored when the entry was created.
            </summary>
            <returns>True if the checksum values match, false otherwise.</returns>
            <remarks>
            This method is used to check the integrity of the entries in the zip file. If the
            calculated checksum does not match the stored checksum, then either the zip file is
            corrupted or the program used to create the zip file is incompatible with 
            <b>C1Zip</b>.
            </remarks>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntry.CheckPassword">
            <summary>
            Checks whether this <see cref="T:C1.C1Zip.C1ZipEntry"/> can be read with the currently set password.
            </summary>
            <returns>True if the entry can be read with the current password, or if the entry is not
            encrypted.</returns>
            <remarks>
            This method is more efficient than using a try/catch block and trying to open the entry
            to determine whether the current password is valid for the entry.
            </remarks>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntry.OpenReader">
            <summary>
            Returns a <see cref="T:System.IO.Stream"/> that can be used to read the content of the entry without
            extracting it to a disk file.
            </summary>
            <returns>A <see cref="T:System.IO.Stream"/> that can be used to read the data in the entry.</returns>
            <remarks>
            The <see cref="T:System.IO.Stream"/> returned is a <see cref="T:C1.C1Zip.C1ZStreamReader"/>, which 
            decompresses the data as it is read from the entry.
            </remarks>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntry.Extract(System.String)">
            <summary>
            Extracts this entry to a file.
            </summary>
            <param name="destFileName">Name and location of the extracted file.</param>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntry.Remove">
            <summary>
            Removes this entry from the zip file.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZipEntry.FileName">
            <summary>
            Gets the entry name. This is usually a file name, optionally including a path.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZipEntry.SizeUncompressed">
            <summary>
            Gets the original (uncompressed) size of the entry, in bytes.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZipEntry.SizeCompressed">
            <summary>
            Gets the compressed size of the entry, in bytes.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZipEntry.SizeUncompressedLong">
            <summary>
            Gets the original (uncompressed) size of the entry, in bytes, as a long integer.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZipEntry.SizeCompressedLong">
            <summary>
            Gets the compressed size of the entry, in bytes, as a long integer.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZipEntry.CRC32">
            <summary>
            Gets the checksum calculated when the entry was compressed.
            </summary>
            <remarks>
            This value can be used to check the integrity of the entry when it is decompressed.
            </remarks>
        </member>
        <member name="P:C1.C1Zip.C1ZipEntry.Date">
            <summary>
            Gets the date and time when the file used to create the entry was last modified.
            </summary>
            <remarks>
            This value can be used to check whether an entry needs to be updated because the
            source file was modified since it was last compressed.
            </remarks>
        </member>
        <member name="P:C1.C1Zip.C1ZipEntry.Comment">
            <summary>
            Gets or sets a comment associated with the entry.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZipEntry.Attributes">
            <summary>
            Gets the file attributes associated with the entry.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZipEntry.IsEncrypted">
            <summary>
            Gets a value that determines whether the entry is encrypted.
            </summary>
            <remarks>
            Encrypted entries can only be extracted if the <see cref="P:C1.C1Zip.C1ZipFile.Password"/> property
            on the containing <see cref="T:C1.C1Zip.C1ZipFile"/> object is set to the password that was used
            when the file was added to the zip file.
            </remarks>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntryCollection.Contains(System.String)">
            <summary>
            Determines whether the collection contains an entry with a given name.
            </summary>
            <param name="name">Name of the entry to look for.</param>
            <returns>True if the collection contains an entry with the given name, false otherwise.</returns>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntryCollection.Contains(C1.C1Zip.C1ZipEntry)">
            <summary>
            Determines whether the collection contains an entry.
            </summary>
            <param name="entry">Entry of the entry to look for.</param>
            <returns>True if the collection contains the entry, false otherwise.</returns>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntryCollection.IndexOf(System.String)">
            <summary>
            Gets the index of the entry with the specified name.
            </summary>
            <param name="name">Name of the entry to look for.</param>
            <returns>The index of the entry in the collection, or -1 if the entry was not found.</returns>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntryCollection.IndexOf(C1.C1Zip.C1ZipEntry)">
            <summary>
            Gets the index of an entry in the collection.
            </summary>
            <param name="entry"><see cref="T:C1.C1Zip.C1ZipEntry"/> to look for.</param>
            <returns>The index of the entry in the collection, or -1 if the entry was not found.</returns>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntryCollection.Add(System.String)">
            <summary>
            Adds an entry to the current zip file.
            </summary>
            <param name="fileName">Name of the file to add to the zip file.</param>
            <remarks>
            By default, the directory name is not stored in the zip file. To store a specific
            part of the directory name in the zip file, use the overloaded version of the 
            <b>Add</b> method with a <b>pathLevels</b> parameter.
            </remarks>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntryCollection.Add(System.String[])">
            <summary>
            Adds a list of entries to the current zip file.
            </summary>
            <param name="fileNames">Array containing the file names of the entries to be added to the zip file.</param>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntryCollection.Add(System.String,System.Int32)">
            <summary>
            Adds an entry to the current zip file.
            </summary>
            <param name="fileName">Name of the file to add to the zip file.</param>
            <param name="pathLevels">The number of path levels to be stored as the entry name.</param>
            <remarks>
            <para>By default, path names are not stored in the zip file. For example, adding
            the file "c:\temp\samples\readme.txt" to the zip file will create an entry called
            "readme.txt".</para>
            <para>The <paramref name="pathLevels"/> parameter allows you to store one or more levels of the path in the entry name.
            For example, adding the file "c:\temp\samples\readme.txt" to the zip file with <paramref name="pathLevels"/>=1 
            will create an entry called "samples\readme.txt".</para>
            </remarks>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntryCollection.Add(System.String,System.String)">
            <summary>
            Adds an entry to the current zip file.
            </summary>
            <param name="fileName">Name of the file to add to the zip file.</param>
            <param name="entryName">Name of the new entry as stored in the zip file.</param>
            <remarks>
            By default, entries in the zip file have the same name as the original (uncompressed)
            file. This method allows you to specify a different name, including a path for example.
            </remarks>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntryCollection.Add(System.String,System.String,System.DateTime)">
            <summary>
            Adds an entry to the current zip file.
            </summary>
            <param name="fileName">Name of the file to add to the zip file.</param>
            <param name="entryName">Name of the new entry as stored in the zip file.</param>
            <param name="dateTime">The date and time when the file was last modified.</param>
            <remarks>
            By default, entries in the zip file have the same name as the original (uncompressed)
            file. This method allows you to specify a different name, including a path for example.
            </remarks>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntryCollection.Add(System.IO.Stream,System.String)">
            <summary>
            Adds a stream to the current zip file.
            </summary>
            <param name="stream">Stream that contains data for the new entry.</param>
            <param name="entryName">Name to be used for the new entry.</param>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntryCollection.Add(System.IO.Stream,System.String,System.DateTime)">
            <summary>
            Adds a stream to the current zip file.
            </summary>
            <param name="stream">Stream that contains data for the new entry.</param>
            <param name="entryName">Name to be used for the new entry.</param>
            <param name="dateTime">The date and time when the file was last modified.</param>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntryCollection.AddFolder(System.String)">
            <summary>
            Adds the content of a folder to the current zip file.
            </summary>
            <param name="path">The full path of the folder to be added to the zip file.</param>
            <remarks>
            This method adds all files and sub folders to the zip file.
            </remarks>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntryCollection.AddFolder(System.String,System.String)">
            <summary>
            Adds the content of a folder to the current zip file.
            </summary>
            <param name="path">The full path of the folder to be added to the zip file.</param>
            <param name="searchPattern">A mask that specifies which files to add.</param>
            <remarks>
            If the folder contains sub folders, those are also added to the zip file.
            </remarks>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntryCollection.AddFolder(System.String,System.String,System.Boolean)">
            <summary>
            Adds the content of a folder to the current zip file.
            </summary>
            <param name="path">The full path of the folder to be added to the zip file.</param>
            <param name="searchPattern">A mask that specifies which files to add.</param>
            <param name="includeSubfolders">True to include sub folders, false to include only files at the root level.</param>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntryCollection.ExtractFolder(System.String)">
            <summary>
            Extracts the contents of the zip file into a specified path.
            </summary>
            <param name="path">Destination path for the unzipped files.</param>
            <remarks>
            If the zip file contains compressed folders, new folders will be created
            under the destination path to preserve the hierarchical structure of the
            archive.
            </remarks>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntryCollection.Remove(System.Int32)">
            <summary>
            Removes an entry from the current zip file.
            </summary>
            <param name="index">Index of the entry to remove.</param>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntryCollection.Remove(System.String)">
            <summary>
            Removes an entry from the current zip file.
            </summary>
            <param name="fileName">Name of the entry to remove (case-insensitive).</param>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntryCollection.Remove(System.Int32[])">
            <summary>
            Removes several entries from the current zip file.
            </summary>
            <param name="indices">Array containing the indices of the entries to remove.</param>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntryCollection.Remove(System.String[])">
            <summary>
            Removes several entries from the current zip file.
            </summary>
            <param name="entryNames">Array containing the names of the entries to remove.</param>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntryCollection.Extract(System.Int32,System.String)">
            <summary>
            Extracts a file from the current zip file. 
            </summary>
            <param name="index">Index of the entry to extract.</param>
            <param name="destFileName">Name and location of the extracted file.</param>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntryCollection.Extract(System.String,System.String)">
            <summary>
            Extracts a file from the current zip file. 
            </summary>
            <param name="entryName">Name of the entry to extract.</param>
            <param name="destFileName">Name and location of the extracted file.</param>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntryCollection.Extract(System.Int32)">
            <summary>
            Extracts a file from the current zip file. 
            </summary>
            <param name="index">Index of the entry to extract.</param>
            <remarks>
            The entry is extracted to a file in the same folder as the current zip
            file, with the same name as the entry.
            </remarks>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntryCollection.Extract(System.String)">
            <summary>
            Extracts a file from the current zip file. 
            </summary>
            <param name="entryName">Name of the entry to extract.</param>
            <remarks>
            The entry is extracted to a file in the same folder as the current zip
            file, with the same name as the entry.
            </remarks>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntryCollection.OpenWriter(System.String,System.Boolean)">
            <summary>
            Opens a stream for writing an entry into the zip file.
            </summary>
            <param name="entryName">The name of the new entry.</param>
            <param name="useMemory">Whether to use a memory stream or temporary file.</param>
            <returns>
            A stream that can be used to write data into the zip file. The entry
            is not added until the stream is closed.
            </returns>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntryCollection.OpenWriter(System.String,System.DateTime,System.Boolean)">
            <summary>
            Opens a stream for writing an entry into the zip file.
            </summary>
            <param name="entryName">The name of the new entry.</param>
            <param name="dateTime">The date and time when the file was last modified.</param>
            <param name="useMemory">Whether to use a memory stream or temporary file.</param>
            <returns>
            A stream that can be used to write data into the zip file. The entry
            is not added until the stream is closed.
            </returns>
        </member>
        <member name="P:C1.C1Zip.C1ZipEntryCollection.Count">
            <summary>
            Gets the number of entries in the current zip file.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZipEntryCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:C1.C1Zip.C1ZipEntry"/> at the specified index.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZipEntryCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:C1.C1Zip.C1ZipEntry"/> with the given name (returns null if the entry cannot be found).
            </summary>
        </member>
        <member name="M:C1.C1Zip.C1ZipFile.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Zip.C1ZipFile"/> class.
            </summary>
        </member>
        <member name="M:C1.C1Zip.C1ZipFile.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Zip.C1ZipFile"/> class and creates or opens
            a zip file associated with this new instance.
            </summary>
            <param name="fileName">The name of the zip file to open or create.</param>
            <param name="create">True to create a new zip file, false to open an existing file.</param>
            <remarks>
            <para>If <paramref name="create"/> is true and the zip file already exists, it is overwritten
            with a new empty file.</para>
            <para>If <paramref name="create"/> is false and the zip file already exists, the existing file 
            is opened.</para>
            </remarks>
        </member>
        <member name="M:C1.C1Zip.C1ZipFile.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Zip.C1ZipFile"/> class and opens a zip file associated 
            with this new instance.
            </summary>
            <param name="fileName">The name of the zip file to open.</param>
            <remarks>
            If the file does not exist, a new empty file is created.
            </remarks>
        </member>
        <member name="M:C1.C1Zip.C1ZipFile.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Zip.C1ZipFile"/> class and opens a zip stream associated 
            with this new instance.
            </summary>
            <param name="stream"><see cref="T:System.IO.Stream"/> that contains the zip data.</param>
            <param name="create">Whether to initialize the stream with an empty zip header or open an existing
            zip file in the stream.</param>
        </member>
        <member name="M:C1.C1Zip.C1ZipFile.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Zip.C1ZipFile"/> class and opens a zip stream associated 
            with this new instance.
            </summary>
            <param name="stream"><see cref="T:System.IO.Stream"/> that contains the zip data.</param>
        </member>
        <member name="M:C1.C1Zip.C1ZipFile.Open(System.String)">
            <summary>
            Opens an existing zip file.
            </summary>
            <param name="fileName">The name of an existing zip file, including the path.</param>
            <remarks>
            <para>This method checks that the zip file exists and is a valid zip file, then
            reads the zip file directory into the <see cref="P:C1.C1Zip.C1ZipFile.Entries"/> collection.
            The zip file is then closed, and can be used by other applications. There is no
            need to close the zip file explicitly.</para>
            </remarks>
        </member>
        <member name="M:C1.C1Zip.C1ZipFile.Create(System.String)">
            <summary>
            Creates an empty zip file on disk.
            </summary>
            <param name="fileName">The name of the zip file to create, including the path.</param>
            <remarks>
            If a file by the same name already exists, it is deleted before the new one
            is created.
            </remarks>
        </member>
        <member name="M:C1.C1Zip.C1ZipFile.Open(System.IO.Stream)">
            <summary>
            Opens an existing zip file stored in a stream.
            </summary>
            <param name="stream"><see cref="T:System.IO.Stream"/> that contains a zip file.</param>
            <remarks>
            <para>This method allows you to open and work with a zip file stored in a stream
            instead of in an actual file.</para>
            <para>Typical usage scenarios for this are zip files stored as application resources 
            or in binary database fields.</para>
            </remarks>
            <example>
            <para>The example below loads information from a zip file stored in an embedded resource. 
            To embed a zip file in an application, follow these steps:</para>
            <para>1) Right-click the project node in Visual Studio, select the <b>Add | Add Existing Item...</b> menu option.</para>
            <para>2) Select a zip file to add to the project as an embedded resource.</para>
            <para>3) Select the newly added file and make sure the <b>Build Action</b> property is set to "Embedded Resource".</para>
            <code>
            // get Stream from application resources
            System.Reflection.Assembly a = this.GetType().Assembly;
            using (Stream stream = a.GetManifestResourceStream("MyApp.test.zip"))
            {
              // open C1ZipFile on the stream
              zip.Open(stream);
            
              // enumerate the entries in the zip file,
              foreach (C1ZipEntry ze in zip.Entries)
              {
                // show entries that have a 'txt' extension.
                if (ze.FileName.ToLower().EndsWith(".txt"))
                {
                  using (var sr = new StreamReader(ze.OpenReader()))
                  {
                    MessageBox.Show(sr.ReadToEnd(), ze.FileName);
                  }
                }
              }
            }
            </code>
            </example>
        </member>
        <member name="M:C1.C1Zip.C1ZipFile.Create(System.IO.Stream)">
            <summary>
            Creates a new zip file in a stream.
            </summary>
            <param name="stream"><see cref="T:System.IO.Stream"/> that will contain the new zip file.</param>
            <example>
            The code below creates a new <see cref="T:C1.C1Zip.C1ZipFile"/> on a memory stream, then adds
            several files to it. Finally, the code gets the zipped data out as an array of bytes,
            which could be stored in a database for example.
            <code>
            // create zip on a stream
            MemoryStream msZip = new MemoryStream();
            C1ZipFile zip = new C1ZipFile(msZip, true);
            
            // add some entries to it
            foreach (string f in Directory.GetFiles(@"c:\WINDOWS\Web\Wallpaper"))
            {
              zip.Entries.Add(f);
            }
            
            // get zipped data out as a byte array
            byte[] zipData = msZip.ToArray();
            </code>
            </example>
        </member>
        <member name="M:C1.C1Zip.C1ZipFile.Close">
            <summary>
            Resets all data members of the <see cref="T:C1.C1Zip.C1ZipFile"/> object.
            </summary>
            <remarks>
            Disk files are automatically closed by <b>C1Zip</b>. You only need to use this
            method if you want to break the connection between a <see cref="T:C1.C1Zip.C1ZipFile"/> class 
            and a physical zip file.
            </remarks>
        </member>
        <member name="M:C1.C1Zip.C1ZipFile.Refresh">
            <summary>
            Refreshes all data members by re-opening the current zip file.
            </summary>
            <remarks>
            This method is useful in instances where other applications may have changed
            the zip file and you want to make sure the information in the <see cref="P:C1.C1Zip.C1ZipFile.Entries"/>
            collection is up to date.
            </remarks>
        </member>
        <member name="M:C1.C1Zip.C1ZipFile.IsZipFile(System.String)">
            <summary>
            Tests whether a file is a valid zip file.
            </summary>
            <param name="fileName">Name of the file to test.</param>
            <returns>True if the file exists and is a valid zip file, false otherwise.</returns>
        </member>
        <member name="M:C1.C1Zip.C1ZipFile.IsZipFile(System.IO.Stream)">
            <summary>
            Tests whether a stream contains a valid zip file.
            </summary>
            <param name="stream"><see cref="T:System.IO.Stream"/> to test.</param>
            <returns>True if <paramref name="stream"/> contains a valid zip file, false otherwise.</returns>
        </member>
        <member name="M:C1.C1Zip.C1ZipFile.OpenBatch">
            <summary>
            Opens the zip file for multiple operations.
            </summary>
            <remarks>
            <para>By default, <see cref="T:C1.C1Zip.C1ZipFile"/> opens and closes the zip file 
            automatically whenever entries are added or removed.</para>
            <para>This can cause delays in systems that have certain types of anti-virus
            software installed, or in situations where you want to add a large number of 
            relatively small entries. In these cases, use the <see cref="M:C1.C1Zip.C1ZipFile.OpenBatch"/> and 
            <see cref="M:C1.C1Zip.C1ZipFile.CloseBatch"/> methods to keep the zip file open until the entire 
            operation is concluded.</para>
            <para>Use a finally clause to ensure that the <see cref="M:C1.C1Zip.C1ZipFile.CloseBatch"/> 
            method is called even if an exception occurs.</para>
            </remarks>
            <example>
            The code below opens a zip file, adds several entries to it, then closes 
            the file:
            <code>
            C1ZipFile zip = new C1ZipFile();
            zip.Open(myzipfile);
            try
            {
            	zip.OpenBatch();
            	foreach (string fileName in Directory.GetFiles(path, "*.*"))
            		zip.Entries.Add(fileName);
            }
            finally
            {
            	zip.CloseBatch();
            }
            </code>
            </example>
        </member>
        <member name="M:C1.C1Zip.C1ZipFile.CloseBatch">
            <summary>
            Closes a zip file after it was opened with a call to the 
            <see cref="M:C1.C1Zip.C1ZipFile.OpenBatch"/> method.
            </summary>
            <remarks>
            See the <see cref="M:C1.C1Zip.C1ZipFile.OpenBatch"/> method for a complete description 
            and a sample.
            </remarks>
        </member>
        <member name="P:C1.C1Zip.C1ZipFile.FileName">
            <summary>
            Gets the name of the current zip file.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZipFile.Password">
            <summary>
            Gets or sets the password to use when adding or retrieving entries from the 
            zip file.
            </summary>
            <remarks>
            <para>If the <see cref="P:C1.C1Zip.C1ZipFile.Password"/> property is set to a non-empty string, any entries 
            added to the zip file will be encrypted and protected by the password. To extract these 
            entries later, the same password must be used.</para>
            <para>The password applies to all entries from the moment it is set. If you set the 
            password to a non-empty string and then add several entries to the zip file, all
            entries will use the same password.</para>
            <para>Although <b>C1Zip</b> supports Unicode characters in passwords, several popular zip 
            utilities do not. To ensure your encrypted zip files can be opened with third-party
            utilities, use passwords that consist of ASCII characters only.</para>
            </remarks>
        </member>
        <member name="P:C1.C1Zip.C1ZipFile.Comment">
            <summary>
            Gets or sets a comment associated with the current zip file.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZipFile.CompressionLevel">
            <summary>
            Gets or sets the compression level to use when adding entries to the zip file.
            </summary>
            <remarks>
            Higher compression settings create smaller files, but take longer to process. The
            default setting (<see cref="F:C1.C1Zip.CompressionLevelEnum.DefaultCompression"/>) provides 
            a good trade-off between compression and speed.
            </remarks>
        </member>
        <member name="P:C1.C1Zip.C1ZipFile.Entries">
            <summary>
            Gets a <see cref="T:C1.C1Zip.C1ZipEntryCollection"/> that contains the entries in the zip file.
            </summary>
            <remarks>
            The <see cref="P:C1.C1Zip.C1ZipFile.Entries"/> collection is used to enumerate the entries in the zip file,
            and also to add, remove, and expand entries.
            </remarks>
        </member>
        <member name="P:C1.C1Zip.C1ZipFile.OverwriteReadOnly">
            <summary>
            Determines whether the component should overwrite read-only files when extracting 
            entries from the zip file.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZipFile.OverwriteHidden">
            <summary>
            Determines whether the component should overwrite hidden files when extracting 
            entries from the zip file.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZipFile.OverwriteSystem">
            <summary>
            Determines whether the component should overwrite system files when extracting 
            entries from the zip file.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZipFile.UseUtf8Encoding">
            <summary>
            Determines whether file names and comments should be stored in UTF8 format.
            </summary>
            <remarks>
            <para>The Zip specification does not specify what character encoding to be used for the 
            embedded file names and comments. The original IBM PC character encoding set, 
            commonly referred to as IBM Code Page 437, is supposed to be the only encoding supported.
            Because of this, some zip utilities will not allow storing file names or comments with 
            Unicode characters. Others do allow it, but those file names and comments may not be
            read correctly by other utilities.</para>
            <para>Setting the <b>UseUtf8Encoding</b> to true causes C1Zip to store and retrieve
            file names and comments using the Utf8 encoding, which allows Unicode characters. The
            caveat is that Unicode file names may not be read correctly by other zip utilities.</para>
            </remarks>
        </member>
        <member name="P:C1.C1Zip.C1ZipFile.MemoryThreshold">
            <summary>
            Gets or sets the size of the largest stream to be compressed in memory.
            </summary>
            <remarks>
            <para><see cref="T:C1.C1Zip.C1ZipFile"/> compresses entries into temporary streams before
            adding them to the zip file.</para>
            <para>Entries with fewer than <see cref="P:C1.C1Zip.C1ZipFile.MemoryThreshold"/> bytes are compressed
            using a temporary memory stream.</para>
            <para>Entries with more than <see cref="P:C1.C1Zip.C1ZipFile.MemoryThreshold"/> bytes are compressed
            using a temporary file. You can control the location of the temporary file using
            the <see cref="P:C1.C1Zip.C1ZipFile.TempFileName"/> property.</para>
            </remarks>
        </member>
        <member name="P:C1.C1Zip.C1ZipFile.TempFileName">
            <summary>
            Gets or sets the name of the temporary file to use when adding entries to the zip file.
            </summary>
            <remarks>
            <para><see cref="T:C1.C1Zip.C1ZipFile"/> creates temporary streams while adding entries to a zip file.
            These temporary streams can be memory-based or disk-based, depending on the size of the
            entry and on the setting of the <see cref="P:C1.C1Zip.C1ZipFile.MemoryThreshold"/> property.</para>
            If a temporary file is used, <see cref="T:C1.C1Zip.C1ZipFile"/> you can control its location by 
            setting the <see cref="P:C1.C1Zip.C1ZipFile.TempFileName"/> property. If you don't select a path for the 
            temporary file, <see cref="T:C1.C1Zip.C1ZipFile"/> will create one automatically using the 
            <see cref="M:System.IO.Path.GetTempFileName"/> method.
            </remarks>
        </member>
        <member name="T:C1.C1Zip.ZipEncoding">
            <summary>
            Encoding used for entry names and comments
            
            NOTE: this is culture-dependent, which is a really bad idea, but most zip packers
            use the default OEM code page to encode file names, so we have to go along with it...
            
            Note that Encoding.Default seems like a logical choice but doesn't really work for
            international locales. Instead, we need to create an encoding using the current
            OEMCodePage. That allows accents and international characters to be used in file
            names (like the zip built into Windows, allows names such as "Åland.txt", "Äiti.txt", 
            "Würth.txt", etc.).
            
            This has nothing to do with compression, it's just used to encode and decode entry 
            names and comments.
            </summary>
        </member>
        <member name="T:C1.C1Zip.ZipFileException">
            <summary>
            Exception thrown when trying to open an invalid Zip file.
            </summary>
        </member>
        <member name="M:C1.C1Zip.ZipFileException.#ctor(System.String)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Zip.ZipFileException"/>.
            </summary>
            <param name="msg">Message that describes the exception.</param>
        </member>
        <member name="M:C1.C1Zip.ZipFileException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Zip.ZipFileException"/>.
            </summary>
            <param name="msg">Message that describes the exception.</param>
            <param name="filename">Name of the file that caused the exception.</param>
        </member>
        <member name="M:C1.C1Zip.ZipFileException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Zip.ZipFileException"/>.
            </summary>
            <param name="msg">Message that describes the exception.</param>
            <param name="filename">Name of the file that caused the exception.</param>
            <param name="innerException">Inner exception.</param>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamReader.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Zip.C1ZStreamReader"/> class.
            </summary>
            <param name="baseStream">Input stream that contains the compressed data.</param>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamReader.#ctor(System.IO.Stream,System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Zip.C1ZStreamReader"/> class.
            </summary>
            <param name="baseStream">Input stream that contains the compressed data.</param>
            <param name="zip">Specifies whether the compressed stream was created in zip format.</param>
            <param name="sizeCompressed">Specifies the number of compressed bytes to read from the stream.</param>
            <remarks>
            The <paramref name="sizeCompressed"/> parameter is needed only when a single stream contains
            several compressed streams (in zip files for example). If this parameter is not 
            specified, it is assumed that the stream contains a single stream of compressed data.
            </remarks>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamReader.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Zip.C1ZStreamReader"/> class.
            </summary>
            <param name="baseStream">Input stream that contains the compressed data.</param>
            <param name="zip">Specifies whether the compressed stream was created in zip format.</param>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamReader.#ctor(System.IO.Stream,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Zip.C1ZStreamReader"/> class.
            </summary>
            <param name="baseStream">Input stream that contains the compressed data.</param>
            <param name="header">Specifies whether the compressed stream contains header information (should be False for streams in zip files).</param>
            <param name="crc32">Specifies whether the compressed stream contains a CRC32 checksum (should be True for streams in zip files).</param>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamReader.#ctor(System.IO.Stream,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Zip.C1ZStreamReader"/> class.
            </summary>
            <param name="baseStream">Input stream that contains the compressed data.</param>
            <param name="zip">Specifies whether the compressed stream was created in zip format.</param>
            <param name="sizeCompressed">Specifies the number of compressed bytes to read from the stream.</param>
            <param name="method">Specifies the method that was used to compress the stream.</param>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamReader.#ctor(System.IO.Stream,System.Boolean,System.Int64,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Zip.C1ZStreamReader"/> class.
            </summary>
            <param name="baseStream">Input stream that contains the compressed data.</param>
            <param name="zip">Specifies whether the compressed stream was created in zip format.</param>
            <param name="sizeCompressed">Specifies the number of compressed bytes to read from the stream.</param>
            <param name="method">Specifies the method that was used to compress the stream.</param>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamReader.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamReader.SetLength(System.Int64)">
            <summary>
            Sets the number of compressed bytes to read from the underlying stream.
            </summary>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamReader.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the underlying compressed stream, decompressing them into
            a buffer, then advances the position within the stream by the number of bytes read.
            </summary>
            <param name="buf">An array of bytes. When this method returns, <paramref name="buf"/> contains the specified byte array with the values between <paramref name="offset"/>and (<paramref name="offset"/> + <paramref name="count"/>) replaced by the uncompressed data read from the stream.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buf"/> at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of (decompressed) bytes to be read from the current stream.</param>
            <returns>The total number of bytes read into the buffer. This may be less than the number of bytes 
            requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.
            </returns>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamReader.ReadByte">
            <summary>
            Reads a byte from the stream and advances the position within the stream 
            by one byte, or returns -1 if at the end of the stream.
            </summary>
            <returns>The unsigned byte cast to an <see cref="T:System.Int32"/>, or -1 if at 
            the end of the stream.
            </returns>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamReader.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            This method is overridden and is not supported by the <see cref="T:C1.C1Zip.C1ZStreamReader"/> class.
            </summary>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamReader.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying 
            stream.
            </summary>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamReader.Close">
            <summary>
            <para>Closes the current stream compressor and flushed any pending data into the base stream.</para>
            <para>If the <see cref="P:C1.C1Zip.C1ZStreamReader.OwnsBaseStream"/> property is set to True (the default value), 
            then this method also closes the base stream and releases any resources (such as sockets 
            and file handles) associated with it.</para>
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamReader.BaseStream">
            <summary>
            Gets the underlying stream that contains the compressed data.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamReader.OwnsBaseStream">
            <summary>
            Gets or sets whether calling the <see cref="M:C1.C1Zip.C1ZStreamReader.Close"/> method will also
            close the underlying stream (see <see cref="P:C1.C1Zip.C1ZStreamReader.BaseStream"/>).
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamReader.SizeCompressed">
            <summary>
            Gets the number of bytes in the stream (compressed bytes).
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamReader.SizeUncompressed">
            <summary>
            Gets the number of bytes that were compressed into the stream (uncompressed bytes).
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamReader.SizeCompressedLong">
            <summary>
            Gets the number of bytes in the stream (compressed bytes).
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamReader.SizeUncompressedLong">
            <summary>
            Gets the number of bytes that were compressed into the stream (uncompressed bytes).
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamReader.CanRead">
            <summary>
            Always returns True.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamReader.CanWrite">
            <summary>
            Always returns False.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamReader.CanSeek">
            <summary>
            Always returns False.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamReader.Length">
            <summary>
            Gets the length of the compressed stream if it is known (or -1 if the
            length of the compressed stream is unknown).
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamReader.Position">
            <summary>
            Gets the position within the stream (read-only).
            </summary>
        </member>
        <member name="F:C1.C1Zip.CompressionLevelEnum.NoCompression">
            <summary>
            No Compression.
            </summary>
        </member>
        <member name="F:C1.C1Zip.CompressionLevelEnum.BestSpeed">
            <summary>
            Low compression, highest speed.
            </summary>
        </member>
        <member name="F:C1.C1Zip.CompressionLevelEnum.BestCompression">
            <summary>
            Highest compression, low speed.
            </summary>
        </member>
        <member name="F:C1.C1Zip.CompressionLevelEnum.DefaultCompression">
            <summary>
            High compression, high speed.
            </summary>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamWriter.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Zip.C1ZStreamWriter"/> class.
            </summary>
            <param name="baseStream">Output stream that will contain the compressed data.</param>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamWriter.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Zip.C1ZStreamWriter"/> class.
            </summary>
            <param name="baseStream">Output stream that will contain the compressed data.</param>
            <param name="zip">Specifies whether the compressed stream should be compatible with zip files.</param>
            <remarks>
            <para>Streams in zip files are different from regular zlib streams in two aspects:</para>
            <para>(1) zip streams do not contain any local header information (the information is stored in the zip file headers instead) and</para>
            <para>(2) zip streams use a CRC32 checksum instead of the adler32 checksum used by zlib streams.</para>
            </remarks>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamWriter.#ctor(System.IO.Stream,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Zip.C1ZStreamWriter"/> class.
            </summary>
            <param name="baseStream">Output stream that will contain the compressed data.</param>
            <param name="header">Include header information in compressed stream (should be False for streams in zip files).</param>
            <param name="crc32">Include CRC32 checksum in compressed stream (should be True for streams in zip files).</param>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamWriter.#ctor(System.IO.Stream,C1.C1Zip.CompressionLevelEnum)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Zip.C1ZStreamWriter"/> class.
            </summary>
            <param name="baseStream">Output stream that will contain the compressed data.</param>
            <param name="level">Compression level to use when compressing data.</param>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamWriter.#ctor(System.IO.Stream,C1.C1Zip.CompressionLevelEnum,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Zip.C1ZStreamWriter"/> class.
            </summary>
            <param name="baseStream">Output stream that will contain the compressed data.</param>
            <param name="level">Compression level to use when compressing data.</param>
            <param name="zip">Specifies whether the compressed stream should be compatible with zip files.</param>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamWriter.#ctor(System.IO.Stream,C1.C1Zip.CompressionLevelEnum,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Zip.C1ZStreamWriter"/> class.
            </summary>
            <param name="baseStream">Output stream that will contain the compressed data.</param>
            <param name="level">Compression level to use when compressing data.</param>
            <param name="header">Include header information in compressed stream (should be False for streams in zip files).</param>
            <param name="crc32">Include CRC32 checksum in compressed stream (should be True for streams in zip files).</param>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamWriter.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamWriter.SetLength(System.Int64)">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamWriter.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamWriter.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the current stream and advances the current 
            position within this stream by the number of bytes written.
            </summary>
            <param name="buf">An array of bytes. This method copies <paramref name="count"/> bytes from
            <paramref name="buf"/> to the current stream.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buf"/> at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
            <remarks>
            The data is compressed as it is written into the stream. Writing <paramref name="count"/> bytes
            into the stream will usually advance the position by a number smaller than <paramref name="count"/>.
            </remarks>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamWriter.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying 
            stream.
            </summary>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamWriter.Close">
            <summary>
            <para>Closes the current stream compressor and flushed any pending data into the base stream.</para>
            <para>If the <see cref="P:C1.C1Zip.C1ZStreamWriter.OwnsBaseStream"/> property is set to True (the default value), 
            then this method also closes the base stream and releases any resources (such as sockets 
            and file handles) associated with it.</para>
            </summary>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamWriter.WriteByte(System.Byte)">
            <summary>
            Writes a byte to the current position in the stream and advances the position within the stream by one byte.
            </summary>
            <param name="value">Value to be written to the stream.</param>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamWriter.BaseStream">
            <summary>
            Gets the underlying stream that receives the compressed data.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamWriter.OwnsBaseStream">
            <summary>
            Gets or sets whether calling the <see cref="M:C1.C1Zip.C1ZStreamWriter.Close"/> method will also
            close the underlying stream (see <see cref="P:C1.C1Zip.C1ZStreamWriter.BaseStream"/>).
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamWriter.Checksum">
            <summary>
            Gets the checksum value used to check the integrity of the stream.
            </summary>
            <remarks>
            The checksum used may be an Adler or crc32 value depending on how
            the <see cref="T:C1.C1Zip.C1ZStreamWriter"/> was created.
            </remarks>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamWriter.SizeCompressed">
            <summary>
            Gets the number of bytes in the stream (compressed bytes).
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamWriter.SizeUncompressed">
            <summary>
            Gets the number of bytes that were compressed into the stream (uncompressed bytes).
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamWriter.SizeCompressedLong">
            <summary>
            Gets the number of bytes in the stream (compressed bytes).
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamWriter.SizeUncompressedLong">
            <summary>
            Gets the number of bytes that were compressed into the stream (uncompressed bytes).
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamWriter.ZStream">
            <summary>
            Gets the ZStream instance wrapped by this <see cref="T:C1.C1Zip.C1ZStreamWriter"/>.
            </summary>
            <remarks>
            This property is useful only in advanced applications that need to customize 
            the low-level behavior of the compressor. It is not needed in common applications.
            </remarks>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamWriter.CanRead">
            <summary>
            Always returns False.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamWriter.CanWrite">
            <summary>
            Always returns True.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamWriter.CanSeek">
            <summary>
            Always returns False.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamWriter.Length">
            <summary>
            Returns the length of the underlying stream, in bytes.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamWriter.Position">
            <summary>
            Gets the position within the stream (read-only).
            </summary>
        </member>
        <member name="T:C1.C1Zip.StringTables">
            <summary>
            Provide localization for error messages in Japanese.
            </summary>
        </member>
        <member name="T:C1.C1Zip.ZipEntryStreamWriter">
            <summary>
            ZipEntryStreamWriter
            Extends C1ZStreamWriter to provide the following:
            1) Creates a memory or temporary storage stream.
            2) Keeps track of the parent zip file.
            3) Overrides Close to add the compressed stream to the zip file.
            </summary>
        </member>
        <member name="T:C1.C1Zip.ZLib.IChecksum">
            <summary>
            Interface ICheckSum
            implemented by the Adler32 and CRC32 objects.
            Adler32 is a faster checksum used by the native ZLib
            CRC32   is the default checksum used in ZIP files
            </summary>
        </member>
        <member name="T:C1.C1Zip.ZLib.CRC32">
            <summary>
            Summary description for CRC32.
            methods are called Adler to keep zlib source code
            </summary>
        </member>
        <member name="T:C1.C1Zip.ZLib.Deflate">
            <summary>
            Summary description for Deflate.
            </summary>
        </member>
        <member name="T:C1.C1Zip.ZLib.InfBlocks">
            <summary>
            Summary description for InfBlocks.
            </summary>
        </member>
        <member name="T:C1.C1Zip.ZLib.InfCodes">
            <summary>
            Summary description for InfCodes.
            </summary>
        </member>
        <member name="T:C1.C1Zip.ZLib.Inflate">
            <summary>
            Summary description for Inflate.
            </summary>
        </member>
        <member name="T:C1.C1Zip.ZLib.InfTree">
            <summary>
            Summary description for InfTree.
            </summary>
        </member>
        <member name="T:C1.C1Zip.ZLib.StaticTree">
            <summary>
            Summary description for StaticTree.
            </summary>
        </member>
        <member name="T:C1.C1Zip.ZLib.Tree">
            <summary>
            Summary description for Tree.
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.Z_OK">
            <summary>
            No error.
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.Z_STREAM_END">
            <summary>
            End of stream detected.
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.Z_NEED_DICT">
            <summary>
            A preset dictionary is needed at this point.
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.Z_ERRNO">
            <summary>
            File error.
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.Z_STREAM_ERROR">
            <summary>
            Stream structure is inconsistent (input/output buffers are null for example).
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.Z_DATA_ERROR">
            <summary>
            Input data is corrupted (wrong format or checksum).
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.Z_MEM_ERROR">
            <summary>
            Not enough memory.
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.Z_BUF_ERROR">
            <summary>
            No progress possible or no room in output buffer.
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.Z_VERSION_ERROR">
            <summary>
            Incompatible ZLIB version.
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.next_in">
            <summary>
            Input buffer.
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.next_in_index">
            <summary>
            Position of cursor into input buffer.
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.avail_in">
            <summary>
            Number of bytes available in the input buffer.
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.total_in">
            <summary>
            Total number of input bytes read so far.
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.next_out">
            <summary>
            Output buffer.
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.next_out_index">
            <summary>
            Position of cursor into the output buffer.
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.avail_out">
            <summary>
            Number of free bytes remaining in output buffer.
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.total_out">
            <summary>
            Total number of bytes output so far.
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.msg">
            <summary>
            Description of the last error (null if no errors).
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.adler">
            <summary>
            Current checksum value (Adler or CRC32).
            </summary>
        </member>
        <member name="M:C1.C1Zip.ZLib.ZStream.#ctor">
            <summary>
            Initializes a new instance of the <b>ZStream</b> class using an Adler checksum.
            </summary>
        </member>
        <member name="M:C1.C1Zip.ZLib.ZStream.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <b>ZStream</b> class.
            </summary>
            <param name="crc32"><b>True</b> to use a CRC32 checksum, <b>False</b> to use an Adler checksum.</param>
            <remarks>
            CRC32 checksums are the standard used in zip files. Adler checksums are the default
            used by ZLIB. Adler checksums are faster to calculate, but are not compatible with the zip format.
            </remarks>
        </member>
        <member name="M:C1.C1Zip.ZLib.ZStream.inflateInit">
            <summary>
            Initializes the internal stream state for decompression.
            </summary>
            <returns>Zero on success, an error code on failure.</returns>
            <remarks>
            <para>The fields <see cref="F:C1.C1Zip.ZLib.ZStream.next_in"/> and <see cref="F:C1.C1Zip.ZLib.ZStream.avail_in"/> must be 
            initialized before by the caller.</para>
            <para><b>inflateInit</b> does not perform any decompression apart from reading the 
            zlib header if present: data decompression is done by the <see cref="M:C1.C1Zip.ZLib.ZStream.inflate(System.Int32)"/> 
            method. Therefore, the <b>next_in</b> and <b>avail_in</b> may be modified, but 
            <b>next_out</b> and <b>avail_out</b> are unchanged.</para>
            </remarks>
        </member>
        <member name="M:C1.C1Zip.ZLib.ZStream.inflateInit(System.Int32)">
            <summary>
            Initializes the internal stream state for decompression.
            </summary>
            <param name="bits">Size of the LZ77 sliding compression window in bits (the default value is 15 bits).</param>
            <returns>Zero on success, an error code on failure.</returns>
        </member>
        <member name="M:C1.C1Zip.ZLib.ZStream.inflate(System.Int32)">
            <summary>
            Decompresses as much data as possible until the input buffer is exhausted or 
            the output buffer is full.
            </summary>
            <param name="flush">How to flush data into the output buffer (default value is 2).</param>
            <returns>
            <b>Z_OK</b> if some progress has been made (more input processed or more output produced), 
            <b>Z_STREAM_END</b> if the end of the compressed data has been reached and all 
            uncompressed output has been produced, 
            <b>Z_NEED_DICT</b> if a preset dictionary is needed at this point, 
            <b>Z_DATA_ERROR</b> if the input data was corrupted (input stream not conforming to 
            the zlib format or incorrect checksum), 
            <b>Z_STREAM_ERROR</b> if the stream structure was inconsistent (for example if 
            <b>next_in</b> or <b>next_out</b> was null), 
            <b>Z_MEM_ERROR</b> if there was not enough memory,
            <b>Z_BUF_ERROR</b> if no progress is possible or if there was not enough room in the 
            output buffer when <b>Z_FINISH</b> is used.
            </returns>
            <remarks>
            <para><b>inflate</b> performs one or both of the following actions:</para>
            
            <para>1. Decompress more input starting at <b>next_in</b> and update <b>next_in</b>
            and <b>avail_in</b> accordingly. If not all input can be processed (because there 
            is not enough room in the output buffer), <b>next_in</b> is updated and processing 
            will resume at this point for the next call to inflate.</para>
            
            <para>2. Provide more output starting at <b>next_out</b> and update <b>next_out</b>
            and <b>avail_out</b> accordingly. <b>inflate</b> provides as much output as 
            possible, until there is no more input data or no more space in the output buffer.</para>
            
            <para>Before the call to inflate, the application should ensure that at least one of the 
            actions is possible, by providing more input and/or consuming more output, and 
            updating the <b>next_*</b> and <b>avail_*</b> values accordingly.</para>
            
            <para>If <b>inflate</b> returns Zero and <b>avail_out</b> == 0, it must be called again 
            after making room in the output buffer because there might be more output pending.</para>
            
            <para>The application can consume the uncompressed output when it wants, for example when 
            the output buffer is full (<b>avail_out</b> == 0), or after each call of <b>inflate</b>.</para>
            
            <para>This method may introduce some output latency (reading input without producing 
            any output) except when forced to flush.</para>
            </remarks>
        </member>
        <member name="M:C1.C1Zip.ZLib.ZStream.inflateEnd">
            <summary>
            Frees all dynamically allocated data structures for this stream, 
            discards any unprocessed input, and does not flush any pending output.
            </summary>
            <returns>Zero on success, an error code on failure.</returns>
        </member>
        <member name="M:C1.C1Zip.ZLib.ZStream.inflateSync">
            <summary>
            Skips invalid compressed data until a full flush point is found, 
            or until all available input is skipped. No output is provided.
            </summary>
            <returns>Zero on success, an error code on failure.</returns>
        </member>
        <member name="M:C1.C1Zip.ZLib.ZStream.inflateSetDictionary(System.Byte[],System.Int32)">
            <summary>
            Initializes the decompression dictionary from the given uncompressed byte sequence.
            </summary>
            <param name="dictionary">Data in the dictionary.</param>
            <param name="dictLength">Number of bytes in the dictionary.</param>
            <returns>Zero on success, an error code on failure.</returns>
            <remarks>
            <para>This method must be called immediately after a call of <see cref="M:C1.C1Zip.ZLib.ZStream.inflate(System.Int32)"/> 
            if this call returned <b>Z_NEED_DICT</b>. The dictionary chosen by the compressor 
            can be determined from the <b>Adler32</b> value returned by this call to <b>inflate</b>.</para>
            <para>The compressor and decompressor must use exactly the same dictionary 
            (see the <see cref="M:C1.C1Zip.ZLib.ZStream.deflateSetDictionary(System.Byte[],System.Int32)"/> method).</para>
            </remarks>
        </member>
        <member name="M:C1.C1Zip.ZLib.ZStream.deflateInit(System.Int32)">
            <summary>
            Initializes the internal stream state for compression.
            </summary>
            <param name="level">Compression level between zero and nine (0-9).</param>
            <returns>Zero on success, an error code on failure.</returns>
            <remarks>
            <para>Compression level 1 gives best speed, 9 gives best compression.</para>
            <para>Compression level zero gives no compression at all (the input data is simply copied a block at a time).</para>
            <para>The default compression level is 6, which provides a compromise between speed and compression.</para>
            </remarks>
        </member>
        <member name="M:C1.C1Zip.ZLib.ZStream.deflateInit(System.Int32,System.Int32)">
            <summary>
            Initializes the internal stream state for compression.
            </summary>
            <param name="level">Compression level between zero and nine (0-9).</param>
            <param name="bits">Size of the LZ77 sliding compression window in bits (the default value is 15 bits).</param>
            <returns>Zero on success, an error code on failure.</returns>
            <remarks>
            <para>Compression level 1 gives best speed, 9 gives best compression.</para>
            <para>Compression level zero gives no compression at all (the input data is simply copied a block at a time).</para>
            <para>The default compression level is 6, which provides a compromise between speed and compression.</para>
            </remarks>
        </member>
        <member name="M:C1.C1Zip.ZLib.ZStream.deflate(System.Int32)">
            <summary>
            Compresses as much data as possible, and stops when the input buffer becomes empty or the 
            output buffer becomes full.
            </summary>
            <param name="flush">Non-zero to force some data to be flushed into the output buffer.</param>
            <returns>Zero on success, an error code on failure.</returns>
            <remarks>
            <para><b>deflate</b> performs one or both of the following actions:</para>
            <para>1. Compress more input starting at <b>next_in</b> and update <b>next_in</b> and 
            <b>avail_in</b> accordingly. If not all input can be processed (because there is not 
            enough room in the output buffer), <b>next_in</b> and <b>avail_in</b> are updated and 
            processing will resume at this point for the next call to <b>deflate</b>.</para>
            <para>2. Provide more output starting at <b>next_out</b> and update <b>next_out</b> and 
            <b>avail_out</b> accordingly. This action is forced if the parameter <paramref name="flush"/> is 
            non zero. Forcing flush frequently degrades the compression ratio, so this parameter 
            should be set only when necessary (in interactive applications). Some output may be 
            provided even if flush is not set</para>
            <para>This method may introduce some output latency (reading input without producing 
            any output) except when forced to flush.</para>
            <para>If <b>deflate</b> returns with <b>avail_out</b> == 0, this method must be called 
            again with the same value of the <paramref name="flush"/> parameter and more output space 
            until the flush is complete (<b>deflate</b> returns with <b>avail_out</b> != 0).</para>
            </remarks>
        </member>
        <member name="M:C1.C1Zip.ZLib.ZStream.deflateEnd">
            <summary>
            Frees all dynamically allocated data structures for this stream, 
            discards any unprocessed input, and does not flush any pending output.
            </summary>
            <returns>Zero on success, an error code on failure.</returns>
        </member>
        <member name="M:C1.C1Zip.ZLib.ZStream.deflateParams(System.Int32,System.Int32)">
            <summary>
            Dynamically updates the compression level and compression strategy.
            </summary>
            <param name="level">Compression level between zero and nine (0-9).</param>
            <param name="strategy">Compression strategy (0-2).</param>
            <returns></returns>
        </member>
        <member name="M:C1.C1Zip.ZLib.ZStream.deflateSetDictionary(System.Byte[],System.Int32)">
            <summary>
            Initializes the compression dictionary from the given byte sequence without 
            producing any compressed output.
            </summary>
            <param name="dictionary">Data in the dictionary.</param>
            <param name="dictLength">Number of bytes in the dictionary.</param>
            <returns>Zero on success, an error code on failure.</returns>
            <remarks>
            <para>This method must be called immediately after <see cref="M:C1.C1Zip.ZLib.ZStream.deflateInit(System.Int32)"/>,
            before any call to <see cref="M:C1.C1Zip.ZLib.ZStream.deflate(System.Int32)"/>.</para>
            <para>The compressor and decompressor must use exactly the same dictionary 
            (see <see cref="M:C1.C1Zip.ZLib.ZStream.inflateSetDictionary(System.Byte[],System.Int32)"/>).</para>
            </remarks>
        </member>
        <member name="T:C1.C1Zip.ZLib.ZStreamException">
            <summary>
            The exception that is thrown when reading or writing to a compressed stream fails.
            </summary>
        </member>
        <member name="T:C1.Win.C1SpellChecker.BadWordEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:C1.Win.C1SpellChecker.C1SpellChecker.BadWordFound"/> event.
            </summary>
            <param name="sender"><see cref="T:C1.Win.C1SpellChecker.C1SpellChecker"/> that fired the event.</param>
            <param name="e"><see cref="T:C1.Win.C1SpellChecker.BadWordEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:C1.Win.C1SpellChecker.BadWordEventArgs">
            <summary>
            Provides data for the <see cref="E:C1.Win.C1SpellChecker.C1SpellChecker.BadWordFound"/> event.
            </summary>
        </member>
        <member name="M:C1.Win.C1SpellChecker.BadWordEventArgs.#ctor(System.Windows.Forms.Form,System.Windows.Forms.Control,C1.Win.C1SpellChecker.CharRange,C1.Win.C1SpellChecker.CharRangeList)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Win.C1SpellChecker.BadWordEventArgs"/>.
            </summary>
            <param name="dialog">Dialog that raised the event, or null if the event was not raised by a dialog.</param>
            <param name="control"><see cref="P:C1.Win.C1SpellChecker.BadWordEventArgs.Control"/> being spell-checked.</param>
            <param name="error"><see cref="T:C1.Win.C1SpellChecker.CharRange"/> that contains the bad word and its position within the text.</param>
            <param name="errors"><see cref="T:C1.Win.C1SpellChecker.CharRangeList"/> that contains all the bad words found in the text.</param>
        </member>
        <member name="P:C1.Win.C1SpellChecker.BadWordEventArgs.Dialog">
            <summary>
            Gets a reference to the <see cref="T:C1.Win.C1SpellChecker.ISpellDialog"/> that is being used to spell-check a control.
            </summary>
            <remarks>
            If this parameter is null, then no spell dialog is active and the bad word was found in 
            as-you-type mode.
            </remarks>
        </member>
        <member name="P:C1.Win.C1SpellChecker.BadWordEventArgs.Control">
            <summary>
            Gets a reference to the control that is being spell-checked.
            </summary>
        </member>
        <member name="P:C1.Win.C1SpellChecker.BadWordEventArgs.BadWord">
            <summary>
            Gets a <see cref="T:C1.Win.C1SpellChecker.CharRange"/> object that contains the bad word and its location within 
            the text being spell-checked.
            </summary>
        </member>
        <member name="P:C1.Win.C1SpellChecker.BadWordEventArgs.BadWordList">
            <summary>
            Gets a <see cref="T:C1.Win.C1SpellChecker.CharRangeList"/> that contains all errors detected in the text.
            </summary>
            <remarks>
            The <see cref="P:C1.Win.C1SpellChecker.BadWordEventArgs.BadWord"/> property contains the specific error being handled. You can
            use the collection to determine the total number of errors and the index of this error
            within the collection.
            </remarks>
        </member>
        <member name="P:C1.Win.C1SpellChecker.BadWordEventArgs.Cancel">
            <summary>
            Gets or sets whether this bad word should be ignored by the <see cref="T:C1.Win.C1SpellChecker.C1SpellChecker"/>.
            </summary>
            <remarks>
            <para>If the <see cref="P:C1.Win.C1SpellChecker.BadWordEventArgs.Dialog"/> property is not null, then the error is about to be displayed
            in a spell dialog. Setting the <b>Cancel</b> parameter to true in this case causes the dialog
            to skip to the next error.</para>
            <para>If the <see cref="P:C1.Win.C1SpellChecker.BadWordEventArgs.Dialog"/> property is null, then the error was detected in as-you-type
            mode and the word is about to be underlined. Setting the <b>Cancel</b> parameter to true in
            this case prevents the word from being underlined.</para>
            </remarks>
        </member>
        <member name="T:C1.Win.C1SpellChecker.AutoReplaceEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:C1.Win.C1SpellChecker.C1SpellChecker.AutoReplace"/> event.
            </summary>
            <param name="sender"><see cref="T:C1.Win.C1SpellChecker.C1SpellChecker"/> that fired the event.</param>
            <param name="e"><see cref="T:C1.Win.C1SpellChecker.AutoReplaceEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:C1.Win.C1SpellChecker.AutoReplaceEventArgs">
            <summary>
            Provides data for the <see cref="E:C1.Win.C1SpellChecker.C1SpellChecker.AutoReplace"/> event.
            </summary>
        </member>
        <member name="M:C1.Win.C1SpellChecker.AutoReplaceEventArgs.#ctor(System.Windows.Forms.Control,System.String,System.String,System.Int32)">
            <summary>
            Initializes a new instance of an <see cref="T:C1.Win.C1SpellChecker.AutoReplaceEventArgs"/>.
            </summary>
            <param name="control"><see cref="P:C1.Win.C1SpellChecker.AutoReplaceEventArgs.Control"/> where the text is being replaced.</param>
            <param name="found">String that contains the text about to be replaced.</param>
            <param name="replace">String that contains the replacement text.</param>
            <param name="index">Position of the <paramref name="found"/> string in the control's text.</param>
        </member>
        <member name="P:C1.Win.C1SpellChecker.AutoReplaceEventArgs.Control">
            <summary>
            Gets a reference to the control where the replacement will take place.
            </summary>
        </member>
        <member name="P:C1.Win.C1SpellChecker.AutoReplaceEventArgs.Found">
            <summary>
            Gets the string that is about to be replaced.
            </summary>
        </member>
        <member name="P:C1.Win.C1SpellChecker.AutoReplaceEventArgs.Replace">
            <summary>
            Gets or sets the string that contains the replacement text.
            </summary>
        </member>
        <member name="P:C1.Win.C1SpellChecker.AutoReplaceEventArgs.Cancel">
            <summary>
            Gets or sets whether to skip this replacement.
            </summary>
        </member>
        <member name="T:C1.Win.C1SpellChecker.ContextMenuEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:C1.Win.C1SpellChecker.C1SpellChecker.ContextMenuCreated"/> 
            event.
            </summary>
            <param name="sender"><see cref="T:C1.Win.C1SpellChecker.C1SpellChecker"/> that fired the event.</param>
            <param name="e"><see cref="T:C1.Win.C1SpellChecker.ContextMenuEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:C1.Win.C1SpellChecker.ContextMenuEventArgs">
            <summary>
            Provides data for the <see cref="E:C1.Win.C1SpellChecker.C1SpellChecker.ContextMenuCreated"/> event.
            </summary>
        </member>
        <member name="M:C1.Win.C1SpellChecker.ContextMenuEventArgs.#ctor(System.Windows.Forms.ContextMenuStrip)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Win.C1SpellChecker.ContextMenuEventArgs"/>.
            </summary>
            <param name="menu"><see cref="T:System.Windows.Forms.ContextMenuStrip"/> that caused the event to fire.</param>
        </member>
        <member name="P:C1.Win.C1SpellChecker.ContextMenuEventArgs.Menu">
            <summary>
            Gets the <see cref="T:System.Windows.Forms.ContextMenuStrip"/> that was created or customized.
            </summary>
        </member>
        <member name="T:C1.Win.C1SpellChecker.SuggestionList">
            <summary>
            List of strings.
            </summary>
        </member>
        <member name="T:C1.Win.C1SpellChecker.SuggestionsEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:C1.Win.C1SpellChecker.C1SpellChecker.ShowSuggestions"/> 
            event.
            </summary>
            <param name="sender"><see cref="T:C1.Win.C1SpellChecker.C1SpellChecker"/> that fired the event.</param>
            <param name="e"><see cref="T:C1.Win.C1SpellChecker.SuggestionsEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:C1.Win.C1SpellChecker.SuggestionsEventArgs">
            <summary>
            Provides data for the <see cref="E:C1.Win.C1SpellChecker.C1SpellChecker.ShowSuggestions"/> event.
            </summary>
        </member>
        <member name="P:C1.Win.C1SpellChecker.SuggestionsEventArgs.Suggestions">
            <summary>
            Gets the suggestion list.
            </summary>
            <remarks>
            The suggestion list can be customized. Elements can be added, removed or rearranged.
            </remarks>
            <example>
            This example checks the misspelled word and inserts one or more suggestions at the top of the list if need.
            <code>
            <![CDATA[
            private void c1SpellChecker1_ShowSuggestions(object sender, C1.Win.C1SpellChecker.SuggestionsEventArgs e)
            {
               if (e.Word.StartsWith("o"))
                   e.Suggestions.Insert(0, "one new suggestion");
               if (e.Word.Contains("i"))
                   e.Suggestions.Insert(0, "is suggestion");
               if (e.Word.StartsWith("tex"))
                   e.Suggestions.Insert(0, "text suggestion");
            }]]>
            </code>
            </example>
        </member>
        <member name="P:C1.Win.C1SpellChecker.SuggestionsEventArgs.Word">
            <summary>
            Gets the misspelled word.
            </summary>
        </member>
        <member name="T:C1.Win.C1SpellChecker.ISpellCheckableEditor">
            <summary>
            Interface used to provide modal (dialog-based) spell-checking using a <see cref="T:C1.Win.C1SpellChecker.C1SpellChecker"/>.
            </summary>
            <remarks>
            <para>The <see cref="T:C1.Win.C1SpellChecker.C1SpellChecker"/> can provide spell-checking for classes derived from
            the <see cref="T:System.Windows.Forms.TextBoxBase"/> class (<see cref="T:System.Windows.Forms.TextBox"/> and <see cref="T:System.Windows.Forms.RichTextBox"/>).</para>
            <para>To use <see cref="T:C1.Win.C1SpellChecker.C1SpellChecker"/> with other editors, you should create a class that 
            implements the <see cref="T:C1.Win.C1SpellChecker.ISpellCheckableEditor"/> interface on behalf of the editor.</para>
            </remarks>
        </member>
        <member name="M:C1.Win.C1SpellChecker.ISpellCheckableEditor.Select(System.Int32,System.Int32)">
            <summary>
            Selects a range of text in the editor.
            </summary>
            <param name="start">Index of the character where the selection starts.</param>
            <param name="length">Length of the selection.</param>
        </member>
        <member name="M:C1.Win.C1SpellChecker.ISpellCheckableEditor.HasMoreText">
            <summary>
            Gets the next batch of text to spell check using the same modal dialog.
            </summary>
            <returns>True if there is more text to check, false otherwise.</returns>
            <remarks>
            <para>This method allows spell-checking complex controls such as lists and
            grids. In these cases, a typical implementation will use this method to
            increment an internal index, update its <see cref="P:C1.Win.C1SpellChecker.ISpellCheckableEditor.Text"/> property, and
            return true to continue spell-checking without closing the dialog.</para>
            <para>Implementations for simple controls such as text boxes should simply
            return false.</para>
            </remarks>
        </member>
        <member name="M:C1.Win.C1SpellChecker.ISpellCheckableEditor.BeginSpell">
            <summary>
            Called when the spell-checking process starts.
            </summary>
        </member>
        <member name="M:C1.Win.C1SpellChecker.ISpellCheckableEditor.EndSpell">
            <summary>
            Called when the spell-checking process ends.
            </summary>
        </member>
        <member name="P:C1.Win.C1SpellChecker.ISpellCheckableEditor.Text">
            <summary>
            Gets or sets the text in the editor.
            </summary>
        </member>
        <member name="P:C1.Win.C1SpellChecker.ISpellCheckableEditor.SelectedText">
            <summary>
            Gets or sets the text that is selected in the editor.
            </summary>
        </member>
        <member name="P:C1.Win.C1SpellChecker.ISpellCheckableEditor.SelectionStart">
            <summary>
            Gets or sets the starting index of text selected in the editor.
            </summary>
        </member>
        <member name="P:C1.Win.C1SpellChecker.ISpellCheckableEditor.SelectionLength">
            <summary>
            Gets or sets the length of text selected in the editor.
            </summary>
        </member>
        <member name="P:C1.Win.C1SpellChecker.ISpellCheckableEditor.HideSelection">
            <summary>
            Gets or sets a value indicating whether the selected text in the text box control remains 
            highlighted when the control loses focus. 
            </summary>
        </member>
        <member name="P:C1.Win.C1SpellChecker.ISpellCheckableEditor.Control">
            <summary>
            Gets a reference to the <see cref="P:C1.Win.C1SpellChecker.ISpellCheckableEditor.Control"/> that implements the editor.
            </summary>
        </member>
        <member name="T:C1.Win.C1SpellChecker.ISpellCheckableRichEditor">
            <summary>
            Interface used to provide as-you-type spell-checking services using a <see cref="T:C1.Win.C1SpellChecker.C1SpellChecker"/>.
            </summary>
            <remarks>
            <para>The <see cref="T:C1.Win.C1SpellChecker.C1SpellChecker"/> can provide as-you-type spell-checking for classes derived from
            the <see cref="T:System.Windows.Forms.RichTextBox"/> class.</para>
            <para>To use <see cref="T:C1.Win.C1SpellChecker.C1SpellChecker"/> with other editors, you should create a class that 
            implements the <see cref="T:C1.Win.C1SpellChecker.ISpellCheckableRichEditor"/> interface on behalf of the editor.</para>
            </remarks>
        </member>
        <member name="M:C1.Win.C1SpellChecker.ISpellCheckableRichEditor.GetCharIndexFromPosition(System.Drawing.Point)">
            <summary>
            Gets the index of the character closest to the specified location. 
            </summary>
            <param name="pt">The location to search.</param>
            <returns>The index of the character closest to the point <paramref name="pt"/>.</returns>
        </member>
        <member name="M:C1.Win.C1SpellChecker.ISpellCheckableRichEditor.GetPositionFromCharIndex(System.Int32)">
            <summary>
            Gets the location within the control at the specified character index.
            </summary>
            <param name="index">The index of the character for which to retrieve the location. </param>
            <returns>The location of the specified character.</returns>
        </member>
        <member name="M:C1.Win.C1SpellChecker.ISpellCheckableRichEditor.GetBaselineOffset(C1.Win.C1SpellChecker.CharRange)">
            <summary>
            Gets the distance in pixels between the Y position returned by <see cref="M:C1.Win.C1SpellChecker.ISpellCheckableRichEditor.GetPositionFromCharIndex(System.Int32)"/>
            and the baseline where the red underline is to be painted.
            </summary>
            <param name="range"><see cref="T:C1.Win.C1SpellChecker.CharRange"/> that contains the text.</param>
            <returns>The distance between the top of the text and the baseline.</returns>
        </member>
        <member name="T:C1.Win.C1SpellChecker.TextBoxBaseSpellWrapper">
            <summary>
            Class that wraps a <see cref="T:System.Windows.Forms.TextBoxBase"/> and implements the <see cref="T:C1.Win.C1SpellChecker.ISpellCheckableRichEditor"/>
            interface.
            </summary>
        </member>
        <member name="T:C1.Win.C1SpellChecker.RichTextBoxSpellWrapper">
            <summary>
            Class that wraps a <see cref="T:System.Windows.Forms.RichTextBox"/> and implements the <see cref="T:C1.Win.C1SpellChecker.ISpellCheckableRichEditor"/>
            interface.
            </summary>
        </member>
        <member name="T:C1.Win.C1SpellChecker.ISpellMonitor">
            <summary>
            Common interface for spell monitors
            </summary>
        </member>
        <member name="M:C1.Win.C1SpellChecker.ISpellMonitor.Clear">
            <summary>
            Clears the internal error list.
            </summary>
        </member>
        <member name="M:C1.Win.C1SpellChecker.ISpellMonitor.CheckAll(System.Boolean)">
            <summary>
            Checks the text of the control attached to this monitor.
            </summary>
            <param name="spellChecking">True to re-check all the text, false to use the current error list.</param>
        </member>
        <member name="M:C1.Util.Localization.XmlLocalizer.LocalizeForm(System.Windows.Forms.Form,System.String,System.String)">
            <summary>
            Localizes a given <see cref="T:System.Windows.Forms.Form"/> using resources stored in an xml resource file.
            </summary>
            <param name="f">Form to localize.</param>
            <param name="resName">String with the name of the embedded resource that contains the localization information.</param>
            <param name="culture">Two-letter ISO culture name (en, es, de, etc).</param>
            <returns>True if the resources for the given culture were found and the form was localized; false otherwise.</returns>
            <remarks>
            <para>This method expects the localized strings to be stored in an embedded resource.</para>
            <para>The resource name should end with "[form-class-name].Localize.xml", and the schema is as follows:</para>
            <code>
            &lt;?xml version="1.0" encoding="utf-8"?&gt;
            &lt;form&gt;
              &lt;culture id="en"&gt;
                &lt;control name="C1SpellDialog" text="Spelling" /&gt;
                &lt;control name="_btnAdd" text="&amp;Add" /&gt;
                ...
              &lt;/culture&gt;
              &lt;culture id="es"&gt;
                &lt;control name="C1SpellDialog" text="Ortografia" /&gt;
                &lt;control name="_btnAdd" text="&amp;Anadir" /&gt;
                ...
              &lt;/culture&gt;
              ...
            &lt;form name="C1SpellDialog"&gt;
            </code>
            </remarks>
        </member>
        <member name="M:C1.Util.Localization.XmlLocalizer.LocalizeToolStripItems(System.Windows.Forms.ToolStripItemCollection,System.String,System.String)">
            <summary>
            Identical to LocalizeForm, except it localizes a <see cref="T:System.Windows.Forms.ToolStripItemCollection"/> instead of a form.
            </summary>
            <param name="items"><see cref="T:System.Windows.Forms.ToolStripItemCollection"/> that contains the items to be localized.</param>
            <param name="resName">String with the name of the embedded resource that contains the localization information.</param>
            <param name="culture">Two-letter ISO culture name (en, es, de, etc).</param>
            <returns>True if the resources for the given culture were found and the collection was localized; false otherwise.</returns>
        </member>
        <member name="T:C1.Win.C1SpellChecker.Strings">
            <summary>
            Static class containing UI strings used by the designer.
            </summary>
        </member>
        <member name="T:C1.Util.Localization.StringTables">
            <summary>
            Provide localization for error messages in Japanese.
            </summary>
        </member>
        <member name="T:C1.Win.C1SpellChecker.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:C1.Win.C1SpellChecker.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:C1.Win.C1SpellChecker.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:C1.Win.C1SpellChecker.Properties.Resources.commonChars">
            <summary>
              Looks up a localized string similar to &apos;abcdefghijklmnopqrstuvwxyz.
            </summary>
        </member>
        <member name="P:C1.Win.C1SpellChecker.Properties.Resources.specialChars">
            <summary>
              Looks up a localized string similar to åàáâäçèéêëíîïñóôöõùúûüœæлидерыкпфгаютвянйзоьсмбучхцжшщёэ.
            </summary>
        </member>
        <member name="T:C1.Win.C1SpellChecker.DictionaryState">
            <summary>
            Describes the current state of a <see cref="T:C1.Win.C1SpellChecker.SpellDictionary"/>.
            </summary>
        </member>
        <member name="F:C1.Win.C1SpellChecker.DictionaryState.Empty">
            <summary>
            The dictionary has not been loaded yet.
            </summary>
        </member>
        <member name="F:C1.Win.C1SpellChecker.DictionaryState.Loaded">
            <summary>
            The dictionary has been successfully loaded.
            </summary>
        </member>
        <member name="F:C1.Win.C1SpellChecker.DictionaryState.FileNotFound">
            <summary>
            The dictionary has not been loaded because the specified file could not be found.
            </summary>
        </member>
        <member name="F:C1.Win.C1SpellChecker.DictionaryState.InvalidFileFormat">
            <summary>
            The dictionary has not been loaded because the specified file has invalid format.
            </summary>
        </member>
        <member name="F:C1.Win.C1SpellChecker.DictionaryState.InvalidPassword">
            <summary>
            The dictionary is protected and the password used to load it was missing or incorrect.
            </summary>
        </member>
        <member name="T:C1.Win.C1SpellChecker.ISpellDictionary">
            <summary>
            Interface implemented by all spell dictionaries.
            </summary>
        </member>
        <member name="M:C1.Win.C1SpellChecker.ISpellDictionary.Contains(System.String)">
            <summary>
            Checks whether the dictionary contains a given word.
            </summary>
            <param name="word">Word to lookup.</param>
            <returns>True if the dictionary contains the word, false otherwise.</returns>
        </member>
        <member name="T:C1.Win.C1SpellChecker.SpellDictionaryBase">
            <summary>
            Base class for built-in and user dictionaries (see (<see cref="T:C1.Win.C1SpellChecker.SpellDictionary"/> and
            <see cref="T:C1.Win.C1SpellChecker.UserDictionary"/>).
            </summary>
        </member>
        <member name="F:C1.Win.C1SpellChecker.SpellDictionaryBase.m_fileName">
            <summary>
            Name of the file where the word list was loaded from.
            </summary>
        </member>
        <member name="F:C1.Win.C1SpellChecker.SpellDictionaryBase.m_state">
            <summary>
            Gets or sets a <see cref="T:C1.Win.C1SpellChecker.DictionaryState"/> value that indicates whether 
            the dictionary has been loaded or why it hasn't.
            </summary>
        </member>
        <member name="F:C1.Win.C1SpellChecker.SpellDictionaryBase.m_enabled">
            <summary>
            Gets or sets whether the dictionary is enabled.
            </summary>
        </member>
        <member name="F:C1.Win.C1SpellChecker.SpellDictionaryBase.m_spell">
            <summary>
            <see cref="T:C1.Win.C1SpellChecker.C1SpellChecker"/> that owns the dictionary.
            </summary>
        </member>
        <member name="M:C1.Win.C1SpellChecker.SpellDictionaryBase.EnsureLoaded">
            <summary>
            Ensures the dictionary is loaded, reading words from the file if necessary.
            </summary>
            <returns>True if the dictionary is enabled and has been loaded successfully.</returns>
        </member>
        <member name="M:C1.Win.C1SpellChecker.SpellDictionaryBase.ToString">
            <summary>
            Gets a string that represents this object.
            </summary>
            <returns>A string that represents this object.</returns>
        </member>
        <member name="M:C1.Win.C1SpellChecker.SpellDictionaryBase.GetFileName(System.Boolean)">
            <summary>
            Gets the fully qualified name of the file that contains the dictionary.
            </summary>
            <param name="mustExist">Whether to return a filename even if the file doesn't exist.</param>
            <returns>A complete file name which is guaranteed to exist, or an empty
            string if the file name was not specified or could not be found.</returns>
            <remarks>
            If the path is not specified, the component looks for it in the application 
            folder, in the folder where the <see cref="T:C1.Win.C1SpellChecker.C1SpellChecker"/> assembly is 
            installed, and in the system folder.
            </remarks>
        </member>
        <member name="M:C1.Win.C1SpellChecker.SpellDictionaryBase.Load">
            <summary>
            Loads the dictionary from the file specified by the <see cref="P:C1.Win.C1SpellChecker.SpellDictionaryBase.FileName"/> property.
            </summary>
            <returns>True if the dictionary was loaded successfully, false otherwise.</returns>
            <remarks>
            If the dictionary fails to load, this method returns false. In this case,
            you can check the value of the dictionary's <see cref="P:C1.Win.C1SpellChecker.SpellDictionaryBase.State"/> property to determine 
            why the file failed to load.
            </remarks>
        </member>
        <member name="M:C1.Win.C1SpellChecker.SpellDictionaryBase.Contains(System.String)">
            <summary>
            Checks whether the dictionary contains a given word.
            </summary>
            <param name="word">Word to lookup.</param>
            <returns>True if the dictionary contains the word, false otherwise.</returns>
        </member>
        <member name="P:C1.Win.C1SpellChecker.SpellDictionaryBase.FileName">
            <summary>
            Gets or sets the name of the file that contains the dictionary.
            </summary>
        </member>
        <member name="P:C1.Win.C1SpellChecker.SpellDictionaryBase.Enabled">
            <summary>
            Gets or sets whether the dictionary is enabled.
            </summary>
        </member>
        <member name="P:C1.Win.C1SpellChecker.SpellDictionaryBase.State">
            <summary>
            Gets a <see cref="T:C1.Win.C1SpellChecker.DictionaryState"/> value that indicates whether the dictionary was loaded
            successfully.
            </summary>
        </member>
        <member name="T:C1.Win.C1SpellChecker.SpellMonitor">
            <summary>
            Class that monitors a textbox and provides as-you-type spell checking.
            </summary>
        </member>
        <member name="T:C1.Win.C1SpellChecker.C1SpellChecker">
            <summary>
            Component that provides spell-checking services to controls and applications.
            </summary>
            <remarks>
            <para>The <b>C1SpelChecker</b> component supports three spell-checking modes:</para>
            
            <para><b>Batch mode</b></para>
            <para>Use the <see cref="M:C1.Win.C1SpellChecker.C1SpellChecker.CheckText(System.String)"/>, <see cref="M:C1.Win.C1SpellChecker.C1SpellChecker.CheckWord(System.String)"/>, and <see cref="M:C1.Win.C1SpellChecker.C1SpellChecker.GetSuggestions(System.String,System.Int32)"/> 
            methods to check strings and get lists of errors and spelling suggestions.</para>
            
            <para><b>Dialog mode</b></para>
            <para>Use the <see cref="M:C1.Win.C1SpellChecker.C1SpellChecker.CheckControl(C1.Win.C1SpellChecker.ISpellCheckableEditor)"/> method to check the content of any 
            <see cref="T:System.Windows.Forms.TextBoxBase"/>-derived controls using a modal dialog. The <b>C1SpellChecker</b> will
            check the text and display a dialog where the user can choose to correct or ignore each error.</para>
            <para>You can also check editors that do not derive from <see cref="T:System.Windows.Forms.TextBoxBase"/>. To do that, you
            have to create a wrapper class that implements the <see cref="T:C1.Win.C1SpellChecker.ISpellCheckableEditor"/> interface.</para>
            
            <para><b>As-you-type mode</b></para>
            <para>Set the extender property <b>SpellCheck</b> on any <see cref="T:System.Windows.Forms.TextBoxBase"/>-derived control to true,
            and the <b>C1SpellChecker</b> will monitor changes to the control. Any spelling mistakes will be indicated 
            on the control by a red, wavy underline; right-clicking the errors will show a context menu with spelling 
            suggestions.</para>
            <para>You can also provide as-you-type spelling support for editors that do not derive from <see cref="T:System.Windows.Forms.TextBoxBase"/>.
            To do that, you have to create a wrapper class that implements the <see cref="T:C1.Win.C1SpellChecker.ISpellCheckableRichEditor"/> 
            interface.</para>
            
            <para><b>Spell-Checking Options</b></para>
            
            <para>In all three modes described above, the spell-checker follows rules that can be customized using the
            <see cref="P:C1.Win.C1SpellChecker.C1SpellChecker.Options"/> property. Options available include types of words to ignore (capitalization, numbers,
            URLs), whether to display suggestions in a context menu, the number of suggestions to display, and so on.
            </para>
            
            <para><b>Dictionary Deployment</b></para>
            
            <para>The <b>C1SpellChecker</b> component uses spelling dictionaries stored in files with a 'dct' extension.</para>
            
            <para>To select which dictionary to use, use the <see cref="P:C1.Win.C1SpellChecker.C1SpellChecker.MainDictionary"/> property and set
            <see cref="P:C1.Win.C1SpellChecker.SpellDictionaryBase.FileName"/> to the name of the file you want to use.</para>
            
            <para>The easiest way to ensure the dictionary is deployed correctly is to add to your projects a reference 
            to the dictionary file(s) you want to use, then set the <b>Build Action</b> property to <b>None</b> and 
            the <b>Copy to Output Directory</b> property to <b>Copy if newer</b>. This way, the dictionaries will 
            be copied to the output directory along with the application executable and the <b>C1SpellChecker</b> 
            assembly.</para>
            
            <para>When using this deployment method, make sure the main dictionary's <see cref="P:C1.Win.C1SpellChecker.SpellDictionaryBase.FileName"/>
            value specifies a file name without a path. This way, the component will search for the dictionary in the
            directory where the <b>C1SpellChecker</b> assembly is located.</para>
            
            </remarks>
        </member>
        <member name="M:C1.Win.C1SpellChecker.C1SpellChecker.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Win.C1SpellChecker.C1SpellChecker"/>.
            </summary>
        </member>
        <member name="M:C1.Win.C1SpellChecker.C1SpellChecker.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Win.C1SpellChecker.C1SpellChecker"/>.
            </summary>
            <param name="container">An <see cref="T:System.ComponentModel.IContainer"/>that represents the container of the <see cref="T:C1.Win.C1SpellChecker.C1SpellChecker"/>.</param>
        </member>
        <member name="M:C1.Win.C1SpellChecker.C1SpellChecker.#ctor(System.String)">
            <summary>
            This constructor is for internal use only.
            </summary>
            <param name="info">Constructor information for internal use only.</param>
        </member>
        <member name="M:C1.Win.C1SpellChecker.C1SpellChecker.ShowAboutBox">
            <summary>
            Displays the AboutBox for this control.
            </summary>
        </member>
        <member name="M:C1.Win.C1SpellChecker.C1SpellChecker.CheckText(System.String,System.Int32,System.Int32)">
            <summary>
            Checks a string containing text and returns a list of spelling errors.
            </summary>
            <param name="text">Text to be spell-checked.</param>
            <param name="start">Index of the character where to start checking.</param>
            <param name="length">Length of the string to check.</param>
            <returns>List of <see cref="T:C1.Win.C1SpellChecker.CharRange"/> objects that describe the spelling mistakes.</returns>
        </member>
        <member name="M:C1.Win.C1SpellChecker.C1SpellChecker.CheckText(System.String,System.Int32)">
            <summary>
            Checks a string containing text and returns a list of spelling errors.
            </summary>
            <param name="text">Text to be spell-checked.</param>
            <param name="start">Index of the character where to start checking.</param>
            <returns>List of <see cref="T:C1.Win.C1SpellChecker.CharRange"/> objects that describe the spelling mistakes.</returns>
        </member>
        <member name="M:C1.Win.C1SpellChecker.C1SpellChecker.CheckText(System.String)">
            <summary>
            Checks a string containing text and returns a list of spelling errors.
            </summary>
            <param name="text">Text to be spell-checked.</param>
            <returns>List of <see cref="T:C1.Win.C1SpellChecker.CharRange"/> objects that describe the spelling mistakes.</returns>
        </member>
        <member name="M:C1.Win.C1SpellChecker.C1SpellChecker.CheckWord(System.String)">
            <summary>
            Checks a word to see if it's spelled correctly.
            </summary>
            <param name="word">Word to check.</param>
            <returns>True if the word is in the dictionary, false otherwise.</returns>
        </member>
        <member name="M:C1.Win.C1SpellChecker.C1SpellChecker.GetSuggestions(System.String,System.Int32)">
            <summary>
            Gets an array containing suggestions for a misspelled word.
            </summary>
            <param name="word">Word to suggest alternatives for.</param>
            <param name="maxCount">Maximum number of suggestions to provide.</param>
            <returns>An array containing suggestions for the <paramref name="word"/> parameter.</returns>
        </member>
        <member name="M:C1.Win.C1SpellChecker.C1SpellChecker.GetSuggestions(System.String)">
            <summary>
            Gets an array containing suggestions for a misspelled word.
            </summary>
            <param name="word">Word to suggest alternatives for.</param>
            <returns>An array containing suggestions for the <paramref name="word"/> parameter.</returns>
        </member>
        <member name="M:C1.Win.C1SpellChecker.C1SpellChecker.CheckControl(C1.Win.C1SpellChecker.ISpellCheckableEditor,System.Boolean,C1.Win.C1SpellChecker.ISpellDialog)">
            <summary>
            Shows a spell-checking dialog for an editor and returns the number of spelling errors found.
            </summary>
            <param name="editor"><see cref="T:C1.Win.C1SpellChecker.ISpellCheckableEditor"/> that contains the text to be spell-checked.</param>
            <param name="fromCursor">Whether to check only from the cursor position or the entire control contents.</param>
            <param name="dlg">Dialog that implements the <see cref="T:C1.Win.C1SpellChecker.ISpellDialog"/> interface used for displaying and correcting errors.</param>
            <returns>The number of errors found, or -1 if the dialog was canceled.</returns>
            <remarks>
            For an example, see the <see cref="M:C1.Win.C1SpellChecker.C1SpellChecker.CheckControl(System.Windows.Forms.TextBoxBase,System.Boolean,C1.Win.C1SpellChecker.ISpellDialog)"/> method.
            </remarks>
        </member>
        <member name="M:C1.Win.C1SpellChecker.C1SpellChecker.CheckControl(C1.Win.C1SpellChecker.ISpellCheckableEditor,System.Boolean)">
            <summary>
            Shows a spell-checking dialog for an editor and returns the number of spelling errors found.
            </summary>
            <param name="editor"><see cref="T:C1.Win.C1SpellChecker.ISpellCheckableEditor"/> that contains the text to be spell-checked.</param>
            <param name="fromCursor">Whether to check only from the cursor position or the entire control contents.</param>
            <returns>The number of errors found, or -1 if the dialog was canceled.</returns>
            <remarks>
            For an example, see the <see cref="M:C1.Win.C1SpellChecker.C1SpellChecker.CheckControl(System.Windows.Forms.TextBoxBase,System.Boolean,C1.Win.C1SpellChecker.ISpellDialog)"/> method.
            </remarks>
        </member>
        <member name="M:C1.Win.C1SpellChecker.C1SpellChecker.CheckControl(C1.Win.C1SpellChecker.ISpellCheckableEditor)">
            <summary>
            Shows a spell-checking dialog for an editor and returns the number of spelling errors found.
            </summary>
            <param name="editor"><see cref="T:C1.Win.C1SpellChecker.ISpellCheckableEditor"/> that contains the text to be spell-checked.</param>
            <returns>The number of errors found, or -1 if the dialog was canceled.</returns>
        </member>
        <member name="M:C1.Win.C1SpellChecker.C1SpellChecker.CheckControl(System.Windows.Forms.TextBoxBase,System.Boolean,C1.Win.C1SpellChecker.ISpellDialog)">
            <summary>
            Shows a spell-checking dialog for an editor, returns the number of spelling errors found.
            </summary>
            <param name="editor"><see cref="T:System.Windows.Forms.TextBoxBase"/> control that contains the text to be spell-checked.</param>
            <param name="fromCursor">Whether to check only from the cursor position or the entire control contents.</param>
            <param name="dlg">Dialog that implements the <see cref="T:C1.Win.C1SpellChecker.ISpellDialog"/> interface used for displaying and correcting errors.</param>
            <returns>The number of errors found, -1 if the dialog was canceled.</returns>
            <remarks>
            You can use this method to invoke the spell-checker using a custom spell dialog, or using the
            built-in <see cref="T:C1.Win.C1SpellChecker.C1SpellDialog"/>.
            </remarks>
            <example>
            The code below uses the <b>CheckControl</b> method with an instance of the <see cref="T:C1.Win.C1SpellChecker.C1SpellDialog"/> 
            and attaches some event handlers to display the spell-checking progress in a status bar.
            <code>
            private void btnSpell_Click(object sender, EventArgs e)
            {
              // create spell-checking dialog
              using (C1SpellDialog dlg = new C1SpellDialog())
              {
                // connect event handler
                dlg.ErrorDisplayed += new EventHandler(dlg_ErrorDisplayed);
            
                // spell-check the 'textBox' control
                c1SpellChecker1.CheckControl(this.textBox, false, dlg);
              }
            }
            void dlg_ErrorDisplayed(object sender, EventArgs e)
            {
              // get the C1SpellDialog that fired the event
              C1SpellDialog dlg = sender as C1SpellDialog;
            
              // show information about the error currently displayed
              statusLabel1.Text = string.Format("Error {0} of {1}: '{2}'",
                dlg.ErrorIndex + 1, dlg.ErrorCount, dlg.CurrentError.Text);
            }
            </code>
            </example>
        </member>
        <member name="M:C1.Win.C1SpellChecker.C1SpellChecker.CheckControl(System.Windows.Forms.TextBoxBase,System.Boolean)">
            <summary>
            Shows a spell-checking dialog for an editor, returns the number of spelling errors found.
            </summary>
            <param name="editor"><see cref="T:System.Windows.Forms.TextBoxBase"/> control that contains the text to be spell-checked.</param>
            <param name="fromCursor">Whether to check only from the cursor position or the entire control contents.</param>
            <returns>The number of errors found, -1 if the dialog was canceled.</returns>
        </member>
        <member name="M:C1.Win.C1SpellChecker.C1SpellChecker.CheckControl(System.Windows.Forms.TextBoxBase)">
            <summary>
            Shows a spell-checking dialog for an editor, returns the number of spelling errors found.
            </summary>
            <param name="editor"><see cref="T:System.Windows.Forms.TextBoxBase"/> control that contains the text to be spell-checked.</param>
            <returns>The number of errors found, -1 if the dialog was canceled.</returns>
        </member>
        <member name="M:C1.Win.C1SpellChecker.C1SpellChecker.CheckControl(System.Windows.Forms.WebBrowser)">
            <summary>
            Shows a spell-checking dialog for a browser, returns the number of spelling errors found.
            </summary>
            <param name="browser"><see cref="T:System.Windows.Forms.WebBrowser"/> control that contains the text to be spell-checked.</param>
            <returns>The number of errors found, -1 if the dialog was canceled.</returns>
        </member>
        <member name="M:C1.Win.C1SpellChecker.C1SpellChecker.CheckControl(System.Windows.Forms.WebBrowser,System.Boolean)">
            <summary>
            Shows a spell-checking dialog for a browser, returns the number of spelling errors found.
            </summary>
            <param name="browser"><see cref="T:System.Windows.Forms.WebBrowser"/> control that contains the text to be spell-checked.</param>
            <param name="fromCursor">Whether to check only from the cursor position or the entire control contents.</param>
            <returns>The number of errors found, -1 if the dialog was canceled.</returns>
        </member>
        <member name="M:C1.Win.C1SpellChecker.C1SpellChecker.CheckControl(System.Windows.Forms.WebBrowser,System.Boolean,C1.Win.C1SpellChecker.ISpellDialog)">
            <summary>
            Shows a spell-checking dialog for a browser, returns the number of spelling errors found.
            </summary>
            <param name="browser"><see cref="T:System.Windows.Forms.WebBrowser"/> control that contains the text to be spell-checked.</param>
            <param name="fromCursor">Whether to check only from the cursor position or the entire control contents.</param>
            <param name="dlg">Dialog that implements the <see cref="T:C1.Win.C1SpellChecker.ISpellDialog"/> interface used for displaying and correcting errors.</param>
            <returns>The number of errors found, -1 if the dialog was canceled.</returns>
        </member>
        <member name="M:C1.Win.C1SpellChecker.C1SpellChecker.CheckControl(System.Windows.Forms.Control,System.Object)">
            <summary>
            Shows a spell-checking dialog for a control which supports the <b>IHtmlDocument2</b> interface,
            returns the number of spelling errors found.
            </summary>
            <param name="control"><see cref="T:System.Windows.Forms.Control"/> control that is used as a parent to show a spell checking dialog.</param>
            <param name="browser">Reference to an <b>IWebBrowser2</b> interface.</param>
            <returns>The number of errors found, -1 if the dialog was canceled.</returns>
        </member>
        <member name="M:C1.Win.C1SpellChecker.C1SpellChecker.CheckControl(System.Windows.Forms.Control,System.Object,System.Boolean)">
            <summary>
            Shows a spell-checking dialog for a control which supports the <b>IHtmlDocument2</b> interface,
            returns the number of spelling errors found.
            </summary>
            <param name="control"><see cref="T:System.Windows.Forms.Control"/> control that is used as a parent to show a spell checking dialog.</param>
            <param name="browser">Reference to an <b>IWebBrowser2</b> interface.</param>
            <param name="fromCursor">Whether to check only from the cursor position or the entire control contents.</param>
            <returns>The number of errors found, -1 if the dialog was canceled.</returns>
        </member>
        <member name="M:C1.Win.C1SpellChecker.C1SpellChecker.CheckControl(System.Windows.Forms.Control,System.Object,System.Boolean,C1.Win.C1SpellChecker.ISpellDialog)">
            <summary>
            Shows a spell-checking dialog for a control which supports the <b>IHtmlDocument2</b> interface,
            returns the number of spelling errors found.
            </summary>
            <param name="control"><see cref="T:System.Windows.Forms.Control"/> control that is used as a parent to show a spell checking dialog.</param>
            <param name="browser">Reference to an <b>IWebBrowser2</b> interface.</param>
            <param name="fromCursor">Whether to check only from the cursor position or the entire control contents.</param>
            <param name="dlg">Dialog that implements the <see cref="T:C1.Win.C1SpellChecker.ISpellDialog"/> interface used for displaying and correcting errors.</param>
            <returns>The number of errors found, -1 if the dialog was canceled.</returns>
        </member>
        <member name="M:C1.Win.C1SpellChecker.C1SpellChecker.GetActiveSpellChecking(System.Windows.Forms.TextBoxBase)">
            <summary>
            Gets whether the <see cref="T:C1.Win.C1SpellChecker.C1SpellChecker"/> should highlight spelling mistakes 
            as the user types on a given <see cref="T:System.Windows.Forms.TextBoxBase"/>.
            </summary>
            <param name="textBox"><see cref="T:System.Windows.Forms.TextBoxBase"/> that will be monitored for spelling mistakes.</param>
            <returns>True if spell-checking is enabled for the given control, false otherwise.</returns>
        </member>
        <member name="M:C1.Win.C1SpellChecker.C1SpellChecker.SetActiveSpellChecking(System.Windows.Forms.TextBoxBase,System.Boolean)">
            <summary>
            Sets whether the <see cref="T:C1.Win.C1SpellChecker.C1SpellChecker"/> should highlight spelling mistakes 
            as the user types on a given <see cref="T:System.Windows.Forms.TextBoxBase"/>.
            </summary>
            <param name="textBox"><see cref="T:System.Windows.Forms.TextBoxBase"/> that will be monitored for spelling mistakes.</param>
            <param name="spellChecking">True to provide as-you-type spell-checking to the <paramref name="textBox"/>.</param>
        </member>
        <member name="M:C1.Win.C1SpellChecker.C1SpellChecker.GetActiveSpellChecking(C1.Win.C1SpellChecker.ISpellCheckableRichEditor)">
            <summary>
            Gets whether the <see cref="T:C1.Win.C1SpellChecker.C1SpellChecker"/> should highlight spelling mistakes 
            as the user types on a given <see cref="T:C1.Win.C1SpellChecker.ISpellCheckableRichEditor"/>.
            </summary>
            <param name="editor"><see cref="T:C1.Win.C1SpellChecker.ISpellCheckableRichEditor"/> that will be monitored for spelling mistakes.</param>
            <returns>True if spell-checking is enabled for the given control, false otherwise.</returns>
            <remarks>
            <para>The <see cref="T:C1.Win.C1SpellChecker.C1SpellChecker"/> provides as-you-type spell-checking to controls based on the 
            <see cref="T:System.Windows.Forms.TextBoxBase"/>.</para>
            <para>To spell-check other editors, you must write a wrapper class that implements the
            <see cref="T:C1.Win.C1SpellChecker.ISpellCheckableRichEditor"/> interface. This class provides the necessary connection between 
            the <see cref="T:C1.Win.C1SpellChecker.C1SpellChecker"/> and the editor.</para>
            </remarks>
        </member>
        <member name="M:C1.Win.C1SpellChecker.C1SpellChecker.SetActiveSpellChecking(C1.Win.C1SpellChecker.ISpellCheckableRichEditor,System.Boolean)">
            <summary>
            Sets whether the <see cref="T:C1.Win.C1SpellChecker.C1SpellChecker"/> should monitor a given <see cref="T:C1.Win.C1SpellChecker.ISpellCheckableRichEditor"/> 
            and highlight spelling mistakes.
            </summary>
            <param name="editor"><see cref="T:C1.Win.C1SpellChecker.ISpellCheckableRichEditor"/> that will be monitored for spelling mistakes.</param>
            <param name="spellChecking">True to provide as-you-type spell-checking to the <paramref name="editor"/>.</param>
            <remarks>
            <para>The <see cref="T:C1.Win.C1SpellChecker.C1SpellChecker"/> provides as-you-type spell-checking to controls based on the 
            <see cref="T:System.Windows.Forms.TextBoxBase"/>.</para>
            <para>To spell-check other editors, you must write a wrapper class that implements the
            <see cref="T:C1.Win.C1SpellChecker.ISpellCheckableRichEditor"/> interface. This class provides the necessary connection between 
            the <see cref="T:C1.Win.C1SpellChecker.C1SpellChecker"/> and the editor.</para>
            </remarks>
        </member>
        <member name="M:C1.Win.C1SpellChecker.C1SpellChecker.SetActiveSpellChecking(System.Windows.Forms.WebBrowser,System.Boolean)">
            <summary>
            Sets whether the <see cref="T:C1.Win.C1SpellChecker.C1SpellChecker"/> should highlight spelling mistakes in a <see cref="T:System.Windows.Forms.WebBrowser"/> control.
            </summary>
            <param name="browser"><see cref="T:System.Windows.Forms.WebBrowser"/> that will be monitored for spelling mistakes.</param>
            <param name="spellChecking">True to provide as-you-type spell-checking to the <paramref name="browser"/>.</param>
        </member>
        <member name="M:C1.Win.C1SpellChecker.C1SpellChecker.SetActiveSpellChecking(System.Windows.Forms.Control,System.Object,System.Boolean)">
            <summary>
            Sets whether the <see cref="T:C1.Win.C1SpellChecker.C1SpellChecker"/> should highlight spelling mistakes in a <see cref="T:System.Windows.Forms.WebBrowser"/> control.
            </summary>
            <param name="control"><see cref="T:System.Windows.Forms.Control"/> that will be monitored for spelling mistakes.</param>
            <param name="activeXBrowser"><b>IHtmlDocument2</b> interface that exposes the control contents.</param>
            <param name="spellChecking">True to provide as-you-type spell-checking to the <paramref name="browser"/>.</param>
        </member>
        <member name="M:C1.Win.C1SpellChecker.C1SpellChecker.GetActiveSpellChecking(System.Windows.Forms.Control)">
            <summary>
            Gets whether the <see cref="T:C1.Win.C1SpellChecker.C1SpellChecker"/> should highlight spelling mistakes 
            as the user types on a given <see cref="T:System.Windows.Forms.Control"/>.
            </summary>
            <param name="control"><see cref="T:System.Windows.Forms.Control"/> that is monitored for spelling mistakes.</param>
            <returns>True if spell-checking is enabled for the given control, false otherwise.</returns>
        </member>
        <member name="M:C1.Win.C1SpellChecker.C1SpellChecker.GetSpellChecking(System.Windows.Forms.Control)">
            <summary>
            Gets whether the <see cref="T:C1.Win.C1SpellChecker.C1SpellChecker"/> should highlight spelling mistakes 
            as the user types on a given <see cref="T:System.Windows.Forms.TextBoxBase"/>.
            </summary>
            <param name="control">Control (<see cref="T:System.Windows.Forms.TextBoxBase"/> or <see cref="T:System.Windows.Forms.WebBrowser"/>) that will be monitored for spelling mistakes.</param>
            <returns>True if spell-checking is enabled for the given control, false otherwise.</returns>
            <remarks>
            This method is identical to the <see cref="M:C1.Win.C1SpellChecker.C1SpellChecker.GetActiveSpellChecking(System.Windows.Forms.TextBoxBase)"/> method,
            and is provided for designer support only.
            </remarks>
        </member>
        <member name="M:C1.Win.C1SpellChecker.C1SpellChecker.SetSpellChecking(System.Windows.Forms.Control,System.Boolean)">
            <summary>
            Sets whether the <see cref="T:C1.Win.C1SpellChecker.C1SpellChecker"/> should highlight spelling mistakes 
            as the user types on a given <see cref="T:System.Windows.Forms.TextBoxBase"/>.
            </summary>
            <param name="control">Control (<see cref="T:System.Windows.Forms.TextBoxBase"/> or <see cref="T:System.Windows.Forms.WebBrowser"/>) that will be monitored for spelling mistakes.</param>
            <param name="spellChecking">True to provide as-you-type spell-checking to the <paramref name="control"/>.</param>
            <remarks>
            This method is identical to the <see cref="M:C1.Win.C1SpellChecker.C1SpellChecker.SetActiveSpellChecking(System.Windows.Forms.TextBoxBase,System.Boolean)"/> method,
            and is provided for designer support only.
            </remarks>
        </member>
        <member name="M:C1.Win.C1SpellChecker.C1SpellChecker.OnBadWordFound(C1.Win.C1SpellChecker.BadWordEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1SpellChecker.C1SpellChecker.BadWordFound"/> event.
            </summary>
            <param name="e"><see cref="T:C1.Win.C1SpellChecker.BadWordEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Win.C1SpellChecker.C1SpellChecker.OnAutoReplace(C1.Win.C1SpellChecker.AutoReplaceEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1SpellChecker.C1SpellChecker.AutoReplace"/> event.
            </summary> 
            <param name="e"><see cref="T:C1.Win.C1SpellChecker.AutoReplaceEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Win.C1SpellChecker.C1SpellChecker.OnContextMenuCreated(C1.Win.C1SpellChecker.ContextMenuEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1SpellChecker.C1SpellChecker.ContextMenuCreated"/> event.
            </summary>
            <param name="e"><see cref="T:C1.Win.C1SpellChecker.ContextMenuEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Win.C1SpellChecker.C1SpellChecker.OnDictionaryChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1SpellChecker.C1SpellChecker.DictionaryChanged"/> event.
            </summary>
            <param name="e"><see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Win.C1SpellChecker.C1SpellChecker.OnShowSuggestions(C1.Win.C1SpellChecker.SuggestionsEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1SpellChecker.C1SpellChecker.ShowSuggestions"/> event.
            </summary>
            <param name="e"><see cref="T:C1.Win.C1SpellChecker.SuggestionsEventArgs"/> that contains the event data.</param>
        </member>
        <member name="P:C1.Win.C1SpellChecker.C1SpellChecker.Enabled">
            <summary>
            Gets a value that indicates whether the main spelling dictionary has been loaded.
            </summary>
            <remarks>
            <para>If <see cref="T:C1.Win.C1SpellChecker.C1SpellChecker"/> cannot find the spelling dictionary, it will not throw
            any exceptions. The <b>Enabled</b> property will be set to false and the component will not 
            be able to spell-check any text.</para>
            <para>You can check the state of the <see cref="P:C1.Win.C1SpellChecker.C1SpellChecker.MainDictionary"/> and the <see cref="P:C1.Win.C1SpellChecker.C1SpellChecker.UserDictionary"/>
            by inspecting their <see cref="P:C1.Win.C1SpellChecker.SpellDictionaryBase.State"/> property.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1SpellChecker.C1SpellChecker.Options">
            <summary>
            Gets a <see cref="T:C1.Win.C1SpellChecker.SpellOptions"/> object that specifies spell-checking options.
            </summary>
            <remarks>
            Options available include types of words to ignore, whether to display suggestions in a context menu,
            the number of suggestions to display, and so on.
            </remarks>
        </member>
        <member name="P:C1.Win.C1SpellChecker.C1SpellChecker.MainDictionary">
            <summary>
            Gets the main dictionary used for spell-checking.
            </summary>
            <remarks>
            <para>This is the main dictionary. It is stored in a compressed format, and is read-only.</para>
            <para>You can edit the spell dictionaries or create your own using the
            <b>C1DictionaryEditor</b> utility that ships with <see cref="T:C1.Win.C1SpellChecker.C1SpellChecker"/>.
            This option can be useful for domain-specific applications that require the
            use of technical jargon (for example, medical, legal, and so on).</para>
            <para>Users cannot add words to this dictionary, only to the <see cref="P:C1.Win.C1SpellChecker.C1SpellChecker.UserDictionary"/>.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1SpellChecker.C1SpellChecker.UserDictionary">
            <summary>
            Gets the user dictionary used for spell-checking.
            </summary>
            <remarks>
            This is the user dictionary. The user may add words to this dictionary using the
            spell-checking dialog, and it is automatically persisted to the specified file.
            </remarks>
        </member>
        <member name="P:C1.Win.C1SpellChecker.C1SpellChecker.CustomDictionary">
            <summary>
            Gets or sets a custom spell-checking dictionary.
            </summary>
            <remarks>
            This property allows you to specify additional custom dictionaries to be used 
            in addition to the standard <see cref="P:C1.Win.C1SpellChecker.C1SpellChecker.MainDictionary"/> and <see cref="P:C1.Win.C1SpellChecker.C1SpellChecker.UserDictionary"/>
            dictionaries.
            </remarks>
        </member>
        <member name="P:C1.Win.C1SpellChecker.C1SpellChecker.CustomParser">
            <summary>
            Gets or sets a custom spell-checking parser.
            </summary>
            <remarks>
            <para>This property allows you to specify a custom parser for breaking up 
            text into words to be spell-checked.</para>
            <para>For example, you may want to use a custom parser when checking 
            source code files. This way you can spell-check the comments in the code
            and skip the actual code.</para>
            </remarks>
            <example>
            The class below implements a custom parser that breaks words that contain
            underscores or mixed case into separate words. For example, this parser would
            treat "Customer_Code" or "CustomerCode" as two separate words.
            <code>
            public class Parser : C1.Win.C1SpellChecker.ISpellParser
            {
              CharRange ISpellParser.GetNextWord(string text, int start, IgnoreOptions ignore, string previousWord)
              {
                // start with default implementation
                CharRange range = CharRange.GetNextWord(text, start, ignore, previousWord);
                
                // additional logic to handle underscores and mixed-case
                if (range != null)
                {
                  // get original word
                  string word = range.Text;
                  
                  // split word at underscores
                  int index = word.IndexOf('_');
                  if (index > -1)
                  {
                    word = word.Substring(0, index);
                    range = new CharRange(word, range.Start, word == previousWord);
                  }
                  
                  // split MixedCasedWords
                  for (int i = 1; i &lt; word.Length; i++)
                  {
                    if (char.IsUpper(word[i]) &amp;&amp; char.IsLower(word[i - 1]))
                    {
                      word = word.Substring(0, i);
                      range = new CharRange(word, range.Start, word == previousWord);
                    }
                  }
                }
                
                // done
                return range;
              }
              string ISpellParser.FilterWord(string word)
              {
                return word;
              }
            }
            </code>
            </example>
        </member>
        <member name="P:C1.Win.C1SpellChecker.C1SpellChecker.IgnoreList">
            <summary>
            Gets the list of words to ignore during spell-checking.
            </summary>
            <remarks>
            <para>The list is used by the built-in spell dialog and by the as-you-type mechanism.</para>
            <para>The user may add words to this list using the "Ignore All" button in the spell dialog 
            or the "Ignore All" option in the as-you-type context menu.</para>
            <para>Strings in the list are case-sensitive.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1SpellChecker.C1SpellChecker.AutoReplaceList">
            <summary>
            Gets a list of words and replacements to use while spell-checking.
            </summary>
            <remarks>
            <para>This list is used by the built-in spell dialog and by the as-you-type mechanism.</para>
            <para>The built-in spell dialog checks the list when it finds a misspelled word. If a match
            is found, the misspelled word is replaced with the corresponding list entry.</para>
            <para>The as-you-type mechanism looks for matches whenever the user types a character that
            is not a letter or a digit. If a match is found, the text is replaced with the corresponding
            list entry.</para>
            <para>Note the difference in operation between the two modes. In as-you-type spell-checking,
            any matches will be replaced, whether the key is spelled correctly or not. In dialog mode,
            keys that are spelled correctly will not be flagged as errors and therefore will not be 
            replaced. For example, if the <b>AutoReplaceList</b> contains an entry with the strings
            ("attn.", "attention of"), then typing "attn. " into the editor will trigger a replacement 
            and the editor will contain "attention of ". However, because "attn." is not a spelling 
            error, the spell dialog will not replace instances of the string "attn." with "attention of".</para>
            <para>The <see cref="T:C1.Win.C1SpellChecker.C1SpellChecker"/> raises the <see cref="E:C1.Win.C1SpellChecker.C1SpellChecker.AutoReplace"/> event before
            making each automatic replacement. The event handler may cancel the replacement.</para>
            <para>Strings in the list are case-sensitive.</para>
            </remarks>
            <example>
            The example below causes the <see cref="T:C1.Win.C1SpellChecker.C1SpellChecker"/> to monitor spelling on a 
            <see cref="T:System.Windows.Forms.TextBox"/> control. If the user types the string "teh", it is automatically 
            replaced with "the". If the user types "cant", it is automatically replaced with "can't".
            <code>
            // build AutoReplace list
            c1SpellChecker1.AutoReplaceList.Clear();
            c1SpellChecker1.AutoReplaceList.Add("teh", "the");
            c1SpellChecker1.AutoReplaceList.Add("cant", "can't");
            
            // activate as-you-type spell-checking on textBox1
            c1SpellChecker1.SetSpellChecking(textBox1, true);
            </code>
            </example>
        </member>
        <member name="P:C1.Win.C1SpellChecker.C1SpellChecker.MaxWordLength">
            <summary>
            Gets or sets the maximum length of words that are spell-checked. 
            </summary>
            <remarks>
            <para>This property determines the maximum length of strings that are 
            considered to be words and should be spell-checked. This enables the
            <see cref="T:C1.Win.C1SpellChecker.C1SpellChecker"/> to automatically ignore long strings 
            that contain non-textual information.</para>
            <para>Setting this property to a value smaller than one causes all
            strings to be considered as words.</para>
            </remarks>
        </member>
        <member name="E:C1.Win.C1SpellChecker.C1SpellChecker.BadWordFound">
            <summary>
            Occurs when a spelling error is found by the <see cref="T:C1.Win.C1SpellChecker.C1SpellChecker"/>.
            </summary>
            <remarks>
            <para>This event occurs when the component detects a spelling error in a control. 
            This happens while a spell dialog is displayed (see the <see cref="M:C1.Win.C1SpellChecker.C1SpellChecker.CheckControl(C1.Win.C1SpellChecker.ISpellCheckableEditor)"/> 
            method) or while the component is painting the red wavy underlines that mark misspelled words
            in dynamic mode (see the <see cref="M:C1.Win.C1SpellChecker.C1SpellChecker.SetSpellChecking(System.Windows.Forms.Control,System.Boolean)"/> method).</para>
            <para>The event parameters have a <b>Dialog</b> property that allow the handler to determine
            whether a spell dialog is being displayed or not.</para>
            <para>The event parameters also have a <b>Cancel</b> property that can be used to ignore 
            the error.</para>
            <para>Note that this event occurs every time a misspelled word is about to be underlined,
            which occurs whenever the control is painted (not just when the bad word is initially 
            typed into the control. Because of this, one single misspelled word can cause this event
            to fire multiple times.</para>
            </remarks>
        </member>
        <member name="E:C1.Win.C1SpellChecker.C1SpellChecker.AutoReplace">
            <summary>
            Occurs before the <see cref="T:C1.Win.C1SpellChecker.C1SpellChecker"/> makes an automatic replacement
            in the control's text.
            </summary>
            <remarks>
            <see cref="T:C1.Win.C1SpellChecker.C1SpellChecker"/> automatically replaces text as the user types based on the
            list of words specified by the <see cref="P:C1.Win.C1SpellChecker.C1SpellChecker.AutoReplaceList"/> property.
            </remarks>
        </member>
        <member name="E:C1.Win.C1SpellChecker.C1SpellChecker.ContextMenuCreated">
            <summary>
            Occurs when a context menu is created containing the spelling suggestions and commands.
            </summary>
            <remarks>
            <para>The spelling context menu is localized automatically based on the setting of the 
            <see cref="P:C1.Win.C1SpellChecker.SpellOptions.DialogLanguage"/> property. This event provides an easy way to perform 
            additional customization of the menu should that be necessary.</para>
            </remarks>
        </member>
        <member name="E:C1.Win.C1SpellChecker.C1SpellChecker.DictionaryChanged">
            <summary>
            Occurs when any of the spell dictionaries changes in any way.
            </summary>
            <remarks>
            This event notifies listeners that the spell dictionaries have changed and
            the text should be re-checked. It occurs for example when words are added to the 
            user dictionary or when new dictionaries are loaded. 
            </remarks>
        </member>
        <member name="E:C1.Win.C1SpellChecker.C1SpellChecker.ShowSuggestions">
            <summary>
            Occurs when suggestions is about to show in the spell dialog or in the spell context menu.
            </summary>
            <remarks>
            <para>Use this method to customize the suggestion list. Suggestions can be added, removed or rearranged.</para>
            <para>If the suggestion list contains more items than <see cref="P:C1.Win.C1SpellChecker.SpellOptions.MaxSuggestionsInContextMenu"/>, then the additional items won't be shown in the spell context menu.</para>
            <para>This event does not occur when user calls <see cref="M:C1.Win.C1SpellChecker.C1SpellChecker.GetSuggestions(System.String,System.Int32)"/> method.</para>
            </remarks>
            <example>
            This example checks the misspelled word and inserts one or more suggestions at the top of the list if need.
            <code>
            <![CDATA[
            private void c1SpellChecker1_ShowSuggestions(object sender, C1.Win.C1SpellChecker.SuggestionsEventArgs e)
            {
               if (e.Word.StartsWith("o"))
                   e.Suggestions.Insert(0, "one new suggestion");
               if (e.Word.Contains("i"))
                   e.Suggestions.Insert(0, "is suggestion");
               if (e.Word.StartsWith("tex"))
                   e.Suggestions.Insert(0, "text suggestion");
            }]]>
            </code>
            </example>
        </member>
        <member name="T:C1.Win.C1SpellChecker.SpellDictionary">
            <summary>
            Class that contains a list of words and methods looking them up and loading
            them from a compressed file.
            </summary>
        </member>
        <member name="M:C1.Win.C1SpellChecker.SpellDictionary.Contains(System.String)">
            <summary>
            Checks whether the dictionary contains a given word.
            </summary>
            <param name="word">Word to lookup.</param>
            <returns>True if the dictionary contains the word, false otherwise.</returns>
        </member>
        <member name="M:C1.Win.C1SpellChecker.SpellDictionary.Load">
            <summary>
            Loads the dictionary from the file specified by the <see cref="P:C1.Win.C1SpellChecker.SpellDictionary.FileName"/> property.
            </summary>
            <returns>True if the dictionary was loaded successfully, false otherwise.</returns>
            <remarks>
            If the dictionary fails to load, this method returns false. In this case,
            you can check the value of the dictionary's <see cref="P:C1.Win.C1SpellChecker.SpellDictionaryBase.State"/> property to determine 
            why the file failed to load.
            </remarks>
        </member>
        <member name="P:C1.Win.C1SpellChecker.SpellDictionary.FileName">
            <summary>
            Gets or sets the name of the file that contains the dictionary.
            </summary>
        </member>
        <member name="P:C1.Win.C1SpellChecker.SpellDictionary.Password">
            <summary>
            Sets the password needed to load password-protected dictionaries.
            </summary>
            <remarks>
            <para>If the dictionary file in use is password-protected, you must provide a
            valid password in order to use it.</para>
            <para>The dictionary files that ship with <see cref="T:C1.Win.C1SpellChecker.C1SpellChecker"/> are not
            password-protected. You can create password-protected dictionaries using the
            dictionary utility shipped with <see cref="T:C1.Win.C1SpellChecker.C1SpellChecker"/>.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1SpellChecker.SpellDictionary.WordCount">
            <summary>
            Gets the number of words loaded in the dictionary.
            </summary>
        </member>
        <member name="T:C1.Win.C1SpellChecker.DictionaryEntries">
            <summary>
            DictionaryEntries is a dictionary that associates:
              key: hash codes for the lower-case version of the strings
              value: bytes (0 for lower-case strings, 1 for upper-case strings)
            </summary>
        </member>
        <member name="M:C1.Win.C1SpellChecker.DictionaryEntries.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Win.C1SpellChecker.DictionaryEntries"/>.
            </summary>
            <param name="capacity">Initial capacity of the list.</param>
        </member>
        <member name="M:C1.Win.C1SpellChecker.DictionaryEntries.Add(System.String)">
            <summary>
            Adds a word to the list.
            </summary>
            <param name="word">Word to add to the list.</param>
        </member>
        <member name="M:C1.Win.C1SpellChecker.DictionaryEntries.Contains(System.String)">
            <summary>
            Checks whether the dictionary contains a given word.
            </summary>
            <param name="word">Word to lookup.</param>
            <returns>True if the dictionary contains the word, false otherwise.</returns>
        </member>
        <member name="M:C1.Win.C1SpellChecker.DictionaryEntries.Load(C1.Win.C1SpellChecker.SpellDictionary,System.String,System.String)">
            <summary>
            Loads the word list from a file.
            </summary>
            <param name="dictionary"><see cref="T:C1.Win.C1SpellChecker.SpellDictionary"/> that owns the word list.</param>
            <param name="fileName">Fully qualified name of the file that contains the word list.</param>
            <param name="password">Password used to load the entries if the file is protected.</param>
        </member>
        <member name="T:C1.Win.C1SpellChecker.DictionaryCache">
            <summary>
            Class used to cache dictionary information read from files so they can be 
            shared by multiple C1SpellChecker instances.
            </summary>
        </member>
        <member name="T:C1.Win.C1SpellChecker.ISpellDialog">
            <summary>
            Interface that must be implemented by dialogs used with the <see cref="M:C1.Win.C1SpellChecker.C1SpellChecker.CheckControl(System.Windows.Forms.TextBoxBase,System.Boolean,C1.Win.C1SpellChecker.ISpellDialog)"/>
            methods.
            </summary>
        </member>
        <member name="M:C1.Win.C1SpellChecker.ISpellDialog.Initialize(C1.Win.C1SpellChecker.C1SpellChecker,C1.Win.C1SpellChecker.ISpellCheckableEditor,C1.Win.C1SpellChecker.CharRangeList)">
            <summary>
            Initializes the dialog with the <see cref="T:C1.Win.C1SpellChecker.C1SpellChecker"/> being used to check the spelling
            on a control, the <see cref="T:C1.Win.C1SpellChecker.ISpellCheckableEditor"/> control that is being checked, and an
            initial <see cref="T:C1.Win.C1SpellChecker.CharRangeList"/> that contains the list of errors detected by the spell checker.
            </summary>
            <param name="spell"><see cref="T:C1.Win.C1SpellChecker.C1SpellChecker"/> being used to check the spelling on a control.</param>
            <param name="editor"><see cref="T:C1.Win.C1SpellChecker.ISpellCheckableEditor"/> that contains the text being spell-checked.</param>
            <param name="errors"><see cref="T:C1.Win.C1SpellChecker.CharRangeList"/> that contains the initial list of errors detected by the spell-checker.</param>
        </member>
        <member name="P:C1.Win.C1SpellChecker.ISpellDialog.ErrorCount">
            <summary>
            Gets the number of errors initially detected by the <see cref="T:C1.Win.C1SpellChecker.C1SpellChecker"/> that controls this dialog.
            </summary>
            <remarks>
            This property contains the number of errors detected when the dialog is initially displayed. It does not change
            when errors are removed from the error list when the user clicks the <b>IgnoreAll</b> or <b>Add</b> 
            buttons.
            </remarks>
        </member>
        <member name="T:C1.Win.C1SpellChecker.C1SpellDialog">
            <summary>
            Dialog that displays spelling mistakes and allows the user to correct them.
            </summary>
            <remarks>
            This dialog is created and shown by the <see cref="T:C1.Win.C1SpellChecker.C1SpellChecker"/> component
            when you call the <see cref="M:C1.Win.C1SpellChecker.C1SpellChecker.CheckControl(C1.Win.C1SpellChecker.ISpellCheckableEditor)"/> method.
            </remarks>
        </member>
        <member name="M:C1.Win.C1SpellChecker.C1SpellDialog.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Win.C1SpellChecker.C1SpellDialog"/>.
            </summary>
        </member>
        <member name="M:C1.Win.C1SpellChecker.C1SpellDialog.Initialize(C1.Win.C1SpellChecker.C1SpellChecker,C1.Win.C1SpellChecker.ISpellCheckableEditor,C1.Win.C1SpellChecker.CharRangeList)">
            <summary>
            Initializes the dialog to use the given parameters.
            </summary>
            <param name="spell"><see cref="T:C1.Win.C1SpellChecker.C1SpellChecker"/> to use for spelling.</param>
            <param name="editor"><see cref="T:C1.Win.C1SpellChecker.ISpellCheckableEditor"/> that contains the text to spell-check.</param>
            <param name="errors"><see cref="T:C1.Win.C1SpellChecker.CharRangeList"/> that contains the initial error list.</param>
        </member>
        <member name="M:C1.Win.C1SpellChecker.C1SpellDialog.OnErrorDisplayed(System.EventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1SpellChecker.C1SpellDialog.ErrorDisplayed"/> event.
            </summary>
            <param name="e"><see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Win.C1SpellChecker.C1SpellDialog.OnLoad(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Form.Load"/> event.
            </summary>
            <param name="e"><see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="F:C1.Win.C1SpellChecker.C1SpellDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1SpellChecker.C1SpellDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1SpellChecker.C1SpellDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:C1.Win.C1SpellChecker.C1SpellDialog.ErrorCount">
            <summary>
            Gets the total number of errors detected in the control.
            </summary>
        </member>
        <member name="P:C1.Win.C1SpellChecker.C1SpellDialog.Errors">
            <summary>
            Gets a <see cref="T:C1.Win.C1SpellChecker.CharRangeList"/> object with all the errors detected by the 
            <see cref="T:C1.Win.C1SpellChecker.C1SpellChecker"/> component that owns the dialog.
            </summary>
        </member>
        <member name="P:C1.Win.C1SpellChecker.C1SpellDialog.ErrorIndex">
            <summary>
            Gets or sets the index of the current error into the <see cref="P:C1.Win.C1SpellChecker.C1SpellDialog.Errors"/> list.
            </summary>
        </member>
        <member name="P:C1.Win.C1SpellChecker.C1SpellDialog.CurrentError">
            <summary>
            Gets the <see cref="T:C1.Win.C1SpellChecker.CharRange"/> object that represents the error currently 
            displayed in the dialog.
            </summary>
        </member>
        <member name="E:C1.Win.C1SpellChecker.C1SpellDialog.ErrorDisplayed">
            <summary>
            Occurs when the <see cref="T:C1.Win.C1SpellChecker.C1SpellDialog"/> displays an error.
            to the user.
            </summary>
            <remarks>
            You can use the <see cref="P:C1.Win.C1SpellChecker.C1SpellDialog.ErrorIndex"/> and <see cref="P:C1.Win.C1SpellChecker.C1SpellDialog.Errors"/> properties
            to display information about the error in a status bar.
            </remarks>
        </member>
        <member name="T:C1.Win.C1SpellChecker.ISpellParser">
            <summary>
            Interface that must be implemented by custom spell-check parsers.
            </summary>
        </member>
        <member name="M:C1.Win.C1SpellChecker.ISpellParser.GetNextWord(System.String,System.Int32,C1.Win.C1SpellChecker.IgnoreOptions,System.String)">
            <summary>
            Method that retrieves the next word to spell-check in a string.
            </summary>
            <param name="text">String that contains the text being spell-checked.</param>
            <param name="start">Position being checked within the <paramref name="text"/> string.</param>
            <param name="ignore"><see cref="T:C1.Win.C1SpellChecker.IgnoreOptions"/> that specifies types of words that should be ignored.</param>
            <param name="previousWord">Last word retrieved by the parser (used to detect duplicates).</param>
            <returns>A <see cref="T:C1.Win.C1SpellChecker.CharRange"/> object that represents the next word to be spell-checked, or 
            null if all the text has been spell-checked.</returns>
        </member>
        <member name="M:C1.Win.C1SpellChecker.ISpellParser.FilterWord(System.String)">
            <summary>
            Method that filters any unwanted characters out of a string to be checked.
            </summary>
            <param name="word">Raw text to be checked.</param>
            <returns>A modified word to be checked, null to skip checking this string, 
            or the same word if no filtering is required.</returns>
            <remarks>
            <para>This method is useful in custom parsers that should ignore specific characters
            or words.</para>
            <para>For example, a parser that parses strings with accelerator characters should
            filter out the ampersands before the word is checked.</para>
            </remarks>
        </member>
        <member name="T:C1.Win.C1SpellChecker.CharRange">
            <summary>
            Class that represents a character range within a string.
            This is used by the <see cref="T:C1.Win.C1SpellChecker.C1SpellChecker"/> control to represent the
            spelling mistakes found in text.
            </summary>
        </member>
        <member name="M:C1.Win.C1SpellChecker.CharRange.#ctor(System.String,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Win.C1SpellChecker.CharRange"/>.
            </summary>
            <param name="text">Text contained in the range.</param>
            <param name="start">Starting index of the range within the text.</param>
            <param name="duplicate">Whether the range is misspelled or just a duplicate.</param>
        </member>
        <member name="M:C1.Win.C1SpellChecker.CharRange.Equals(System.Object)">
            <summary>
            Determines whether this <see cref="T:C1.Win.C1SpellChecker.CharRange"/> is equal to another.
            </summary>
            <param name="obj"><see cref="T:C1.Win.C1SpellChecker.CharRange"/> to compare to this one.</param>
            <returns>True if both objects contain the same word at the same position.</returns>
        </member>
        <member name="M:C1.Win.C1SpellChecker.CharRange.GetHashCode">
            <summary>
            Serves as a hash function for the <see cref="T:C1.Win.C1SpellChecker.CharRange"/> type.
            </summary>
            <returns>A hash code for this <see cref="T:C1.Win.C1SpellChecker.CharRange"/>.</returns>
        </member>
        <member name="M:C1.Win.C1SpellChecker.CharRange.ExpandOverWhitespace(System.String,C1.Win.C1SpellChecker.CharRange)">
            <summary>
            Extends a <see cref="T:C1.Win.C1SpellChecker.CharRange"/> over whitespace.
            </summary>
            <param name="text">String that contains the <see cref="T:C1.Win.C1SpellChecker.CharRange"/>.</param>
            <param name="error"><see cref="T:C1.Win.C1SpellChecker.CharRange"/> that will be expanded.</param>
            <returns>Expanded <see cref="T:C1.Win.C1SpellChecker.CharRange"/>.</returns>
            <remarks>
            <para>The method returns a new <see cref="T:C1.Win.C1SpellChecker.CharRange"/> object that includes the original <paramref name="error"/>
            plus any whitespace that immediately follows it. If there is no whitespace after the original <paramref name="error"/>,
            then the returned value is extended to include any whitespace that precedes the original <paramref name="error"/>.</para>
            <para>This method is used to extend editor selections before deleting duplicate words.</para>
            </remarks>
        </member>
        <member name="M:C1.Win.C1SpellChecker.CharRange.IsWordCharacter(System.Char)">
            <summary>
            Determines whether a character is spell-checkable.
            </summary>
            <param name="c">Character to test.</param>
            <returns>True if the character is spell-checkable, false otherwise.</returns>
            <remarks>This method returns true for letters, digits, underscores, and single quotes.</remarks>
        </member>
        <member name="M:C1.Win.C1SpellChecker.CharRange.GetNextWord(System.String,System.Int32,C1.Win.C1SpellChecker.IgnoreOptions,System.String)">
            <summary>
            Gets the next word in a string, starting from a given position.
            </summary>
            <param name="text">String that contains the text.</param>
            <param name="start">Starting position where to look for a word.</param>
            <param name="ignore"><see cref="T:C1.Win.C1SpellChecker.IgnoreOptions"/> that determines words to ignore.</param>
            <param name="previousWord">Previous word (used to detect duplicates).</param>
            <returns>A <see cref="T:C1.Win.C1SpellChecker.CharRange"/> object that contains the next word in the string,
            or null if there are no more words in the string.</returns>
        </member>
        <member name="M:C1.Win.C1SpellChecker.CharRange.GetWordAt(System.String,System.Int32,C1.Win.C1SpellChecker.IgnoreOptions)">
            <summary>
            Gets the word at a given position in the string.
            </summary>
            <param name="text">String that contains the text.</param>
            <param name="pos">Position where to look for a word.</param>
            <param name="ignore"><see cref="T:C1.Win.C1SpellChecker.IgnoreOptions"/> that determines words to ignore.</param>
            <returns>A <see cref="T:C1.Win.C1SpellChecker.CharRange"/> object that contains the word at the specified
            position in the string, or null if there are no more words at the specified position.</returns>
        </member>
        <member name="P:C1.Win.C1SpellChecker.CharRange.Text">
            <summary>
            Gets the string represented by this <see cref="T:C1.Win.C1SpellChecker.CharRange"/>.
            </summary>
        </member>
        <member name="P:C1.Win.C1SpellChecker.CharRange.Start">
            <summary>
            Gets the starting index of the string represented by this <see cref="T:C1.Win.C1SpellChecker.CharRange"/> within the text.
            </summary>
        </member>
        <member name="P:C1.Win.C1SpellChecker.CharRange.Length">
            <summary>
            Gets the length of the string represented by this <see cref="T:C1.Win.C1SpellChecker.CharRange"/>.
            </summary>
        </member>
        <member name="P:C1.Win.C1SpellChecker.CharRange.End">
            <summary>
            Gets the end index of the string represented by this <see cref="T:C1.Win.C1SpellChecker.CharRange"/>.
            </summary>
        </member>
        <member name="P:C1.Win.C1SpellChecker.CharRange.Duplicate">
            <summary>
            Gets whether this <see cref="T:C1.Win.C1SpellChecker.CharRange"/> contains the same string as the previous one.
            </summary>
        </member>
        <member name="T:C1.Win.C1SpellChecker.CharRangeList">
            <summary>
            List of <see cref="T:C1.Win.C1SpellChecker.CharRange"/> objects.
            </summary>
        </member>
        <member name="M:C1.Win.C1SpellChecker.CharRangeList.Add(System.String,System.Int32,System.Boolean)">
            <summary>
            Adds a new <see cref="T:C1.Win.C1SpellChecker.CharRange"/> to the list.
            </summary>
            <param name="word">Word to add to the list.</param>
            <param name="start">Starting index of the character range within the text.</param>
            <param name="duplicate">Whether the range is a duplicate of the previous range in the text.</param>
        </member>
        <member name="M:C1.Win.C1SpellChecker.CharRangeList.GetRangeFromPosition(System.Int32)">
            <summary>
            Gets the <see cref="T:C1.Win.C1SpellChecker.CharRange"/> that contains a specified position within the text.
            </summary>
            <param name="charPosition">Position within the text.</param>
            <returns>A <see cref="T:C1.Win.C1SpellChecker.CharRange"/> that contains the specified position,
            or null if there is no error at the specified position.</returns>
        </member>
        <member name="M:C1.Win.C1SpellChecker.CharRangeList.GetRangeIndexFromPosition(System.Int32)">
            <summary>
            Gets the index of the <see cref="T:C1.Win.C1SpellChecker.CharRange"/> that contains the specified position within the text.
            </summary>
            <param name="charPosition">Position within the text.</param>
            <returns>Index of the <see cref="T:C1.Win.C1SpellChecker.CharRange"/> in the list that contains the specified position,
            or -1 if there is no error at the specified position.</returns>
        </member>
        <member name="M:C1.Win.C1SpellChecker.CharRangeList.Equals(System.Object)">
            <summary>
            Determines whether the given <see cref="T:C1.Win.C1SpellChecker.CharRangeList"/> is equal to this one.
            </summary>
            <param name="obj"><see cref="T:C1.Win.C1SpellChecker.CharRangeList"/> to compare to this one.</param>
            <returns>True if both objects contain the same members.</returns>
        </member>
        <member name="M:C1.Win.C1SpellChecker.CharRangeList.GetHashCode">
            <summary>
            Serves as a hash function for the <see cref="T:C1.Win.C1SpellChecker.CharRangeList"/> type.
            </summary>
            <returns>A hash code for this <see cref="T:C1.Win.C1SpellChecker.CharRangeList"/>.</returns>
        </member>
        <member name="T:C1.Win.C1SpellChecker.SpellMenu">
            <summary>
            ContextMenuStrip used to suggest alternatives for misspelled words.
            </summary>
        </member>
        <member name="T:C1.Win.C1SpellChecker.IgnoreOptions">
            <summary>
            Specifies flags that determine whether words should be ignored during spell-checking.
            </summary>
        </member>
        <member name="F:C1.Win.C1SpellChecker.IgnoreOptions.None">
            <summary>
            Do not ignore any words.
            </summary>
        </member>
        <member name="F:C1.Win.C1SpellChecker.IgnoreOptions.Numbers">
            <summary>
            Ignore words that contain numbers (digits).
            </summary>
        </member>
        <member name="F:C1.Win.C1SpellChecker.IgnoreOptions.UpperCase">
            <summary>
            Ignore words that are all uppercase.
            </summary>
        </member>
        <member name="F:C1.Win.C1SpellChecker.IgnoreOptions.MixedCase">
            <summary>
            Ignore words that contain a mix of uppercase and lowercase characters, except
            when there is a single uppercase at the start (for example, "Lowercase" would 
            not be ignored, but "LowerCase" and "lowerCase" would).
            </summary>
        </member>
        <member name="F:C1.Win.C1SpellChecker.IgnoreOptions.Urls">
            <summary>
            Ignore words that look like URLs or file names.
            </summary>
        </member>
        <member name="F:C1.Win.C1SpellChecker.IgnoreOptions.HtmlTags">
            <summary>
            Ignore text in HTML/XML tags.
            </summary>
        </member>
        <member name="F:C1.Win.C1SpellChecker.IgnoreOptions.Default">
            <summary>
            Default setting: ignores numbers, mixed case, URLs, and HTML tags.
            </summary>
        </member>
        <member name="F:C1.Win.C1SpellChecker.IgnoreOptions.All">
            <summary>
            Ignores numbers, mixed case, URLs, HTML tags, and uppercase.
            </summary>
        </member>
        <member name="T:C1.Win.C1SpellChecker.DialogLanguage">
            <summary>
            Specifies the language to be used when displaying the built-in 
            spell dialog (see <see cref="T:C1.Win.C1SpellChecker.C1SpellDialog"/>) and the 
            spell commands in context-sensitive menus.
            </summary>
        </member>
        <member name="F:C1.Win.C1SpellChecker.DialogLanguage.Automatic">
            <summary>
            Choose dialog language according to the current application culture.
            </summary>
        </member>
        <member name="F:C1.Win.C1SpellChecker.DialogLanguage.Dutch">
            <summary>
            Show Dutch dialog.
            </summary>
        </member>
        <member name="F:C1.Win.C1SpellChecker.DialogLanguage.English">
            <summary>
            Show English dialog.
            </summary>
        </member>
        <member name="F:C1.Win.C1SpellChecker.DialogLanguage.French">
            <summary>
            Show French dialog.
            </summary>
        </member>
        <member name="F:C1.Win.C1SpellChecker.DialogLanguage.German">
            <summary>
            Show German dialog.
            </summary>
        </member>
        <member name="F:C1.Win.C1SpellChecker.DialogLanguage.Italian">
            <summary>
            Show Italian dialog.
            </summary>
        </member>
        <member name="F:C1.Win.C1SpellChecker.DialogLanguage.Portuguese">
            <summary>
            Show Portuguese dialog.
            </summary>
        </member>
        <member name="F:C1.Win.C1SpellChecker.DialogLanguage.Spanish">
            <summary>
            Show Spanish dialog.
            </summary>
        </member>
        <member name="F:C1.Win.C1SpellChecker.DialogLanguage.Russian">
            <summary>
            Show Russian dialog.
            </summary>
        </member>
        <member name="F:C1.Win.C1SpellChecker.DialogLanguage.Swedish">
            <summary>
            Show Swedish dialog.
            </summary>
        </member>
        <member name="F:C1.Win.C1SpellChecker.DialogLanguage.Norwegian">
            <summary>
            Show Norwegian dialog.
            </summary>
        </member>
        <member name="F:C1.Win.C1SpellChecker.DialogLanguage.Danish">
            <summary>
            Show Danish dialog.
            </summary>
        </member>
        <member name="F:C1.Win.C1SpellChecker.DialogLanguage.Japanese">
            <summary>
            Show Japanese dialog.
            </summary>
        </member>
        <member name="F:C1.Win.C1SpellChecker.DialogLanguage.Chinese">
            <summary>
            Show Chinese dialog.
            </summary>
        </member>
        <member name="F:C1.Win.C1SpellChecker.DialogLanguage.Korean">
            <summary>
            Show Korean dialog.
            </summary>
        </member>
        <member name="T:C1.Win.C1SpellChecker.SpellOptions">
            <summary>
            Class that contains spelling options including words to ignore, whether to show suggestions in
            a spell context menu, etc.
            </summary>
        </member>
        <member name="M:C1.Win.C1SpellChecker.SpellOptions.ToString">
            <summary>
            Gets a string representation of this object.
            </summary>
            <returns>A string representation of this object.</returns>
        </member>
        <member name="P:C1.Win.C1SpellChecker.SpellOptions.ShowSuggestionsInContextMenu">
            <summary>
            Gets or sets whether the spell-checker should show spelling suggestions in the 
            <see cref="T:System.Windows.Forms.ContextMenuStrip"/> associated with the 
            editor being monitored by this <see cref="T:C1.Win.C1SpellChecker.C1SpellChecker"/>.
            </summary>
            <remarks>
            You can determine how many suggestions should be displayed in the context menu using the 
            <see cref="P:C1.Win.C1SpellChecker.SpellOptions.MaxSuggestionsInContextMenu"/> property.
            </remarks>
        </member>
        <member name="P:C1.Win.C1SpellChecker.SpellOptions.MaxSuggestionsInContextMenu">
            <summary>
            Gets or sets the maximum number of spelling suggestions to show in the editor's context menu.
            </summary>
            <remarks>
            The spelling context menu is displayed only if the <see cref="P:C1.Win.C1SpellChecker.SpellOptions.ShowSuggestionsInContextMenu"/> property is set to true.
            </remarks>
        </member>
        <member name="P:C1.Win.C1SpellChecker.SpellOptions.Ignore">
            <summary>
            Gets or sets types of words to ignore during the spell-check.
            </summary>
        </member>
        <member name="P:C1.Win.C1SpellChecker.SpellOptions.ActiveSpellingEnabled">
            <summary>
            Gets or sets whether active (as-you-type) spell-checking is enabled.
            </summary>
            <remarks>
            <para>This property allows you to temporarily turn off active spell-checking for all
            connected editors.</para>
            <para>To turn active spell-checking on or off for specific editors, use the
            <see cref="M:C1.Win.C1SpellChecker.C1SpellChecker.SetActiveSpellChecking(C1.Win.C1SpellChecker.ISpellCheckableRichEditor,System.Boolean)"/> method.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1SpellChecker.SpellOptions.UnderlineColor">
            <summary>
            Gets or sets the color of the wavy underlines drawn under misspelled words.
            </summary>
        </member>
        <member name="P:C1.Win.C1SpellChecker.SpellOptions.DialogLanguage">
            <summary>
            Gets or sets the <see cref="P:C1.Win.C1SpellChecker.SpellOptions.DialogLanguage"/> used when displaying the built-in spell dialog.
            </summary>
            <remarks>
            <para>The dialog language does not affect spelling. To change the language used for spelling, use
            the <see cref="P:C1.Win.C1SpellChecker.C1SpellChecker.MainDictionary"/> property to select a different spelling dictionary.</para>
            <para>By default, the built-in spell dialog (<see cref="T:C1.Win.C1SpellChecker.C1SpellDialog"/>) is displayed in the
            language specified by the current culture. If the current culture specifies a language that is not
            available, then the dialog will be displayed in English.</para>
            <para>See the <see cref="P:C1.Win.C1SpellChecker.SpellOptions.DialogLanguage"/> enumeration for a list of supported dialog languages.</para>
            </remarks>
        </member>
        <member name="T:C1.Win.C1SpellChecker.FlagEditor">
            <summary>
            <see cref="T:System.Drawing.Design.UITypeEditor"/> that can be used to edit enumerations with a <b>Flags</b> attribute.
            </summary>
            <remarks>
            Shows a checked list box with one entry per flag, users can check any combination.
            </remarks>
        </member>
        <member name="T:C1.Win.C1SpellChecker.SuggestionBuilder">
            <summary>
            Special chars:
                en:    á   èéê   ïñó ö    ü
                es:    á    é  í  ñó    ú ü
                fr:   àáâäçèéêëíîï óôö ù ûü
                de: ß à âä  éê    ñ  ö    ü
                pt :  àáâ çèéê í   óô õ ú ü
                ALL: åàáâäçèéêëíîïñóôöõùúûü
            
            Start with alpha + '
            if not enough, try ALL
            </summary>
        </member>
        <member name="T:C1.Win.C1SpellChecker.UserDictionary">
            <summary>
            Class that contains a list of additional words and methods for managing the list.
            </summary>
            <remarks>
            This class is used to store user dictionaries. It provides methods for adding and 
            removing words, as well as saving the dictionary.
            </remarks>
        </member>
        <member name="M:C1.Win.C1SpellChecker.UserDictionary.AddWord(System.String)">
            <summary>
            Adds a word to the dictionary.
            </summary>
            <param name="word">Word to add to the dictionary.</param>
            <returns>True if the word was added to the dictionary, false if it was already present.</returns>
        </member>
        <member name="M:C1.Win.C1SpellChecker.UserDictionary.RemoveWord(System.String)">
            <summary>
            Removes a word from the dictionary.
            </summary>
            <param name="word">Word to remove from the dictionary.</param>
            <returns>True if the word was removed from the dictionary, false if it was not found.</returns>
        </member>
        <member name="M:C1.Win.C1SpellChecker.UserDictionary.Clear">
            <summary>
            Clears the dictionary removing all words in it.
            </summary>
        </member>
        <member name="M:C1.Win.C1SpellChecker.UserDictionary.Save">
            <summary>
            Saves the dictionary back to a file.
            </summary>
            <returns>True in case of success, false otherwise.</returns>
            <remarks>If the dictionary cannot be saved, the reason is stored in the <see cref="T:System.Exception"/> property.</remarks>
        </member>
        <member name="M:C1.Win.C1SpellChecker.UserDictionary.Load">
            <summary>
            Loads the dictionary from a file.
            </summary>
            <returns>True if the dictionary was loaded successfully, false otherwise.</returns>
        </member>
        <member name="M:C1.Win.C1SpellChecker.UserDictionary.Contains(System.String)">
            <summary>
            Checks whether the dictionary contains a given word.
            </summary>
            <param name="word">Word to lookup.</param>
            <returns>True if the dictionary contains the word, false otherwise.</returns>
        </member>
        <member name="M:C1.Win.C1SpellChecker.UserDictionary.GetFileName(System.Boolean)">
            <summary>
            Gets the fully qualified name of the file that contains the user dictionary.
            </summary>
            <param name="mustExist">Whether to return a filename even if the file doesn't exist.</param>
            <returns>A complete file name which is guaranteed to exist, or an empty
            string if the file name was not specified or could not be found.</returns>
            <remarks>
            If the path is not specified, the component looks for it in the local user application
            data path (a location that supports read-write operations).
            </remarks>
        </member>
        <member name="P:C1.Win.C1SpellChecker.UserDictionary.FileName">
            <summary>
            Gets or sets the name of the file that contains the dictionary.
            </summary>
        </member>
        <member name="P:C1.Win.C1SpellChecker.UserDictionary.Words">
            <summary>
            Gets or sets an array with all the words in the user dictionary.
            </summary>
            <remarks>
            Setting the word list automatically saves the dictionary.
            </remarks>
        </member>
        <member name="T:C1.Win.C1SpellChecker.UserDictionaryEntries">
            <summary>
            DictionaryEntries is a dictionary that associates:
              key: hash codes for lower case strings
              value: bytes (0 for lower-case entry, 1 for upper-case)
            </summary>
        </member>
        <member name="M:C1.Win.C1SpellChecker.UserDictionaryEntries.Add(System.String)">
            <summary>
            Adds a word to the list.
            </summary>
            <param name="word">Word to add to the list.</param>
        </member>
        <member name="M:C1.Win.C1SpellChecker.UserDictionaryEntries.Contains(System.String)">
            <summary>
            Checks whether the dictionary contains a given word.
            </summary>
            <param name="word">Word to lookup.</param>
            <returns>True if the dictionary contains the word, false otherwise.</returns>
        </member>
        <member name="M:C1.Win.C1SpellChecker.UserDictionaryEntries.Load(C1.Win.C1SpellChecker.UserDictionary,System.String,System.String)">
            <summary>
            Loads the word list from a UTF-8 encoded text file.
            </summary>
            <param name="dictionary"><see cref="T:C1.Win.C1SpellChecker.SpellDictionary"/> that owns the word list.</param>
            <param name="fileName">Fully qualified name of the UTF-8 file that contains the word list.</param>
            <param name="password">Not used.</param>
        </member>
        <member name="M:C1.Win.C1SpellChecker.UserDictionaryEntries.Save(System.String)">
            <summary>
            Saves the word list to an UTF-8 encoded file.
            </summary>
            <param name="fileName">Fully qualified name of the file to save</param>
        </member>
        <member name="M:C1.Win.C1SpellChecker.ErrorContextMenuArgs.#ctor(C1.Win.C1SpellChecker.WebError,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Win.C1SpellChecker.ErrorContextMenuArgs"/>.
            </summary>
            <param name="error">Error that user has right-clicked.</param>
            <param name="x">x coordinate.</param>
            <param name="y">y coordinate.</param>
        </member>
        <member name="T:C1.Win.C1SpellChecker.Interfaces.DWebBrowserEvents2">
            <summary>
            This interface is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1SpellChecker.Interfaces.tagOLECONTF.OLECONTF_EMBEDDINGS">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1SpellChecker.Interfaces.tagOLECONTF.OLECONTF_LINKS">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1SpellChecker.Interfaces.tagOLECONTF.OLECONTF_OTHERS">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1SpellChecker.Interfaces.tagOLECONTF.OLECONTF_ONLYUSER">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1SpellChecker.Interfaces.tagOLECONTF.OLECONTF_ONLYIFRUNNING">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1SpellChecker.Interfaces.tagRECT">
            <summary>
            This type is for internal use only.
            </summary>
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1SpellChecker.Interfaces.tagRECT.Left">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1SpellChecker.Interfaces.tagRECT.Top">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1SpellChecker.Interfaces.tagRECT.Right">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1SpellChecker.Interfaces.tagRECT.Bottom">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1SpellChecker.Interfaces.tagRECT.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1SpellChecker.Interfaces._MARKUP_CONTEXT_TYPE">
            <summary>
            This type is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1SpellChecker.Interfaces._MARKUP_CONTEXT_TYPE.CONTEXT_TYPE_None">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1SpellChecker.Interfaces._MARKUP_CONTEXT_TYPE.CONTEXT_TYPE_Text">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1SpellChecker.Interfaces._MARKUP_CONTEXT_TYPE.CONTEXT_TYPE_EnterScope">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1SpellChecker.Interfaces._MARKUP_CONTEXT_TYPE.CONTEXT_TYPE_ExitScope">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1SpellChecker.Interfaces._MARKUP_CONTEXT_TYPE.CONTEXT_TYPE_NoScope">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1SpellChecker.Interfaces._MARKUP_CONTEXT_TYPE.MARKUP_CONTEXT_TYPE_Max">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1SpellChecker.SpellBrowserMonitor">
            <summary>
            Helper class that provides spell checking in controls of WebBrowser type.
            </summary>
        </member>
        <member name="T:C1.Win.C1SpellChecker.SpellHtmlDocumentMonitor">
            <summary>
            Helper class that provides spell checking in controls of WebBrowser type.
            </summary>
        </member>
        <member name="T:C1.Win.C1SpellChecker.SpellWebMenu">
            <summary>
            ContextMenuStrip used to suggest alternatives for misspelled words.
            </summary>
            <remarks>
            Substantially equal to SpellMenu in SpellMenuBuilder.cs.
            </remarks>
        </member>
        <member name="T:C1.Win.C1SpellChecker.WebBrowserChecker">
            <summary>
            Implements ISpellCheckableEditor for controls that support IWebBrowser2.
            </summary>
        </member>
        <member name="T:C1.Win.C1SpellChecker.WebDocumentWrapper">
            <summary>
            Provides ISpellCheckableEditor interface for a control working via IHTMLDocument2
            </summary>
        </member>
        <member name="T:C1.Win.C1SpellChecker.WordList">
            <summary>
            Keyed list of words to ignore while spell-checking.
            </summary>
        </member>
        <member name="M:C1.Win.C1SpellChecker.WordList.ClearItems">
            <summary>
            Removes all elements from the list.
            </summary>
        </member>
        <member name="M:C1.Win.C1SpellChecker.WordList.InsertItem(System.Int32,System.String)">
            <summary>
            Inserts a word into the list at the specified index.
            </summary>
            <param name="index">The zero-based <paramref name="index"/> at which the new item should be inserted.</param>
            <param name="item">The item to insert into the list.</param>
            <remarks>
            Duplicate items are automatically discarded; the list will contain at most one copy of any given string.
            </remarks>
        </member>
        <member name="M:C1.Win.C1SpellChecker.WordList.RemoveItem(System.Int32)">
            <summary>
            Removes the word at the specified index from the collection.
            </summary>
            <param name="index">The zero-based <paramref name="index"/> at which the new item should be removed.</param>
        </member>
        <member name="M:C1.Win.C1SpellChecker.WordList.SetItem(System.Int32,System.String)">
            <summary>
            Not supported.
            </summary>
            <param name="index">Index of the element to replace.</param>
            <param name="item">Element to replace.</param>
        </member>
        <member name="M:C1.Win.C1SpellChecker.WordList.GetKeyForItem(System.String)">
            <summary>
            Obtains a key for the given element. 
            </summary>
            <param name="item">The element from which to obtain the key.</param>
            <returns>The key for the specified element.</returns>
        </member>
        <member name="T:C1.Win.C1SpellChecker.WordDictionary">
            <summary>
            Dictionary of words and their replacements.
            </summary>
        </member>
    </members>
</doc>
