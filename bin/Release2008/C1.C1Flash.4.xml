<?xml version="1.0"?>
<doc>
  <assembly>
    <name>C1.C1Flash.4</name>
  </assembly>
  <members>
    <member name="T:C1.C1Flash.Base.FActionEndDrag">
      <summary>
            An action that ends drag operation.
            </summary>
    </member>
    <member name="T:C1.C1Flash.Base.FActionRecord">
      <summary>
            A general class specifying an action to be performed by the Flash player.
            </summary>
    </member>
    <member name="M:C1.C1Flash.Base.FActionRecord.#ctor">
      <summary>
            Initialize a FActionRecord object.
            </summary>
    </member>
    <member name="M:C1.C1Flash.Base.FActionRecord.WriteToSWFStream(C1.C1Flash.Base.FSWFStream)">
      <summary>
            A general function that will write its object out to a FSWFStream
            </summary>
      <param name="stream">FSWFStream to write.</param>
    </member>
    <member name="M:C1.C1Flash.Base.FActionEndDrag.#ctor">
      <summary>
            Initialize a FActionEndDrag object.
            </summary>
    </member>
    <member name="M:C1.C1Flash.Base.FActionEndDrag.WriteToSWFStream(C1.C1Flash.Base.FSWFStream)">
      <summary>
            Writes the object out to a FSWFStream
            </summary>
      <param name="stream">FSWFStream to write.</param>
    </member>
    <member name="T:C1.C1Flash.Base.FActionGetProperty">
      <summary>
            An action that gets a movie property 
            </summary>
    </member>
    <member name="M:C1.C1Flash.Base.FActionGetProperty.#ctor">
      <summary>
            Initialize a FActionGetProperty object.
            </summary>
    </member>
    <member name="M:C1.C1Flash.Base.FActionGetProperty.WriteToSWFStream(C1.C1Flash.Base.FSWFStream)">
      <summary>
            Writes the object out to a FSWFStream
            </summary>
      <param name="stream">FSWFStream to write.</param>
    </member>
    <member name="T:C1.C1Flash.Base.FActionGetURL">
      <summary>
            An action that opens the given URL in a given window
            </summary>
    </member>
    <member name="M:C1.C1Flash.Base.FActionGetURL.#ctor(System.String)">
      <summary>
            Initialize a FActionGetURL object with the target url address.
            </summary>
      <param name="url">Url address.</param>
    </member>
    <member name="M:C1.C1Flash.Base.FActionGetURL.#ctor(System.String,System.String)">
      <summary>
            Initialize a FActionGetURL object with the target url address and window.
            </summary>
      <param name="url">Url address.</param>
      <param name="window">Window to open the url.</param>
    </member>
    <member name="M:C1.C1Flash.Base.FActionGetURL.WriteToSWFStream(C1.C1Flash.Base.FSWFStream)">
      <summary>
            Writes the object out to a FSWFStream
            </summary>
      <param name="stream">FSWFStream to write.</param>
    </member>
    <member name="T:C1.C1Flash.Base.FActionGetURL2">
      <summary>
            An action that opens a URL in an indicated window (stack based)
            </summary>
    </member>
    <!-- Badly formed XML comment ignored for member "M:C1.C1Flash.Base.FActionGetURL2.#ctor(C1.C1Flash.Base.FActionGetURL2.SendMethod,System.Boolean,System.Boolean)" -->
    <member name="M:C1.C1Flash.Base.FActionGetURL2.WriteToSWFStream(C1.C1Flash.Base.FSWFStream)">
      <summary>
            Writes the object out to a FSWFStream
            </summary>
      <param name="stream">FSWFStream to write.</param>
    </member>
    <member name="T:C1.C1Flash.Base.FActionGetURL2.SendMethod">
      <summary>
            Method to use for the HTTP request.
            </summary>
    </member>
    <member name="F:C1.C1Flash.Base.FActionGetURL2.SendMethod.None">
      <summary>
            Indicates that this is not a form request, so the movie clip's	variables should not be encoded and submitted.
            </summary>
    </member>
    <member name="F:C1.C1Flash.Base.FActionGetURL2.SendMethod.GET">
      <summary>
            A HTTP GET request.
            </summary>
    </member>
    <member name="F:C1.C1Flash.Base.FActionGetURL2.SendMethod.POST">
      <summary>
            A HTTP POST request.
            </summary>
    </member>
    <member name="T:C1.C1Flash.Base.FActionGetVariable">
      <summary>
            An action that gets a variable's value.
            </summary>
    </member>
    <member name="M:C1.C1Flash.Base.FActionGetVariable.#ctor">
      <summary>
            Initialize a FActionGetVariable object.
            </summary>
    </member>
    <member name="M:C1.C1Flash.Base.FActionGetVariable.WriteToSWFStream(C1.C1Flash.Base.FSWFStream)">
      <summary>
            Writes the object out to a FSWFStream
            </summary>
      <param name="stream">FSWFStream to write.</param>
    </member>
    <member name="T:C1.C1Flash.Base.FActionGotoFrame">
      <summary>
            An action that goes to the specified frame.
            </summary>
    </member>
    <member name="M:C1.C1Flash.Base.FActionGotoFrame.#ctor(System.UInt16)">
      <summary>
            Initialize a FActionGotoFrame object.
            </summary>
      <param name="frameIndex">Index of frame to go.</param>
    </member>
    <member name="M:C1.C1Flash.Base.FActionGotoFrame.WriteToSWFStream(C1.C1Flash.Base.FSWFStream)">
      <summary>
            Writes the object out to a FSWFStream
            </summary>
      <param name="stream">FSWFStream to write.</param>
    </member>
    <member name="T:C1.C1Flash.Base.FActionGotoFrame2">
      <summary>
            An action that goes to a identified frame (stack based).
            </summary>
    </member>
    <member name="M:C1.C1Flash.Base.FActionGotoFrame2.#ctor(System.Boolean)">
      <summary>
            Initialize a FActionGotoFrame2 object.
            </summary>
      <param name="play">True to play the moive after jumping to the frame, false to stop.</param>
    </member>
    <member name="M:C1.C1Flash.Base.FActionGotoFrame2.WriteToSWFStream(C1.C1Flash.Base.FSWFStream)">
      <summary>
            Writes the object out to a FSWFStream
            </summary>
      <param name="stream">FSWFStream to write.</param>
    </member>
    <member name="T:C1.C1Flash.Base.FActionGotoLabel">
      <summary>
            An action that Instructs Flash Player to go to frame associated with the specified label.
            </summary>
    </member>
    <member name="M:C1.C1Flash.Base.FActionGotoLabel.#ctor(System.String)">
      <summary>
            Initialize a FActionGotoLabel object.
            </summary>
      <param name="label">The label of the target frame.</param>
      <remarks>
            A label can be attached to a frame with the CTFrameLabel tag.
            </remarks>
    </member>
    <member name="M:C1.C1Flash.Base.FActionGotoLabel.WriteToSWFStream(C1.C1Flash.Base.FSWFStream)">
      <summary>
            Writes the object out to a FSWFStream.
            </summary>
      <param name="stream">FSWFStream to write.</param>
    </member>
    <member name="T:C1.C1Flash.Base.FActionNextFrame">
      <summary>
            An action that goes to next frame.
            </summary>
    </member>
    <member name="M:C1.C1Flash.Base.FActionNextFrame.#ctor">
      <summary>
            Initialize a FActionNextFrame object.
            </summary>
    </member>
    <member name="M:C1.C1Flash.Base.FActionNextFrame.WriteToSWFStream(C1.C1Flash.Base.FSWFStream)">
      <summary>
            Writes the object out to a FSWFStream.
            </summary>
      <param name="stream">FSWFStream to write.</param>
    </member>
    <member name="T:C1.C1Flash.Base.FActionPlay">
      <summary>
            An action that starts playing the movie at the current frame.
            </summary>
    </member>
    <member name="M:C1.C1Flash.Base.FActionPlay.#ctor">
      <summary>
            Initialize a FActionPlay object.
            </summary>
    </member>
    <member name="M:C1.C1Flash.Base.FActionPlay.WriteToSWFStream(C1.C1Flash.Base.FSWFStream)">
      <summary>
            Writes the object out to a FSWFStream.
            </summary>
      <param name="stream">FSWFStream to write.</param>
    </member>
    <member name="T:C1.C1Flash.Base.FActionPop">
      <summary>
            An action that pops a value off the stack.
            </summary>
    </member>
    <member name="M:C1.C1Flash.Base.FActionPop.#ctor">
      <summary>
            Initialize a FActionStop object.
            </summary>
    </member>
    <member name="M:C1.C1Flash.Base.FActionPop.WriteToSWFStream(C1.C1Flash.Base.FSWFStream)">
      <summary>
            Writes the object out to a FSWFStream.
            </summary>
      <param name="stream">FSWFStream to write.</param>
    </member>
    <member name="T:C1.C1Flash.Base.FActionPrevFrame">
      <summary>
            An action that goes to the previous frame.
            </summary>
    </member>
    <member name="M:C1.C1Flash.Base.FActionPrevFrame.#ctor">
      <summary>
            Initialize a FActionPrevFrame object.
            </summary>
    </member>
    <member name="M:C1.C1Flash.Base.FActionPrevFrame.WriteToSWFStream(C1.C1Flash.Base.FSWFStream)">
      <summary>
            Writes the object out to a FSWFStream.
            </summary>
      <param name="stream">FSWFStream to write.</param>
    </member>
    <member name="T:C1.C1Flash.Base.FActionPush">
      <summary>
            An action that pushes a given value onto the stack.
            </summary>
    </member>
    <member name="M:C1.C1Flash.Base.FActionPush.#ctor(System.String)">
      <summary>
            Initialize a FActionPush object with specified string value to push.
            </summary>
      <param name="value">Null terminated character string to push.</param>
    </member>
    <member name="M:C1.C1Flash.Base.FActionPush.#ctor(System.Single)">
      <summary>
            Initialize a FActionPush object with specified number value to push.
            </summary>
      <param name="value">Float number value to push.</param>
    </member>
    <member name="M:C1.C1Flash.Base.FActionPush.#ctor(System.Boolean)">
      <summary>
            Initialize a FActionPush object with specified boolean value to push.
            </summary>
      <param name="value">Boolean value to push.</param>
    </member>
    <member name="M:C1.C1Flash.Base.FActionPush.#ctor(System.UInt32)">
      <summary>
            Initialize a FActionPush object with specified integer value to push.
            </summary>
      <param name="value">Integer value to push.</param>
    </member>
    <member name="M:C1.C1Flash.Base.FActionPush.WriteToSWFStream(C1.C1Flash.Base.FSWFStream)">
      <summary>
            Writes the object out to a FSWFStream.
            </summary>
      <param name="stream">FSWFStream to write.</param>
    </member>
    <member name="T:C1.C1Flash.Base.FActionSetProperty">
      <summary>
            An action that sets a movie property
            </summary>
      <remarks>
            1. pops value VALUE off stack
            2. pops value INDEX off stack
            3. pops value TARGET off stack
            4. sets property enumerated as INDEX in the movie clip TARGET to the value VALUE
            </remarks>
    </member>
    <member name="M:C1.C1Flash.Base.FActionSetProperty.#ctor">
      <summary>
            Initialize a FActionSetProperty object.
            </summary>
    </member>
    <member name="M:C1.C1Flash.Base.FActionSetProperty.WriteToSWFStream(C1.C1Flash.Base.FSWFStream)">
      <summary>
            Writes the object out to a FSWFStream.
            </summary>
      <param name="stream">FSWFStream to write.</param>
    </member>
    <member name="T:C1.C1Flash.Base.FActionSetTarget">
      <summary>
            An action that sets the context of action.
            </summary>
    </member>
    <member name="M:C1.C1Flash.Base.FActionSetTarget.#ctor(System.String)">
      <summary>
            Initialize a FActionSetTarget object.
            </summary>
      <param name="targetName">A string naming the target to set action context to</param>
    </member>
    <member name="M:C1.C1Flash.Base.FActionSetTarget.WriteToSWFStream(C1.C1Flash.Base.FSWFStream)">
      <summary>
            Writes the object out to a FSWFStream.
            </summary>
      <param name="stream">FSWFStream to write.</param>
    </member>
    <member name="T:C1.C1Flash.Base.FActionSetTarget2">
      <summary>
            An action that sets the context of action (stack based)
            </summary>
      <remarks>
            1. pops value TARGET off stack
            2. sets current context of action to object identified by TARGET
            </remarks>
    </member>
    <member name="M:C1.C1Flash.Base.FActionSetTarget2.#ctor">
      <summary>
            Initialize a FActionSetTarget2 object.
            </summary>
    </member>
    <member name="M:C1.C1Flash.Base.FActionSetTarget2.WriteToSWFStream(C1.C1Flash.Base.FSWFStream)">
      <summary>
            Writes the object out to a FSWFStream.
            </summary>
      <param name="stream">FSWFStream to write.</param>
    </member>
    <member name="T:C1.C1Flash.Base.FActionSetVariable">
      <summary>
            An action that sets a variable.
            </summary>
      <remarks>
            1. pops value VALUE off stack
            2. pops string NAME off stack
            3. sets NAME to VALUE in the current execution context
            </remarks>
    </member>
    <member name="M:C1.C1Flash.Base.FActionSetVariable.#ctor">
      <summary>
            Initialize a FActionSetVariable object.
            </summary>
    </member>
    <member name="M:C1.C1Flash.Base.FActionSetVariable.WriteToSWFStream(C1.C1Flash.Base.FSWFStream)">
      <summary>
            Writes the object out to a FSWFStream.
            </summary>
      <param name="stream">FSWFStream to write.</param>
    </member>
    <member name="T:C1.C1Flash.Base.FActionStartDrag">
      <summary>
            An action that starts dragging a movie clip.
            </summary>
      <remarks>
            1. pops value TARGET off stack
            2. pops LOCKCENTER off stack
            3. pops CONSTRAIN
            4. if CONSTRAIN is non-zero:
            	- pops y2
            	- pops x2
            	- pops y1
            	- pops x1
            5. starts dragging of movie clip identified by TARGET
            6. if LOCKCENTER is non-zero, the center of clip is locked to the mouse position, otherwise clip moves relative to starting mouse position
            7. if CONSTRAIN, draged clip is constrained coordinates x1, y1, x2, y2
            </remarks>
    </member>
    <member name="M:C1.C1Flash.Base.FActionStartDrag.#ctor">
      <summary>
            Initialize a FActionStartDrag object.
            </summary>
    </member>
    <member name="M:C1.C1Flash.Base.FActionStartDrag.WriteToSWFStream(C1.C1Flash.Base.FSWFStream)">
      <summary>
            Writes the object out to a FSWFStream.
            </summary>
      <param name="stream">FSWFStream to write.</param>
    </member>
    <member name="T:C1.C1Flash.Base.FActionStop">
      <summary>
            An action that stops movie play at the current frame
            </summary>
    </member>
    <member name="M:C1.C1Flash.Base.FActionStop.#ctor">
      <summary>
            Initialize a FActionStop object.
            </summary>
    </member>
    <member name="M:C1.C1Flash.Base.FActionStop.WriteToSWFStream(C1.C1Flash.Base.FSWFStream)">
      <summary>
            Writes the object out to a FSWFStream.
            </summary>
      <param name="stream">FSWFStream to write.</param>
    </member>
    <member name="T:C1.C1Flash.Base.FActionStopSounds">
      <summary>
            An action that stops playing all sounds in movie.
            </summary>
    </member>
    <member name="M:C1.C1Flash.Base.FActionStopSounds.#ctor">
      <summary>
            Initialize a FActionStopSounds object.
            </summary>
    </member>
    <member name="M:C1.C1Flash.Base.FActionStopSounds.WriteToSWFStream(C1.C1Flash.Base.FSWFStream)">
      <summary>
            Writes the object out to a FSWFStream.
            </summary>
      <param name="stream">FSWFStream to write.</param>
    </member>
    <member name="T:C1.C1Flash.Base.FActionToggleQuality">
      <summary>
            An action that toggles screen quality between high and low.
            </summary>
    </member>
    <member name="M:C1.C1Flash.Base.FActionToggleQuality.#ctor">
      <summary>
            Initialize a FActionToggleQuality object.
            </summary>
    </member>
    <member name="M:C1.C1Flash.Base.FActionToggleQuality.WriteToSWFStream(C1.C1Flash.Base.FSWFStream)">
      <summary>
            Writes the object out to a FSWFStream.
            </summary>
      <param name="stream">FSWFStream to write.</param>
    </member>
    <member name="T:C1.C1Flash.Base.FActionWaitForFrame">
      <summary>
            An action that waits for a specified frame, otherwise skips a specified number of actions.
            </summary>
    </member>
    <member name="M:C1.C1Flash.Base.FActionWaitForFrame.#ctor(System.UInt16,System.UInt16)">
      <summary>
            Initialize a FActionWaitForFrame object with specified frame index and skip count.
            </summary>
      <param name="frameIndex">Frame index.</param>
      <param name="skipCount">Count of frames to skip.</param>
    </member>
    <member name="M:C1.C1Flash.Base.FActionWaitForFrame.WriteToSWFStream(C1.C1Flash.Base.FSWFStream)">
      <summary>
            Writes the object out to a FSWFStream.
            </summary>
      <param name="stream">FSWFStream to write.</param>
    </member>
    <member name="T:C1.C1Flash.Base.FActionWaitForFrame2">
      <summary>
            An action that waits for a frame to be loaded.
            </summary>
      <remarks>
            1. pops value FRAME off stack
            2. frame is evaluated in the same manner as in FActionGotoFrame2
            3. if the frame identified by FRAME has been loaded, skip a specified number of actions following the current one
            </remarks>
    </member>
    <member name="M:C1.C1Flash.Base.FActionWaitForFrame2.#ctor(System.UInt16)">
      <summary>
            Initialize a FActionWaitForFrame2 object.
            </summary>
      <param name="skipCount">Count of frames to skip.</param>
    </member>
    <member name="M:C1.C1Flash.Base.FActionWaitForFrame2.WriteToSWFStream(C1.C1Flash.Base.FSWFStream)">
      <summary>
            Writes the object out to a FSWFStream.
            </summary>
      <param name="stream">FSWFStream to write.</param>
    </member>
    <member name="T:C1.C1Flash.IWebFlashSink">
      <summary>
            Interface C1WebFlash used to communicate with Flash Engines.
            </summary>
    </member>
    <member name="M:C1.C1Flash.IWebFlashSink.RenderToFile(System.String)">
      <summary>
            Renders the content to a specified file.
            </summary>
      <param name="fileName">Full path file name to render.</param>
    </member>
    <member name="M:C1.C1Flash.IWebFlashSink.RenderToStream(System.IO.MemoryStream)">
      <summary>
            Renders the content to a memory stream.
            </summary>
      <param name="memStream">Memory stream to render.</param>
    </member>
    <member name="T:C1.C1Flash.C1FlashCanvas">
      <summary>
            C1FlashCanvas is one of the main classes in the C1Flash library. This class is inherited from the <see cref="T:C1.C1Flash.FPage" /> class.
            </summary>
      <remarks>
        <para>
            A canvas is a drawing surface similar to that of the .NET Graphics class. 
            All the graphical elements after calling the drawing methods will be rendered to a single frame SWF document.
            </para>
        <para>
            The coordinate system used by C1FlashCanvas is based on logical pixel, with the origin located at the top left corner of the page. 
            You can retrieve the size of the canvas using the Width and Height property.
            </para>
      </remarks>
    </member>
    <member name="T:C1.C1Flash.FPage">
      <summary>
            A wrapper class that provides the drawing methods and properties similar to those used in the .NET Graphics class.
            </summary>
      <remarks>
        <para>
            All the drawing method calls will be translated to the SWF file format and applied to an individual flash frame. 
            If you know how to use the graphics class, you already know how to output graphical elements to a flash frame. 
            </para>
        <para>
            You cannot create an instance of FPage directly.
            </para>
      </remarks>
    </member>
    <member name="M:C1.C1Flash.FPage.DrawLine(System.Drawing.Pen,System.Drawing.Point,System.Drawing.Point)">
      <summary>
            Draws a line connecting the two points specified by coordinate pairs.
            </summary>
      <param name="pen">
        <see cref="T:System.Drawing.Pen" /> object that determines the color, width of the line.</param>
      <param name="point1">
        <see cref="T:System.Drawing.Point" /> structure that represents the first point to connect.</param>
      <param name="point2">
        <see cref="T:System.Drawing.Point" /> structure that represents the second point to connect.</param>
      <remarks>
        <para>
            The pen parameter is a regular <see cref="T:System.Drawing.Pen" /> object, which defines the width, color, and style of the line. 
            The system pens (e.g. Pens.Black, Pens.Red, etc) have a width of one point. 
            If you want to draw thinner or thicker lines, you have to create new <see cref="T:System.Drawing.Pen" /> objects.
            </para>
        <para>
            SWF file format has no native support for dashed or dotted line styles.
            A dashed line can be simulated by breaking up the path into a series of short lines. 
            All lines in SWF file format have rounded joins and end-caps.
            </para>
      </remarks>
      <example>
            The code below draws several lines using different pens:
            <code>
            C1FlashCanvas canvas = new C1FlashCanvas();
            // draw a line with system pen
            canvas.DrawLine(Pens.Green,  100, 100, 300, 100); 
            // create a thick blue pen
            Pen thickPen = new Pen(Color.Blue, 3); 
            canvas.DrawLine(thickPen, 100, 120, 300, 120); 
            // change the color and width
            thickPen.Color = Color.Red; 
            thickPen.Width = 6; 
            canvas.DrawLine(thickPen, 100, 140, 300, 140);
            canvas.RenderToFile(@"c:\temp\line.swf");
            </code></example>
    </member>
    <member name="M:C1.C1Flash.FPage.DrawLine(System.Drawing.Pen,System.Drawing.PointF,System.Drawing.PointF)">
      <summary>
            Draws a line connecting the two points specified by coordinate pairs.
            </summary>
      <param name="pen">
        <see cref="T:System.Drawing.Pen" /> object that determines the color, width of the line.</param>
      <param name="point1">
        <see cref="T:System.Drawing.PointF" /> structure that represents the first point to connect.</param>
      <param name="point2">
        <see cref="T:System.Drawing.PointF" /> structure that represents the second point to connect.</param>
      <remarks>
        <para>
            The pen parameter is a regular <see cref="T:System.Drawing.Pen" /> object, which defines the width, color, and style of the line. 
            The system pens (e.g. Pens.Black, Pens.Red, etc) have a width of one point. 
            If you want to draw thinner or thicker lines, you have to create new <see cref="T:System.Drawing.Pen" /> objects.
            </para>
        <para>
            SWF file format has no native support for dashed or dotted line styles.
            A dashed line can be simulated by breaking up the path into a series of short lines. 
            All lines in SWF file format have rounded joins and end-caps.
            </para>
      </remarks>
      <example>
            The code below draws several lines using different pens:
            <code>
            C1FlashCanvas canvas = new C1FlashCanvas();
            // draw a line with system pen
            canvas.DrawLine(Pens.Green,  100, 100, 300, 100); 
            // create a thick blue pen
            Pen thickPen = new Pen(Color.Blue, 3); 
            canvas.DrawLine(thickPen, 100, 120, 300, 120); 
            // change the color and width
            thickPen.Color = Color.Red; 
            thickPen.Width = 6; 
            canvas.DrawLine(thickPen, 100, 140, 300, 140);
            canvas.RenderToFile(@"c:\temp\line.swf");
            </code></example>
    </member>
    <member name="M:C1.C1Flash.FPage.DrawLine(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Draws a line connecting the two points specified by coordinate pairs.
            </summary>
      <param name="pen">
        <see cref="T:System.Drawing.Pen" /> object that determines the color, width of the line.</param>
      <param name="x1">x-coordinate of the first point.</param>
      <param name="y1">y-coordinate of the first point.</param>
      <param name="x2">x-coordinate of the second point.</param>
      <param name="y2">y-coordinate of the second point.</param>
      <remarks>
        <para>
            The pen parameter is a regular <see cref="T:System.Drawing.Pen" /> object, which defines the width, color, and style of the line. 
            The system pens (e.g. Pens.Black, Pens.Red, etc) have a width of one point. 
            If you want to draw thinner or thicker lines, you have to create new <see cref="T:System.Drawing.Pen" /> objects.
            </para>
        <para>
            SWF file format has no native support for dashed or dotted line styles.
            A dashed line can be simulated by breaking up the path into a series of short lines. 
            All lines in SWF file format have rounded joins and end-caps.
            </para>
      </remarks>
      <example>
            The code below draws several lines using different pens:
            <code>
            C1FlashCanvas canvas = new C1FlashCanvas();
            // draw a line with system pen
            canvas.DrawLine(Pens.Green,  100, 100, 300, 100); 
            // create a thick blue pen
            Pen thickPen = new Pen(Color.Blue, 3); 
            canvas.DrawLine(thickPen, 100, 120, 300, 120); 
            // change the color and width
            thickPen.Color = Color.Red; 
            thickPen.Width = 6; 
            canvas.DrawLine(thickPen, 100, 140, 300, 140);
            canvas.RenderToFile(@"c:\temp\line.swf");
            </code></example>
    </member>
    <member name="M:C1.C1Flash.FPage.DrawLine(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Draws a line connecting the two points specified by coordinate pairs.
            </summary>
      <param name="pen">
        <see cref="T:System.Drawing.Pen" /> object that determines the color, width of the line.</param>
      <param name="x1">x-coordinate of the first point.</param>
      <param name="y1">y-coordinate of the first point.</param>
      <param name="x2">x-coordinate of the second point.</param>
      <param name="y2">y-coordinate of the second point.</param>
      <remarks>
        <para>
            The pen parameter is a regular <see cref="T:System.Drawing.Pen" /> object, which defines the width, color, and style of the line. 
            The system pens (e.g. Pens.Black, Pens.Red, etc) have a width of one point. 
            If you want to draw thinner or thicker lines, you have to create new <see cref="T:System.Drawing.Pen" /> objects.
            </para>
        <para>
            SWF file format has no native support for dashed or dotted line styles.
            A dashed line can be simulated by breaking up the path into a series of short lines. 
            All lines in SWF file format have rounded joins and end-caps.
            </para>
      </remarks>
      <example>
            The code below draws several lines using different pens:
            <code>
            C1FlashCanvas canvas = new C1FlashCanvas();
            // draw a line with system pen
            canvas.DrawLine(Pens.Green,  100, 100, 300, 100); 
            // create a thick blue pen
            Pen thickPen = new Pen(Color.Blue, 3); 
            canvas.DrawLine(thickPen, 100, 120, 300, 120); 
            // change the color and width
            thickPen.Color = Color.Red; 
            thickPen.Width = 6; 
            canvas.DrawLine(thickPen, 100, 140, 300, 140);
            canvas.RenderToFile(@"c:\temp\line.swf");
            </code></example>
    </member>
    <member name="M:C1.C1Flash.FPage.DrawLines(System.Drawing.Pen,System.Drawing.Point[])">
      <summary>
            Draws a series of line segments that connect an array of <see cref="T:System.Drawing.Point" /> structures.
            </summary>
      <param name="pen">
        <see cref="T:System.Drawing.Pen" /> object that determines the color, width of the line segments.</param>
      <param name="points">Array of <see cref="T:System.Drawing.Point" /> structures that represent the points to connect.</param>
      <remarks>
        <para>
            The pen parameter is a regular <see cref="T:System.Drawing.Pen" /> object, which defines the width, color, and style of the line. 
            The system pens (e.g. Pens.Black, Pens.Red, etc) have a width of one point. 
            If you want to draw thinner or thicker lines, you have to create new <see cref="T:System.Drawing.Pen" /> objects.
            </para>
        <para>
            SWF file format has no native support for dashed or dotted line styles.
            A dashed line can be simulated by breaking up the path into a series of short lines. 
            All lines in SWF file format have rounded joins and end-caps.
            </para>
      </remarks>
    </member>
    <member name="M:C1.C1Flash.FPage.DrawLines(System.Drawing.Pen,System.Drawing.PointF[])">
      <summary>
            Draws a series of line segments that connect an array of <see cref="T:System.Drawing.PointF" /> structures.
            </summary>
      <param name="pen">
        <see cref="T:System.Drawing.Pen" /> object that determines the color, width of the line segments.</param>
      <param name="points">Array of <see cref="T:System.Drawing.PointF" /> structures that represent the points to connect.</param>
      <remarks>
        <para>
            The pen parameter is a regular <see cref="T:System.Drawing.Pen" /> object, which defines the width, color, and style of the line. 
            The system pens (e.g. Pens.Black, Pens.Red, etc) have a width of one point. 
            If you want to draw thinner or thicker lines, you have to create new <see cref="T:System.Drawing.Pen" /> objects.
            </para>
        <para>
            SWF file format has no native support for dashed or dotted line styles.
            A dashed line can be simulated by breaking up the path into a series of short lines. 
            All lines in SWF file format have rounded joins and end-caps.
            </para>
      </remarks>
    </member>
    <member name="M:C1.C1Flash.FPage.DrawPolygon(System.Drawing.Pen,System.Drawing.Point[])">
      <summary>
            Draws a polygon defined by an array of <see cref="T:System.Drawing.Point" /> structures.
            </summary>
      <param name="pen">
        <see cref="T:System.Drawing.Pen" /> object that determines the color, width of the polygon.</param>
      <param name="points">Array of <see cref="T:System.Drawing.Point" /> structures that represent the vertices of the polygon.</param>
      <remarks>
        <para>
            The polygon is drawn by joining each pair of points with a line, and connecting the last point in the array with the first one.
            </para>
        <para>
            The DrawPolygon method draws the outline of the polygon. To fill the polygon, use the <see cref="M:C1.C1Flash.FPage.FillPolygon(System.Drawing.Brush,System.Drawing.Point[])" /> method.
            </para>
      </remarks>
      <example>
            The code below draws a beige triangle with a black outline:
            <code>
            C1FlashCanvas canvas = new C1FlashCanvas();
            Point[] points = new Point[4]{ new Point(100, 100), new Point(200, 100), new Point(300, 200), new Point(100, 200)  };
            // fill the polygon
            canvas.FillPolygon(Brushes.LightBlue, points); 
            // draw the polygon
            Pen pen = new Pen(Color.Blue, 3); 
            canvas.DrawPolygon(pen, points);canvas.RenderToFile(@"c:\temp\polygon.swf");
            </code></example>
    </member>
    <member name="M:C1.C1Flash.FPage.DrawPolygon(System.Drawing.Pen,System.Drawing.PointF[])">
      <summary>
            Draws a polygon defined by an array of <see cref="T:System.Drawing.PointF" /> structures.
            </summary>
      <param name="pen">
        <see cref="T:System.Drawing.Pen" /> object that determines the color, width of the polygon.</param>
      <param name="points">Array of <see cref="T:System.Drawing.PointF" /> structures that represent the vertices of the polygon.</param>
      <remarks>
        <para>
            The polygon is drawn by joining each pair of points with a line, and connecting the last point in the array with the first one.
            </para>
        <para>
            The DrawPolygon method draws the outline of the polygon. To fill the polygon, use the <see cref="M:C1.C1Flash.FPage.FillPolygon(System.Drawing.Brush,System.Drawing.Point[])" /> method.
            </para>
      </remarks>
      <example>
            The code below draws a beige triangle with a black outline:
            <code>
            C1FlashCanvas canvas = new C1FlashCanvas();
            Point[] points = new Point[4]{ new Point(100, 100), new Point(200, 100), new Point(300, 200), new Point(100, 200)  };
            // fill the polygon
            canvas.FillPolygon(Brushes.LightBlue, points); 
            // draw the polygon
            Pen pen = new Pen(Color.Blue, 3); 
            canvas.DrawPolygon(pen, points);canvas.RenderToFile(@"c:\temp\polygon.swf");
            </code></example>
    </member>
    <member name="M:C1.C1Flash.FPage.DrawRectangle(System.Drawing.Pen,System.Drawing.Rectangle)">
      <summary>
            Draws a rectangle specified by a <see cref="T:System.Drawing.Rectangle" /> structure.
            </summary>
      <param name="pen">A <see cref="T:System.Drawing.Pen" /> object that determines the color, width of the rectangle.</param>
      <param name="rect">A <see cref="T:System.Drawing.Rectangle" /> structure that represents the rectangle to draw.</param>
      <remarks>
            The DrawRectangle method draws the outline of the rectangle. To fill the rectangle, use the <see cref="M:C1.C1Flash.FPage.FillRectangle(System.Drawing.Brush,System.Drawing.Rectangle)" /> method.
            </remarks>
    </member>
    <member name="M:C1.C1Flash.FPage.DrawRectangle(System.Drawing.Pen,System.Drawing.RectangleF)">
      <summary>
            Draws a rectangle specified by a <see cref="T:System.Drawing.RectangleF" /> structure.
            </summary>
      <param name="pen">A <see cref="T:System.Drawing.Pen" /> object that determines the color, width of the rectangle.</param>
      <param name="rect">A <see cref="T:System.Drawing.RectangleF" /> structure that represents the rectangle to draw.</param>
      <remarks>
            The DrawRectangle method draws the outline of the rectangle. To fill the rectangle, use the <see cref="M:C1.C1Flash.FPage.FillRectangle(System.Drawing.Brush,System.Drawing.Rectangle)" /> method.
            </remarks>
    </member>
    <member name="M:C1.C1Flash.FPage.DrawRectangle(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Draws a rectangle specified by a coordinate pair, a width, and a height.
            </summary>
      <param name="pen">A <see cref="T:System.Drawing.Pen" /> object that determines the color, width of the rectangle.</param>
      <param name="x">x-coordinate of the upper-left corner of the rectangle to draw.</param>
      <param name="y">y-coordinate of the upper-left corner of the rectangle to draw.</param>
      <param name="width">Width of the rectangle to draw.</param>
      <param name="height">Height of the rectangle to draw.</param>
      <remarks>
            The DrawRectangle method draws the outline of the rectangle. To fill the rectangle, use the <see cref="M:C1.C1Flash.FPage.FillRectangle(System.Drawing.Brush,System.Drawing.Rectangle)" /> method.
            </remarks>
    </member>
    <member name="M:C1.C1Flash.FPage.DrawRectangle(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Draws a rectangle specified by a coordinate pair, a width, and a height.
            </summary>
      <param name="pen">A <see cref="T:System.Drawing.Pen" /> object that determines the color, width of the rectangle.</param>
      <param name="x">x-coordinate of the upper-left corner of the rectangle to draw.</param>
      <param name="y">y-coordinate of the upper-left corner of the rectangle to draw.</param>
      <param name="width">Width of the rectangle to draw.</param>
      <param name="height">Height of the rectangle to draw.</param>
      <remarks>
            The DrawRectangle method draws the outline of the rectangle. To fill the rectangle, use the <see cref="M:C1.C1Flash.FPage.FillRectangle(System.Drawing.Brush,System.Drawing.Rectangle)" /> method.
            </remarks>
    </member>
    <member name="M:C1.C1Flash.FPage.DrawRectangle(System.Drawing.Pen,System.Drawing.Rectangle,System.Drawing.Size)">
      <summary>
            Draws a round corner rectangle specified by a <see cref="T:System.Drawing.Rectangle" /> structure. 
            </summary>
      <param name="pen">A <see cref="T:System.Drawing.Pen" /> object that determines the color, width of the rectangle.</param>
      <param name="rect">A <see cref="T:System.Drawing.Rectangle" /> structure that represents the rectangle to draw.</param>
      <param name="corner">Size of the ellipse used to draw the round corners of the rectangle.</param>
      <remarks>
            The DrawRectangle method draws the outline of the rectangle. To fill the rectangle, use the <see cref="M:C1.C1Flash.FPage.FillRectangle(System.Drawing.Brush,System.Drawing.Rectangle)" /> method.
            </remarks>
    </member>
    <member name="M:C1.C1Flash.FPage.DrawRectangle(System.Drawing.Pen,System.Drawing.RectangleF,System.Drawing.SizeF)">
      <summary>
            Draws a round corner rectangle specified by a <see cref="T:System.Drawing.RectangleF" /> structure. 
            </summary>
      <param name="pen">A <see cref="T:System.Drawing.Pen" /> object that determines the color, width of the rectangle.</param>
      <param name="rect">A <see cref="T:System.Drawing.RectangleF" /> structure that represents the rectangle to draw.</param>
      <param name="corner">Size of the ellipse used to draw the round corners of the rectangle.</param>
      <remarks>
            The DrawRectangle method draws the outline of the rectangle. To fill the rectangle, use the <see cref="M:C1.C1Flash.FPage.FillRectangle(System.Drawing.Brush,System.Drawing.Rectangle)" /> method.
            </remarks>
    </member>
    <member name="M:C1.C1Flash.FPage.DrawRectangles(System.Drawing.Pen,System.Drawing.Rectangle[])">
      <summary>
            Draws a series of rectangles specified by <see cref="T:System.Drawing.Rectangle" /> structures.
            </summary>
      <param name="pen">A <see cref="T:System.Drawing.Pen" /> object that determines the color, width of the rectangle.</param>
      <param name="rects">Array of <see cref="T:System.Drawing.Rectangle" /> structures that represent the rectangles to draw.</param>
      <remarks>
            The DrawRectangles method draws the outline of the rectangles. To fill the rectangles, use the <see cref="M:C1.C1Flash.FPage.FillRectangles(System.Drawing.Brush,System.Drawing.Rectangle[])" /> method.
            </remarks>
    </member>
    <member name="M:C1.C1Flash.FPage.DrawRectangles(System.Drawing.Pen,System.Drawing.RectangleF[])">
      <summary>
            Draws a series of rectangles specified by <see cref="T:System.Drawing.RectangleF" /> structures.
            </summary>
      <param name="pen">A <see cref="T:System.Drawing.Pen" /> object that determines the color, width of the rectangle.</param>
      <param name="rects">Array of <see cref="T:System.Drawing.RectangleF" /> structures that represent the rectangles to draw.</param>
      <remarks>
            The DrawRectangles method draws the outline of the rectangles. To fill the rectangles, use the <see cref="M:C1.C1Flash.FPage.FillRectangles(System.Drawing.Brush,System.Drawing.Rectangle[])" /> method.
            </remarks>
    </member>
    <member name="M:C1.C1Flash.FPage.DrawEllipse(System.Drawing.Pen,System.Drawing.Rectangle)">
      <summary>
            Draws an ellipse specified by a bounding <see cref="T:System.Drawing.Rectangle" /> structure.
            </summary>
      <param name="pen">A <see cref="T:System.Drawing.Pen" /> object that determines the color, width of the ellipse.</param>
      <param name="rectangle">
        <see cref="T:System.Drawing.Rectangle" /> structure that represents the bounding rectangle that defines the ellipse.</param>
      <remarks>
            The outline of the ellipse is drawn using the given Pen object. To fill the ellipse, use the <see cref="M:C1.C1Flash.FPage.FillEllipse(System.Drawing.Brush,System.Drawing.Rectangle)" /> method.
            </remarks>
    </member>
    <member name="M:C1.C1Flash.FPage.DrawEllipse(System.Drawing.Pen,System.Drawing.RectangleF)">
      <summary>
            Draws an ellipse specified by a bounding <see cref="T:System.Drawing.RectangleF" /> structure.
            </summary>
      <param name="pen">A <see cref="T:System.Drawing.Pen" /> object that determines the color, width of the ellipse.</param>
      <param name="rectangle">
        <see cref="T:System.Drawing.RectangleF" /> structure that represents the bounding rectangle that defines the ellipse.</param>
      <remarks>
            The outline of the ellipse is drawn using the given Pen object. To fill the ellipse, use the <see cref="M:C1.C1Flash.FPage.FillEllipse(System.Drawing.Brush,System.Drawing.Rectangle)" /> method.
            </remarks>
    </member>
    <member name="M:C1.C1Flash.FPage.DrawEllipse(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Draws an ellipse defined by a bounding rectangle specified by a pair of coordinates, a height, and a width.
            </summary>
      <param name="pen">A <see cref="T:System.Drawing.Pen" /> object that determines the color, width of the ellipse.</param>
      <param name="x">x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse.</param>
      <param name="y">y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse. </param>
      <param name="width">Width of the bounding rectangle that defines the ellipse. </param>
      <param name="height">Height of the bounding rectangle that defines the ellipse. </param>
    </member>
    <member name="M:C1.C1Flash.FPage.DrawEllipse(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Draws an ellipse defined by a bounding rectangle specified by a pair of coordinates, a height, and a width.
            </summary>
      <param name="pen">A <see cref="T:System.Drawing.Pen" /> object that determines the color, width of the ellipse.</param>
      <param name="x">x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse.</param>
      <param name="y">y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse. </param>
      <param name="width">Width of the bounding rectangle that defines the ellipse. </param>
      <param name="height">Height of the bounding rectangle that defines the ellipse. </param>
    </member>
    <member name="M:C1.C1Flash.FPage.DrawArc(System.Drawing.Pen,System.Drawing.Rectangle,System.Single,System.Single)">
      <summary>
            Draws an arc representing a portion of an ellipse specified by a <see cref="T:System.Drawing.Rectangle" /> structure.
            </summary>
      <param name="pen">A <see cref="T:System.Drawing.Pen" /> object that determines the color, width of the arc.</param>
      <param name="rect">
        <see cref="T:System.Drawing.Rectangle" /> structure that represents the bounding rectangle that defines the ellipse.</param>
      <param name="startAngle">Angle in degrees measured clockwise from the x-axis to the starting point of the arc.</param>
      <param name="sweepAngle">Angle in degrees measured clockwise from the startAngle parameter to ending point of the arc. </param>
    </member>
    <member name="M:C1.C1Flash.FPage.DrawArc(System.Drawing.Pen,System.Drawing.RectangleF,System.Single,System.Single)">
      <summary>
            Draws an arc representing a portion of an ellipse specified by a <see cref="T:System.Drawing.RectangleF" /> structure.
            </summary>
      <param name="pen">A <see cref="T:System.Drawing.Pen" /> object that determines the color, width of the arc.</param>
      <param name="rect">
        <see cref="T:System.Drawing.RectangleF" /> structure that represents the bounding rectangle that defines the ellipse.</param>
      <param name="startAngle">Angle in degrees measured clockwise from the x-axis to the starting point of the arc.</param>
      <param name="sweepAngle">Angle in degrees measured clockwise from the startAngle parameter to ending point of the arc. </param>
    </member>
    <member name="M:C1.C1Flash.FPage.DrawArc(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Draws an arc representing a portion of an ellipse specified by a pair of coordinates, a width, and a height.
            </summary>
      <param name="pen">A <see cref="T:System.Drawing.Pen" /> object that determines the color, width of the arc.</param>
      <param name="x">x-coordinate of the upper-left corner of the rectangle that defines the ellipse. </param>
      <param name="y">y-coordinate of the upper-left corner of the rectangle that defines the ellipse. </param>
      <param name="width">Width of the rectangle that defines the ellipse.</param>
      <param name="height">Height of the rectangle that defines the ellipse. </param>
      <param name="startAngle">Angle in degrees measured clockwise from the x-axis to the starting point of the arc.</param>
      <param name="sweepAngle">Angle in degrees measured clockwise from the startAngle parameter to ending point of the arc.</param>
    </member>
    <member name="M:C1.C1Flash.FPage.DrawArc(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Draws an arc representing a portion of an ellipse specified by a pair of coordinates, a width, and a height.
            </summary>
      <param name="pen">A <see cref="T:System.Drawing.Pen" /> object that determines the color, width of the arc.</param>
      <param name="x">x-coordinate of the upper-left corner of the rectangle that defines the ellipse. </param>
      <param name="y">y-coordinate of the upper-left corner of the rectangle that defines the ellipse. </param>
      <param name="width">Width of the rectangle that defines the ellipse.</param>
      <param name="height">Height of the rectangle that defines the ellipse. </param>
      <param name="startAngle">Angle in degrees measured clockwise from the x-axis to the starting point of the arc.</param>
      <param name="sweepAngle">Angle in degrees measured clockwise from the startAngle parameter to ending point of the arc.</param>
    </member>
    <member name="M:C1.C1Flash.FPage.DrawPie(System.Drawing.Pen,System.Drawing.Rectangle,System.Single,System.Single)">
      <summary>
            Draws a pie shape defined by an ellipse specified by a <see cref="T:System.Drawing.Rectangle" /> structure and two radial lines.
            </summary>
      <param name="pen">A <see cref="T:System.Drawing.Pen" /> object that determines the color, width of the pie.</param>
      <param name="rect">
        <see cref="T:System.Drawing.Rectangle" /> structure that represents the bounding rectangle that defines the ellipse from which the pie shape comes. </param>
      <param name="startAngle">Angle measured in degrees clockwise from the x-axis to the first side of the pie shape.</param>
      <param name="sweepAngle">Angle measured in degrees clockwise from the startAngle parameter to the second side of the pie shape.</param>
    </member>
    <member name="M:C1.C1Flash.FPage.DrawPie(System.Drawing.Pen,System.Drawing.RectangleF,System.Single,System.Single)">
      <summary>
            Draws a pie shape defined by an ellipse specified by a <see cref="T:System.Drawing.RectangleF" /> structure and two radial lines.
            </summary>
      <param name="pen">A <see cref="T:System.Drawing.Pen" /> object that determines the color, width of the pie.</param>
      <param name="rect">
        <see cref="T:System.Drawing.RectangleF" /> structure that represents the bounding rectangle that defines the ellipse from which the pie shape comes. </param>
      <param name="startAngle">Angle measured in degrees clockwise from the x-axis to the first side of the pie shape.</param>
      <param name="sweepAngle">Angle measured in degrees clockwise from the startAngle parameter to the second side of the pie shape.</param>
    </member>
    <member name="M:C1.C1Flash.FPage.DrawPie(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Draws a pie shape defined by an ellipse specified by a coordinate pair, a width, and a height and two radial lines.
            </summary>
      <param name="pen">A <see cref="T:System.Drawing.Pen" /> object that determines the color, width of the pie.</param>
      <param name="x">x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the pie shape comes.</param>
      <param name="y">y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the pie shape comes. </param>
      <param name="width">Width of the bounding rectangle that defines the ellipse from which the pie shape comes.</param>
      <param name="height">Height of the bounding rectangle that defines the ellipse from which the pie shape comes.</param>
      <param name="startAngle">Angle measured in degrees clockwise from the x-axis to the first side of the pie shape.</param>
      <param name="sweepAngle">Angle measured in degrees clockwise from the startAngle parameter to the second side of the pie shape.</param>
    </member>
    <member name="M:C1.C1Flash.FPage.DrawPie(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Draws a pie shape defined by an ellipse specified by a coordinate pair, a width, and a height and two radial lines.
            </summary>
      <param name="pen">A <see cref="T:System.Drawing.Pen" /> object that determines the color, width of the pie.</param>
      <param name="x">x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the pie shape comes.</param>
      <param name="y">y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the pie shape comes. </param>
      <param name="width">Width of the bounding rectangle that defines the ellipse from which the pie shape comes.</param>
      <param name="height">Height of the bounding rectangle that defines the ellipse from which the pie shape comes.</param>
      <param name="startAngle">Angle measured in degrees clockwise from the x-axis to the first side of the pie shape.</param>
      <param name="sweepAngle">Angle measured in degrees clockwise from the startAngle parameter to the second side of the pie shape.</param>
    </member>
    <member name="M:C1.C1Flash.FPage.DrawChord(System.Drawing.Pen,System.Drawing.Rectangle,System.Single,System.Single)">
      <summary>
            Draws a chord shape defined by an ellipse specified by a <see cref="T:System.Drawing.Rectangle" /> structure and two radial lines.
            </summary>
      <param name="pen">A <see cref="T:System.Drawing.Pen" /> object that determines the color, width of the chord.</param>
      <param name="rect">
        <see cref="T:System.Drawing.Rectangle" /> structure that represents the bounding rectangle that defines the ellipse from which the chord shape comes. </param>
      <param name="startAngle">Angle measured in degrees clockwise from the x-axis to the first side of the chord shape.</param>
      <param name="sweepAngle">Angle measured in degrees clockwise from the startAngle parameter to the second side of the chord shape.</param>
    </member>
    <member name="M:C1.C1Flash.FPage.DrawChord(System.Drawing.Pen,System.Drawing.RectangleF,System.Single,System.Single)">
      <summary>
            Draws a chord shape defined by an ellipse specified by a <see cref="T:System.Drawing.RectangleF" /> structure and two radial lines.
            </summary>
      <param name="pen">A <see cref="T:System.Drawing.Pen" /> object that determines the color, width of the chord.</param>
      <param name="rect">
        <see cref="T:System.Drawing.RectangleF" /> structure that represents the bounding rectangle that defines the ellipse from which the chord shape comes. </param>
      <param name="startAngle">Angle measured in degrees clockwise from the x-axis to the first side of the chord shape.</param>
      <param name="sweepAngle">Angle measured in degrees clockwise from the startAngle parameter to the second side of the chord shape.</param>
    </member>
    <member name="M:C1.C1Flash.FPage.DrawChord(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Draws a chord shape defined by an ellipse specified by a coordinate pair, a width, and a height and two radial lines.
            </summary>
      <param name="pen">A <see cref="T:System.Drawing.Pen" /> object that determines the color, width of the chord.</param>
      <param name="x">x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the chord shape comes.</param>
      <param name="y">y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the chord shape comes. </param>
      <param name="width">Width of the bounding rectangle that defines the ellipse from which the chord shape comes.</param>
      <param name="height">Height of the bounding rectangle that defines the ellipse from which the chord shape comes.</param>
      <param name="startAngle">Angle measured in degrees clockwise from the x-axis to the first side of the chord shape.</param>
      <param name="sweepAngle">Angle measured in degrees clockwise from the startAngle parameter to the second side of the chord shape.</param>
    </member>
    <member name="M:C1.C1Flash.FPage.DrawChord(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Draws a chord shape defined by an ellipse specified by a coordinate pair, a width, and a height and two radial lines.
            </summary>
      <param name="pen">A <see cref="T:System.Drawing.Pen" /> object that determines the color, width of the chord.</param>
      <param name="x">x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the chord shape comes.</param>
      <param name="y">y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the chord shape comes. </param>
      <param name="width">Width of the bounding rectangle that defines the ellipse from which the chord shape comes.</param>
      <param name="height">Height of the bounding rectangle that defines the ellipse from which the chord shape comes.</param>
      <param name="startAngle">Angle measured in degrees clockwise from the x-axis to the first side of the chord shape.</param>
      <param name="sweepAngle">Angle measured in degrees clockwise from the startAngle parameter to the second side of the chord shape.</param>
    </member>
    <member name="M:C1.C1Flash.FPage.DrawBezier(System.Drawing.Pen,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point)">
      <summary>
            Draws a B¨¦zier spline defined by four <see cref="T:System.Drawing.Point" /> structures.
            </summary>
      <param name="pen">A <see cref="T:System.Drawing.Pen" /> object that determines the color, width of the curve.</param>
      <param name="pt0">
        <see cref="T:System.Drawing.Point" /> structure that represents the starting point of the curve.</param>
      <param name="pt1">
        <see cref="T:System.Drawing.Point" /> structure that represents the first control point for the curve.</param>
      <param name="pt2">
        <see cref="T:System.Drawing.Point" /> structure that represents the second control point for the curve.</param>
      <param name="pt3">
        <see cref="T:System.Drawing.Point" /> structure that represents the ending point of the curve.</param>
      <remarks>
            The Bezier spline is a smooth curve that passes through the start and end points and is shaped by the control points (but doesn't pass through them).
            </remarks>
    </member>
    <member name="M:C1.C1Flash.FPage.DrawBezier(System.Drawing.Pen,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)">
      <summary>
            Draws a B¨¦zier spline defined by four <see cref="T:System.Drawing.PointF" /> structures.
            </summary>
      <param name="pen">A <see cref="T:System.Drawing.Pen" /> object that determines the color, width of the curve.</param>
      <param name="pt0">
        <see cref="T:System.Drawing.PointF" /> structure that represents the starting point of the curve.</param>
      <param name="pt1">
        <see cref="T:System.Drawing.PointF" /> structure that represents the first control point for the curve.</param>
      <param name="pt2">
        <see cref="T:System.Drawing.PointF" /> structure that represents the second control point for the curve.</param>
      <param name="pt3">
        <see cref="T:System.Drawing.PointF" /> structure that represents the ending point of the curve.</param>
      <remarks>
            The Bezier spline is a smooth curve that passes through the start and end points and is shaped by the control points (but doesn't pass through them).
            </remarks>
    </member>
    <member name="M:C1.C1Flash.FPage.DrawBezier(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Draws a B¨¦zier spline defined by four ordered pairs of coordinates that represent points.
            </summary>
      <param name="pen">A <see cref="T:System.Drawing.Pen" /> object that determines the color, width of the curve.</param>
      <param name="x1">x-coordinate of the starting point of the curve. </param>
      <param name="y1">y-coordinate of the starting point of the curve. </param>
      <param name="x2">x-coordinate of the first control point of the curve.</param>
      <param name="y2">y-coordinate of the first control point of the curve.</param>
      <param name="x3">x-coordinate of the second control point of the curve.</param>
      <param name="y3">y-coordinate of the second control point of the curve.</param>
      <param name="x4">x-coordinate of the ending point of the curve.</param>
      <param name="y4">y-coordinate of the ending point of the curve.</param>
    </member>
    <member name="M:C1.C1Flash.FPage.DrawBeziers(System.Drawing.Pen,System.Drawing.Point[])">
      <summary>
            Draws a series of B¨¦zier splines from an array of <see cref="T:System.Drawing.Point" /> structures.
            </summary>
      <param name="pen">A <see cref="T:System.Drawing.Pen" /> object that determines the color, width of the curve.</param>
      <param name="points">Array of <see cref="T:System.Drawing.Point" /> structures that represent the points that determine the curve. </param>
      <remarks>
            The first spline is defined by the first four points in the array. 
            Each additional spline uses the last point as a start and requires an extra three points. 
            The total number of points in the array must be of the form 3 * n + 1 or an exception will be thrown.
            </remarks>
    </member>
    <member name="M:C1.C1Flash.FPage.DrawBeziers(System.Drawing.Pen,System.Drawing.PointF[])">
      <summary>
            Draws a series of B¨¦zier splines from an array of <see cref="T:System.Drawing.PointF" /> structures.
            </summary>
      <param name="pen">A <see cref="T:System.Drawing.Pen" /> object that determines the color, width of the curve.</param>
      <param name="points">Array of <see cref="T:System.Drawing.PointF" /> structures that represent the points that determine the curve. </param>
      <remarks>
            The first spline is defined by the first four points in the array. 
            Each additional spline uses the last point as a start and requires an extra three points. 
            The total number of points in the array must be of the form 3 * n + 1 or an exception will be thrown.
            </remarks>
    </member>
    <member name="M:C1.C1Flash.FPage.DrawPath(System.Drawing.Pen,System.Drawing.Drawing2D.GraphicsPath)">
      <summary>
            Draws a <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> object.
            </summary>
      <param name="pen">
        <see cref="T:System.Drawing.Pen" /> object that determines the color, width, and style of the path. </param>
      <param name="path">
        <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> object to draw.</param>
      <remarks>
        <para>
            The pen parameter is a regular Pen object, which defines the width, color, and style of the line. 
            The system pens (e.g. Pens.Black, Pens.Red, etc) have a width of one point. 
            If you want to draw thinner or thicker lines, you have to create new Pen objects.
            </para>
        <para>
            SWF file format has no native support for dashed or dotted line styles. 
            A dashed line can be simulated by breaking up the path into a series of short lines. 
            All lines in SWF file format have rounded joins and end-caps.
            </para>
        <para>
            The current transformation in the graphic context is applied to the <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> object before it is drawn.
            </para>
      </remarks>
    </member>
    <member name="M:C1.C1Flash.FPage.FillRectangle(System.Drawing.Brush,System.Drawing.Rectangle)">
      <summary>
            Fills the interior of a rectangle specified by a <see cref="T:System.Drawing.Rectangle" /> structure.
            </summary>
      <param name="brush">
        <see cref="T:System.Drawing.Brush" /> object that determines the characteristics of the fill.</param>
      <param name="rectangle">
        <see cref="T:System.Drawing.Rectangle" /> structure that represents the rectangle to fill.</param>
      <remarks>
            The FillRectangle method fills the interior of the rectangle. To draw the outline of the rectangle, use the <see cref="M:C1.C1Flash.FPage.DrawRectangle(System.Drawing.Pen,System.Drawing.Rectangle)" /> method.
            </remarks>
    </member>
    <member name="M:C1.C1Flash.FPage.FillRectangle(System.Drawing.Brush,System.Drawing.RectangleF)">
      <summary>
            Fills the interior of a rectangle specified by a <see cref="T:System.Drawing.RectangleF" /> structure.
            </summary>
      <param name="brush">
        <see cref="T:System.Drawing.Brush" /> object that determines the characteristics of the fill.</param>
      <param name="rectangle">
        <see cref="T:System.Drawing.RectangleF" /> structure that represents the rectangle to fill.</param>
      <remarks>
            The FillRectangle method fills the interior of the rectangle. To draw the outline of the rectangle, use the <see cref="M:C1.C1Flash.FPage.DrawRectangle(System.Drawing.Pen,System.Drawing.Rectangle)" /> method.
            </remarks>
    </member>
    <member name="M:C1.C1Flash.FPage.FillRectangle(System.Drawing.Brush,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Fills the interior of a rectangle specified by a pair of coordinates, a width, and a height.
            </summary>
      <param name="brush">
        <see cref="T:System.Drawing.Brush" /> object that determines the characteristics of the fill.</param>
      <param name="x">x-coordinate of the upper-left corner of the rectangle to fill. </param>
      <param name="y">y-coordinate of the upper-left corner of the rectangle to fill. </param>
      <param name="width">Width of the rectangle to fill.</param>
      <param name="height">Height of the rectangle to fill.</param>
      <remarks>
            The FillRectangle method fills the interior of the rectangle. To draw the outline of the rectangle, use the <see cref="M:C1.C1Flash.FPage.DrawRectangle(System.Drawing.Pen,System.Drawing.Rectangle)" /> method.
            </remarks>
    </member>
    <member name="M:C1.C1Flash.FPage.FillRectangle(System.Drawing.Brush,System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Fills the interior of a rectangle specified by a pair of coordinates, a width, and a height.
            </summary>
      <param name="brush">
        <see cref="T:System.Drawing.Brush" /> object that determines the characteristics of the fill.</param>
      <param name="x">x-coordinate of the upper-left corner of the rectangle to fill. </param>
      <param name="y">y-coordinate of the upper-left corner of the rectangle to fill. </param>
      <param name="width">Width of the rectangle to fill.</param>
      <param name="height">Height of the rectangle to fill.</param>
      <remarks>
            The FillRectangle method fills the interior of the rectangle. To draw the outline of the rectangle, use the <see cref="M:C1.C1Flash.FPage.DrawRectangle(System.Drawing.Pen,System.Drawing.Rectangle)" /> method.
            </remarks>
    </member>
    <member name="M:C1.C1Flash.FPage.FillRectangle(System.Drawing.Brush,System.Drawing.Rectangle,System.Drawing.Size)">
      <summary>
            Fills a round corner rectangle specified by a <see cref="T:System.Drawing.Rectangle" /> structure.
            </summary>
      <param name="brush">
        <see cref="T:System.Drawing.Brush" /> object that determines the characteristics of the fill.</param>
      <param name="rect">
        <see cref="T:System.Drawing.Rectangle" /> structure that represents the rectangle to fill.</param>
      <param name="corner">Size of the ellipse used to decide the round corners of the rectangle.</param>
    </member>
    <member name="M:C1.C1Flash.FPage.FillRectangle(System.Drawing.Brush,System.Drawing.RectangleF,System.Drawing.SizeF)">
      <summary>
            Fills a round corner rectangle specified by a <see cref="T:System.Drawing.RectangleF" /> structure.
            </summary>
      <param name="brush">
        <see cref="T:System.Drawing.Brush" /> object that determines the characteristics of the fill.</param>
      <param name="rect">
        <see cref="T:System.Drawing.RectangleF" /> structure that represents the rectangle to fill.</param>
      <param name="corner">Size of the ellipse used to decide the round corners of the rectangle.</param>
    </member>
    <member name="M:C1.C1Flash.FPage.FillRectangles(System.Drawing.Brush,System.Drawing.Rectangle[])">
      <summary>
            Fills a series of rectangles specified by <see cref="T:System.Drawing.Rectangle" /> structures.
            </summary>
      <param name="brush">
        <see cref="T:System.Drawing.Brush" /> object that determines the characteristics of the fill.</param>
      <param name="rects">Array of <see cref="T:System.Drawing.Rectangle" /> structures that represent the rectangles to draw.</param>
      <remarks>
            To draw the outline of the rectangles, use the <see cref="M:C1.C1Flash.FPage.DrawRectangles(System.Drawing.Pen,System.Drawing.Rectangle[])" /> method.
            </remarks>
    </member>
    <member name="M:C1.C1Flash.FPage.FillRectangles(System.Drawing.Brush,System.Drawing.RectangleF[])">
      <summary>
            Fills a series of rectangles specified by <see cref="T:System.Drawing.RectangleF" /> structures.
            </summary>
      <param name="brush">
        <see cref="T:System.Drawing.Brush" /> object that determines the characteristics of the fill.</param>
      <param name="rects">Array of <see cref="T:System.Drawing.RectangleF" /> structures that represent the rectangles to draw.</param>
      <remarks>
            To draw the outline of the rectangles, use the <see cref="M:C1.C1Flash.FPage.DrawRectangles(System.Drawing.Pen,System.Drawing.Rectangle[])" /> method.
            </remarks>
    </member>
    <member name="M:C1.C1Flash.FPage.FillEllipse(System.Drawing.Brush,System.Drawing.Rectangle)">
      <summary>
            Fills the interior of an ellipse defined by a bounding rectangle specified by a <see cref="T:System.Drawing.Rectangle" /> structure.
            </summary>
      <param name="brush">
        <see cref="T:System.Drawing.Brush" /> object that determines the characteristics of the fill.</param>
      <param name="rectangle">
        <see cref="T:System.Drawing.Rectangle" /> structure that represents the bounding rectangle that defines the ellipse.</param>
      <remarks>
            To draw the outline of the ellipse shape, please see the <see cref="M:C1.C1Flash.FPage.DrawEllipse(System.Drawing.Pen,System.Drawing.Rectangle)" /> method.
            </remarks>
    </member>
    <member name="M:C1.C1Flash.FPage.FillEllipse(System.Drawing.Brush,System.Drawing.RectangleF)">
      <summary>
            Fills the interior of an ellipse defined by a bounding rectangle specified by a <see cref="T:System.Drawing.RectangleF" /> structure.
            </summary>
      <param name="brush">
        <see cref="T:System.Drawing.Brush" /> object that determines the characteristics of the fill.</param>
      <param name="rectangle">
        <see cref="T:System.Drawing.RectangleF" /> structure that represents the bounding rectangle that defines the ellipse.</param>
      <remarks>
            To draw the outline of the ellipse shape, please see the <see cref="M:C1.C1Flash.FPage.DrawEllipse(System.Drawing.Pen,System.Drawing.Rectangle)" /> method.
            </remarks>
    </member>
    <member name="M:C1.C1Flash.FPage.FillEllipse(System.Drawing.Brush,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Fills the interior of an ellipse defined by a bounding rectangle specified by a pair of coordinates, a width, and a height.
            </summary>
      <param name="brush">
        <see cref="T:System.Drawing.Brush" /> object that determines the characteristics of the fill.</param>
      <param name="x">x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse.</param>
      <param name="y">y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse.</param>
      <param name="width">Width of the bounding rectangle that defines the ellipse.</param>
      <param name="height">Height of the bounding rectangle that defines the ellipse.</param>
    </member>
    <member name="M:C1.C1Flash.FPage.FillEllipse(System.Drawing.Brush,System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Fills the interior of an ellipse defined by a bounding rectangle specified by a pair of coordinates, a width, and a height.
            </summary>
      <param name="brush">
        <see cref="T:System.Drawing.Brush" /> object that determines the characteristics of the fill.</param>
      <param name="x">x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse.</param>
      <param name="y">y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse.</param>
      <param name="width">Width of the bounding rectangle that defines the ellipse.</param>
      <param name="height">Height of the bounding rectangle that defines the ellipse.</param>
    </member>
    <member name="M:C1.C1Flash.FPage.FillPolygon(System.Drawing.Brush,System.Drawing.Point[])">
      <summary>
            Fills the interior of a polygon defined by an array of points specified by <see cref="T:System.Drawing.Point" /> structures.
            </summary>
      <param name="brush">
        <see cref="T:System.Drawing.Brush" /> object that determines the characteristics of the fill.</param>
      <param name="points">Array of <see cref="T:System.Drawing.Point" /> structures that represent the vertices of the polygon to fill.</param>
    </member>
    <member name="M:C1.C1Flash.FPage.FillPolygon(System.Drawing.Brush,System.Drawing.PointF[])">
      <summary>
            Fills the interior of a polygon defined by an array of points specified by <see cref="T:System.Drawing.PointF" /> structures.
            </summary>
      <param name="brush">
        <see cref="T:System.Drawing.Brush" /> object that determines the characteristics of the fill.</param>
      <param name="points">Array of <see cref="T:System.Drawing.PointF" /> structures that represent the vertices of the polygon to fill.</param>
    </member>
    <member name="M:C1.C1Flash.FPage.FillPie(System.Drawing.Brush,System.Drawing.Rectangle,System.Single,System.Single)">
      <summary>
            Fills the interior of a pie section defined by an ellipse specified by a <see cref="T:System.Drawing.Rectangle" /> structure and two radial lines.
            </summary>
      <param name="brush">
        <see cref="T:System.Drawing.Brush" /> object that determines the characteristics of the fill.</param>
      <param name="rectangle">
        <see cref="T:System.Drawing.Rectangle" /> structure that represents the bounding rectangle that defines the ellipse from which the pie section comes.</param>
      <param name="startAngle">Angle in degrees measured clockwise from the x-axis to the first side of the pie section.</param>
      <param name="sweepAngle">Angle in degrees measured clockwise from the startAngle parameter to the second side of the pie section.</param>
    </member>
    <member name="M:C1.C1Flash.FPage.FillPie(System.Drawing.Brush,System.Drawing.RectangleF,System.Single,System.Single)">
      <summary>
            Fills the interior of a pie section defined by an ellipse specified by a <see cref="T:System.Drawing.RectangleF" /> structure and two radial lines.
            </summary>
      <param name="brush">
        <see cref="T:System.Drawing.Brush" /> object that determines the characteristics of the fill.</param>
      <param name="rectangle">
        <see cref="T:System.Drawing.RectangleF" /> structure that represents the bounding rectangle that defines the ellipse from which the pie section comes.</param>
      <param name="startAngle">Angle in degrees measured clockwise from the x-axis to the first side of the pie section.</param>
      <param name="sweepAngle">Angle in degrees measured clockwise from the startAngle parameter to the second side of the pie section.</param>
    </member>
    <member name="M:C1.C1Flash.FPage.FillPie(System.Drawing.Brush,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Fills the interior of a pie section defined by an ellipse specified by a pair of coordinates, a width, and a height and two radial lines.
            </summary>
      <param name="brush">
        <see cref="T:System.Drawing.Brush" /> object that determines the characteristics of the fill.</param>
      <param name="x">x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the pie section comes.</param>
      <param name="y">y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the pie section comes. </param>
      <param name="width">Width of the bounding rectangle that defines the ellipse from which the pie section comes. </param>
      <param name="height">Height of the bounding rectangle that defines the ellipse from which the pie section comes. </param>
      <param name="startAngle">Angle in degrees measured clockwise from the x-axis to the first side of the pie section. </param>
      <param name="sweepAngle">Angle in degrees measured clockwise from the startAngle parameter to the second side of the pie section.</param>
    </member>
    <member name="M:C1.C1Flash.FPage.FillPie(System.Drawing.Brush,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Fills the interior of a pie section defined by an ellipse specified by a pair of coordinates, a width, and a height and two radial lines.
            </summary>
      <param name="brush">
        <see cref="T:System.Drawing.Brush" /> object that determines the characteristics of the fill.</param>
      <param name="x">x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the pie section comes.</param>
      <param name="y">y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the pie section comes. </param>
      <param name="width">Width of the bounding rectangle that defines the ellipse from which the pie section comes. </param>
      <param name="height">Height of the bounding rectangle that defines the ellipse from which the pie section comes. </param>
      <param name="startAngle">Angle in degrees measured clockwise from the x-axis to the first side of the pie section. </param>
      <param name="sweepAngle">Angle in degrees measured clockwise from the startAngle parameter to the second side of the pie section.</param>
    </member>
    <member name="M:C1.C1Flash.FPage.FillChord(System.Drawing.Brush,System.Drawing.Rectangle,System.Single,System.Single)">
      <summary>
            Fills the interior of a chord defined by an ellipse specified by a <see cref="T:System.Drawing.Rectangle" /> structure.
            </summary>
      <param name="brush">
        <see cref="T:System.Drawing.Brush" /> object that determines the characteristics of the fill.</param>
      <param name="rectangle">
        <see cref="T:System.Drawing.Rectangle" /> structure that represents the bounding rectangle that defines the ellipse from which the chord section comes.</param>
      <param name="startAngle">Angle in degrees measured clockwise from the x-axis to the first side of the chord.</param>
      <param name="sweepAngle">Angle in degrees measured clockwise from the startAngle parameter to the second side of the chord.</param>
    </member>
    <member name="M:C1.C1Flash.FPage.FillChord(System.Drawing.Brush,System.Drawing.RectangleF,System.Single,System.Single)">
      <summary>
            Fills the interior of a chord defined by an ellipse specified by a <see cref="T:System.Drawing.RectangleF" /> structure.
            </summary>
      <param name="brush">
        <see cref="T:System.Drawing.Brush" /> object that determines the characteristics of the fill.</param>
      <param name="rectangle">
        <see cref="T:System.Drawing.RectangleF" /> structure that represents the bounding rectangle that defines the ellipse from which the chord section comes.</param>
      <param name="startAngle">Angle in degrees measured clockwise from the x-axis to the first side of the chord.</param>
      <param name="sweepAngle">Angle in degrees measured clockwise from the startAngle parameter to the second side of the chord.</param>
    </member>
    <member name="M:C1.C1Flash.FPage.FillChord(System.Drawing.Brush,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Fills the interior of a chord defined by an ellipse specified by a pair of coordinates, a width, and a height and two radial angle.
            </summary>
      <param name="brush">
        <see cref="T:System.Drawing.Brush" /> object that determines the characteristics of the fill.</param>
      <param name="x">x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the chord section comes.</param>
      <param name="y">y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the chord section comes. </param>
      <param name="width">Width of the bounding rectangle that defines the ellipse from which the chord section comes. </param>
      <param name="height">Height of the bounding rectangle that defines the ellipse from which the chord section comes. </param>
      <param name="startAngle">Angle in degrees measured clockwise from the x-axis to the first side of the chord section. </param>
      <param name="sweepAngle">Angle in degrees measured clockwise from the startAngle parameter to the second side of the chord section.</param>
    </member>
    <member name="M:C1.C1Flash.FPage.FillChord(System.Drawing.Brush,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Fills the interior of a chord defined by an ellipse specified by a pair of coordinates, a width, and a height and two radial angle.
            </summary>
      <param name="brush">
        <see cref="T:System.Drawing.Brush" /> object that determines the characteristics of the fill.</param>
      <param name="x">x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the chord section comes.</param>
      <param name="y">y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the chord section comes. </param>
      <param name="width">Width of the bounding rectangle that defines the ellipse from which the chord section comes. </param>
      <param name="height">Height of the bounding rectangle that defines the ellipse from which the chord section comes. </param>
      <param name="startAngle">Angle in degrees measured clockwise from the x-axis to the first side of the chord section. </param>
      <param name="sweepAngle">Angle in degrees measured clockwise from the startAngle parameter to the second side of the chord section.</param>
      <remarks>
            To draw the outline of the path, please see the <see cref="M:C1.C1Flash.FPage.DrawPath(System.Drawing.Pen,System.Drawing.Drawing2D.GraphicsPath)" /> method.
            </remarks>
    </member>
    <member name="M:C1.C1Flash.FPage.FillPath(System.Drawing.Brush,System.Drawing.Drawing2D.GraphicsPath)">
      <summary>
            Fills the interior of a <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> object.
            </summary>
      <param name="brush">
        <see cref="T:System.Drawing.Brush" /> object that determines the characteristics of the fill.</param>
      <param name="path">
        <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> object that represents the path to fill.</param>
      <remarks>
            To draw the outline of the path, please see the <see cref="M:C1.C1Flash.FPage.DrawPath(System.Drawing.Pen,System.Drawing.Drawing2D.GraphicsPath)" /> method.
            </remarks>
    </member>
    <member name="M:C1.C1Flash.FPage.DrawImage(System.Drawing.Image,System.Drawing.Point)">
      <summary>
            Draws the specified <see cref="T:System.Drawing.Image" /> object at the specified location and with the original size.
            </summary>
      <param name="image">
        <see cref="T:System.Drawing.Image" /> object to draw.</param>
      <param name="point">
        <see cref="T:System.Drawing.Point" /> structure that represents the location of the upper-left corner of the drawn image.</param>
      <remarks>
        <para>
            SWF specification only supports JPEG image files and some of the Bitmap files. 
            C1Flash tries to convert any other images format to the one SWF supports. 
            Currently we support: JPEG, BMP, GIF, TIFF, PNG, ICON and WMF.
            </para>
        <para>
            If you call DrawImage and pass it a metafile, however, 
            C1Flash Library will play the metafile and convert it into graphics commands instead. 
            This has the advantage of preserving the quality and resolution-independence of the metafile images.
            </para>
        <para>
            If for some reason you want to render metafiles as regular bitmap images, you should convert the image before calling the DrawImage method.
            </para>
      </remarks>
    </member>
    <member name="M:C1.C1Flash.FPage.DrawImage(System.Drawing.Image,System.Drawing.PointF)">
      <summary>
            Draws the specified <see cref="T:System.Drawing.Image" /> object at the specified location and with the original size.
            </summary>
      <param name="image">
        <see cref="T:System.Drawing.Image" /> object to draw.</param>
      <param name="point">
        <see cref="T:System.Drawing.PointF" /> structure that represents the location of the upper-left corner of the drawn image.</param>
      <remarks>
        <para>
            SWF specification only supports JPEG image files and some of the Bitmap files. 
            C1Flash tries to convert any other images format to the one SWF supports. 
            Currently we support: JPEG, BMP, GIF, TIFF, PNG, ICON and WMF.
            </para>
        <para>
            If you call DrawImage and pass it a metafile, however, 
            C1Flash Library will play the metafile and convert it into graphics commands instead. 
            This has the advantage of preserving the quality and resolution-independence of the metafile images.
            </para>
        <para>
            If for some reason you want to render metafiles as regular bitmap images, you should convert the image before calling the DrawImage method.
            </para>
      </remarks>
    </member>
    <member name="M:C1.C1Flash.FPage.DrawImage(System.Drawing.Image,System.Drawing.Rectangle)">
      <summary>
            Draws the specified <see cref="T:System.Drawing.Image" /> object at the specified location and with the specified size.
            </summary>
      <param name="image">
        <see cref="T:System.Drawing.Image" /> object to draw.</param>
      <param name="rect">
        <see cref="T:System.Drawing.Rectangle" /> structure that specifies the location and size of the drawn image.</param>
      <remarks>
        <para>
            SWF specification only supports JPEG image files and some of the Bitmap files. 
            C1Flash tries to convert any other images format to the one SWF supports. 
            Currently we support: JPEG, BMP, GIF, TIFF, PNG, ICON and WMF.
            </para>
        <para>
            If you call DrawImage and pass it a metafile, however, 
            C1Flash Library will play the metafile and convert it into graphics commands instead. 
            This has the advantage of preserving the quality and resolution-independence of the metafile images.
            </para>
        <para>
            If for some reason you want to render metafiles as regular bitmap images, you should convert the image before calling the DrawImage method.
            </para>
      </remarks>
    </member>
    <member name="M:C1.C1Flash.FPage.DrawImage(System.Drawing.Image,System.Drawing.RectangleF)">
      <summary>
            Draws the specified <see cref="T:System.Drawing.Image" /> object at the specified location and with the specified size.
            </summary>
      <param name="image">
        <see cref="T:System.Drawing.Image" /> object to draw.</param>
      <param name="rect">
        <see cref="T:System.Drawing.RectangleF" /> structure that specifies the location and size of the drawn image.</param>
      <remarks>
        <para>
            SWF specification only supports JPEG image files and some of the Bitmap files. 
            C1Flash tries to convert any other images format to the one SWF supports. 
            Currently we support: JPEG, BMP, GIF, TIFF, PNG, ICON and WMF.
            </para>
        <para>
            If you call DrawImage and pass it a metafile, however, 
            C1Flash Library will play the metafile and convert it into graphics commands instead. 
            This has the advantage of preserving the quality and resolution-independence of the metafile images.
            </para>
        <para>
            If for some reason you want to render metafiles as regular bitmap images, you should convert the image before calling the DrawImage method.
            </para>
      </remarks>
    </member>
    <member name="M:C1.C1Flash.FPage.DrawIcon(System.Drawing.Icon,System.Drawing.Rectangle)">
      <summary>
            Draws the image represented by the specified <see cref="T:System.Drawing.Icon" /> object within the area specified by a <see cref="T:System.Drawing.Rectangle" /> structure.
            </summary>
      <param name="icon">
        <see cref="T:System.Drawing.Icon" /> object to draw.</param>
      <param name="targetRect">
        <see cref="T:System.Drawing.Rectangle" /> structure that specifies the location and size of the resulting image on the display surface. The image contained in the icon parameter is scaled to the dimensions of this rectangular area.</param>
    </member>
    <member name="M:C1.C1Flash.FPage.DrawIcon(System.Drawing.Icon,System.Int32,System.Int32)">
      <summary>
            Draws the image represented by the specified <see cref="T:System.Drawing.Icon" /> object at the specified coordinates.
            </summary>
      <param name="icon">
        <see cref="T:System.Drawing.Icon" /> object to draw.</param>
      <param name="x">x-coordinate of the upper-left corner of the drawn image.</param>
      <param name="y">y-coordinate of the upper-left corner of the drawn image.</param>
    </member>
    <member name="M:C1.C1Flash.FPage.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.Point)">
      <summary>
            Draws the specified text string at the specified location with the specified <see cref="T:System.Drawing.Brush" /> and <see cref="T:System.Drawing.Font" /> objects.
            </summary>
      <param name="s">String to draw.</param>
      <param name="font">
        <see cref="T:System.Drawing.Font" /> object that defines the text format of the string. </param>
      <param name="brush">
        <see cref="T:System.Drawing.Brush" /> object that determines the color and texture of the drawn text. </param>
      <param name="point">
        <see cref="T:System.Drawing.Point" /> structure that specifies the upper-left corner of the drawn text. </param>
    </member>
    <member name="M:C1.C1Flash.FPage.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.PointF)">
      <summary>
            Draws the specified text string at the specified location with the specified <see cref="T:System.Drawing.Brush" /> and <see cref="T:System.Drawing.Font" /> objects.
            </summary>
      <param name="s">String to draw.</param>
      <param name="font">
        <see cref="T:System.Drawing.Font" /> object that defines the text format of the string. </param>
      <param name="brush">
        <see cref="T:System.Drawing.Brush" /> object that determines the color and texture of the drawn text. </param>
      <param name="point">
        <see cref="T:System.Drawing.PointF" /> structure that specifies the upper-left corner of the drawn text. </param>
    </member>
    <member name="M:C1.C1Flash.FPage.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.Rectangle)">
      <summary>
            Draws the specified text string in the specified rectangle with the specified <see cref="T:System.Drawing.Brush" /> and <see cref="T:System.Drawing.Font" /> objects.
            </summary>
      <param name="s">String to draw.</param>
      <param name="font">
        <see cref="T:System.Drawing.Font" /> object that defines the text format of the string.</param>
      <param name="brush">
        <see cref="T:System.Drawing.Brush" /> object that determines the color and texture of the drawn text.</param>
      <param name="layoutRectangle">
        <see cref="T:System.Drawing.Rectangle" /> structure that specifies the location of the drawn text.</param>
    </member>
    <member name="M:C1.C1Flash.FPage.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF)">
      <summary>
            Draws the specified text string in the specified rectangle with the specified <see cref="T:System.Drawing.Brush" /> and <see cref="T:System.Drawing.Font" /> objects.
            </summary>
      <param name="s">String to draw.</param>
      <param name="font">
        <see cref="T:System.Drawing.Font" /> object that defines the text format of the string.</param>
      <param name="brush">
        <see cref="T:System.Drawing.Brush" /> object that determines the color and texture of the drawn text.</param>
      <param name="layoutRectangle">
        <see cref="T:System.Drawing.RectangleF" /> structure that specifies the location of the drawn text.</param>
    </member>
    <member name="M:C1.C1Flash.FPage.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.Point,System.Drawing.StringFormat)">
      <summary>
            Draws the specified text string at the specified location with the specified <see cref="T:System.Drawing.Brush" /> 
            and <see cref="T:System.Drawing.Font" /> objects using the formatting attributes of the specified <see cref="T:System.Drawing.StringFormat" /> object.
            </summary>
      <param name="s">String to draw.</param>
      <param name="font">
        <see cref="T:System.Drawing.Font" /> object that defines the text format of the string.</param>
      <param name="brush">
        <see cref="T:System.Drawing.Brush" /> object that determines the color and texture of the drawn text.</param>
      <param name="point">
        <see cref="T:System.Drawing.Point" /> structure that specifies the upper-left corner of the drawn text.</param>
      <param name="format">
        <see cref="T:System.Drawing.StringFormat" /> object that specifies formatting attributes, such as line spacing and alignment, that are applied to the drawn text. </param>
    </member>
    <member name="M:C1.C1Flash.FPage.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.PointF,System.Drawing.StringFormat)">
      <summary>
            Draws the specified text string at the specified location with the specified <see cref="T:System.Drawing.Brush" /> 
            and <see cref="T:System.Drawing.Font" /> objects using the formatting attributes of the specified <see cref="T:System.Drawing.StringFormat" /> object.
            </summary>
      <param name="s">String to draw.</param>
      <param name="font">
        <see cref="T:System.Drawing.Font" /> object that defines the text format of the string.</param>
      <param name="brush">
        <see cref="T:System.Drawing.Brush" /> object that determines the color and texture of the drawn text.</param>
      <param name="point">
        <see cref="T:System.Drawing.PointF" /> structure that specifies the upper-left corner of the drawn text.</param>
      <param name="format">
        <see cref="T:System.Drawing.StringFormat" /> object that specifies formatting attributes, such as line spacing and alignment, that are applied to the drawn text.</param>
    </member>
    <member name="M:C1.C1Flash.FPage.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.Rectangle,System.Drawing.StringFormat)">
      <summary>
            Draws the specified text string in the specified rectangle with the specified <see cref="T:System.Drawing.Brush" />
             and <see cref="T:System.Drawing.Font" /> objects using the formatting attributes of the specified StringFormat object.
            </summary>
      <param name="s">String to draw.</param>
      <param name="font">
        <see cref="T:System.Drawing.Font" /> object that defines the text format of the string.</param>
      <param name="brush">
        <see cref="T:System.Drawing.Brush" /> object that determines the color and texture of the drawn text.</param>
      <param name="layoutRectangle">
        <see cref="T:System.Drawing.Rectangle" /> structure that specifies the location of the drawn text.</param>
      <param name="format">
        <see cref="T:System.Drawing.StringFormat" /> object that specifies formatting attributes, such as line spacing and alignment, that are applied to the drawn text.</param>
    </member>
    <member name="M:C1.C1Flash.FPage.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF,System.Drawing.StringFormat)">
      <summary>
            Draws the specified text string in the specified rectangle with the specified <see cref="T:System.Drawing.Brush" />
             and <see cref="T:System.Drawing.Font" /> objects using the formatting attributes of the specified <see cref="T:System.Drawing.StringFormat" /> object.
            </summary>
      <param name="s">String to draw.</param>
      <param name="font">
        <see cref="T:System.Drawing.Font" /> object that defines the text format of the string.</param>
      <param name="brush">
        <see cref="T:System.Drawing.Brush" /> object that determines the color and texture of the drawn text.</param>
      <param name="layoutRectangle">
        <see cref="T:System.Drawing.RectangleF" /> structure that specifies the location of the drawn text.</param>
      <param name="format">
        <see cref="T:System.Drawing.StringFormat" /> object that specifies formatting attributes, such as line spacing and alignment, that are applied to the drawn text.</param>
    </member>
    <member name="M:C1.C1Flash.FPage.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Single,System.Single)">
      <summary>
            Draws the specified text string at the specified location with the specified <see cref="T:System.Drawing.Brush" /> and <see cref="T:System.Drawing.Font" /> objects.
            </summary>
      <param name="s">String to draw.</param>
      <param name="font">
        <see cref="T:System.Drawing.Font" /> object that defines the text format of the string.</param>
      <param name="brush">
        <see cref="T:System.Drawing.Brush" /> object that determines the color and texture of the drawn text.</param>
      <param name="x">x coordinate of the upper-left corner of the drawn text.</param>
      <param name="y">y coordinate of the upper-left corner of the drawn text.</param>
    </member>
    <member name="M:C1.C1Flash.FPage.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Single,System.Single,System.Drawing.StringFormat)">
      <summary>
            Draws the specified text string at the specified location with the specified <see cref="T:System.Drawing.Brush" /> 
            and <see cref="T:System.Drawing.Font" /> objects using the formatting attributes of the specified <see cref="T:System.Drawing.StringFormat" /> object..
            </summary>
      <param name="s">String to draw.</param>
      <param name="font">
        <see cref="T:System.Drawing.Font" /> object that defines the text format of the string.</param>
      <param name="brush">
        <see cref="T:System.Drawing.Brush" /> object that determines the color and texture of the drawn text.</param>
      <param name="x">x coordinate of the upper-left corner of the drawn text.</param>
      <param name="y">y coordinate of the upper-left corner of the drawn text.</param>
      <param name="format">
        <see cref="T:System.Drawing.StringFormat" /> object that specifies formatting attributes, such as line spacing and alignment, that are applied to the drawn text.</param>
    </member>
    <member name="M:C1.C1Flash.FPage.DrawStringHtml(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF)">
      <summary>
            Draws Html string.
            </summary>
      <param name="s">String to draw.</param>
      <param name="font">
        <see cref="T:System.Drawing.Font" /> object that defines the text format of the string.</param>
      <param name="brush">
        <see cref="T:System.Drawing.Brush" /> object that determines the color and texture of the drawn text.</param>
      <param name="layoutRectangle">
        <see cref="T:System.Drawing.Rectangle" /> structure that specifies the location of the drawn text.</param>
    </member>
    <member name="M:C1.C1Flash.FPage.MeasureString(System.String,System.Drawing.Font,System.Single,System.Drawing.StringFormat)">
      <summary>
            Measures the specified string when drawn with the specified <see cref="T:System.Drawing.Font" /> object 
            and formatted with the specified <see cref="T:System.Drawing.StringFormat" /> object.
            </summary>
      <param name="text">String to measure.</param>
      <param name="font">
        <see cref="T:System.Drawing.Font" /> object that defines the text format of the string.</param>
      <param name="width">Maximum width of the string.</param>
      <param name="sf">
        <see cref="T:System.Drawing.StringFormat" /> object that represents formatting information, such as line spacing, for the string. </param>
      <returns>A <see cref="T:System.Drawing.SizeF" /> structure that contains the width and height of the string (in points) when rendered with a given font.</returns>
    </member>
    <member name="M:C1.C1Flash.FPage.MeasureString(System.String,System.Drawing.Font,System.Single)">
      <summary>
            Measures the specified string when drawn with the specified <see cref="T:System.Drawing.Font" /> object.
            </summary>
      <param name="text">String to measure.</param>
      <param name="font">
        <see cref="T:System.Drawing.Font" /> object that defines the text format of the string.</param>
      <param name="width">Maximum width of the string.</param>
      <returns>A <see cref="T:System.Drawing.SizeF" /> structure that contains the width and height of the string (in points) when rendered with a given font.</returns>
    </member>
    <member name="M:C1.C1Flash.FPage.MeasureString(System.String,System.Drawing.Font)">
      <summary>
            Measures the specified string when drawn with the specified <see cref="T:System.Drawing.Font" /> object.
            </summary>
      <param name="text">String to measure.</param>
      <param name="font">
        <see cref="T:System.Drawing.Font" /> object that defines the text format of the string.</param>
      <returns>A <see cref="T:System.Drawing.SizeF" /> structure that contains the width and height of the string (in points) when rendered with a given font.</returns>
    </member>
    <member name="M:C1.C1Flash.FPage.MeasureText(System.String,System.Drawing.Font)">
      <summary>
            Measure the size of a text string.
            </summary>
      <param name="text">The text to be measured.</param>
      <param name="font">The font of the text.</param>
      <returns>The size of the text.</returns>
    </member>
    <member name="M:C1.C1Flash.FPage.MultiplyTransform(System.Drawing.Drawing2D.Matrix)">
      <summary>
            Multiplies the world transformation of this page object and specified the <see cref="T:System.Drawing.Drawing2D.Matrix" /> object.
            </summary>
      <param name="matrix">4x4 <see cref="T:System.Drawing.Drawing2D.Matrix" /> object that multiplies the world transformation.</param>
      <remarks>
            This method prepends the matrix specified by the matrix parameter, so that the result is matrix x world transformation.
            </remarks>
    </member>
    <member name="M:C1.C1Flash.FPage.MultiplyTransform(System.Drawing.Drawing2D.Matrix,System.Drawing.Drawing2D.MatrixOrder)">
      <summary>
            Multiplies the world transformation of this page object and specified the <see cref="T:System.Drawing.Drawing2D.Matrix" /> object in the specified order.
            </summary>
      <param name="matrix">4x4 <see cref="T:System.Drawing.Drawing2D.Matrix" /> object that multiplies the world transformation.</param>
      <param name="order">Member of the <see cref="T:System.Drawing.Drawing2D.MatrixOrder" /> enumeration that determines the order of the multiplication.</param>
      <remarks>
            A value of MatrixOrder.Prepend for the order parameter specifies that the order of the multiplication is matrix x world transformation. 
            A value of MatrixOrder.Append for order specifies that the order of the multiplication is world transformation x matrix.
            </remarks>
    </member>
    <member name="M:C1.C1Flash.FPage.ResetTransform">
      <summary>
            Resets the world transformation matrix of this page object to the identity matrix.
            </summary>
      <remarks>
            The identity matrix represents a transformation with no scaling, rotation, or translation.
            </remarks>
    </member>
    <member name="M:C1.C1Flash.FPage.RotateTransform(System.Single)">
      <summary>
            Applies the specified rotation to the transformation matrix of this page object.
            </summary>
      <param name="angle">Angle of rotation in degrees.</param>
      <remarks>
            The rotation operation consists of multiplying the transformation matrix by a matrix whose elements are derived from the angle parameter. 
            This method applies the rotation by prepending it to the transformation matrix.
            </remarks>
    </member>
    <member name="M:C1.C1Flash.FPage.RotateTransform(System.Single,System.Drawing.Drawing2D.MatrixOrder)">
      <summary>
            Applies the specified rotation to the transformation matrix of this page object in the specified order.
            </summary>
      <param name="angle">Angle of rotation in degrees.</param>
      <param name="order">Member of the <see cref="T:System.Drawing.Drawing2D.MatrixOrder" /> enumeration that specifies whether the rotation is appended or prepended to the matrix transformation.</param>
      <remarks>
            The rotation operation consists of multiplying the transformation matrix by a matrix whose elements are derived from the angle parameter. 
            This method premultiplies (prepends) or postmultiplies (appends) the transformation matrix of the page object by the rotation matrix according to the order parameter.
            </remarks>
    </member>
    <member name="M:C1.C1Flash.FPage.ScaleTransform(System.Single,System.Single)">
      <summary>
            Applies the specified scaling operation to the transformation matrix of this page object by prepending it to the object's transformation matrix.
            </summary>
      <param name="sx">Scale factor in the x direction.</param>
      <param name="sy">Scale factor in the y direction.</param>
      <remarks>
            The scaling operation consists of multiplying the transformation matrix by a diagonal matrix whose elements are (sx, sy, 1). 
            This method premultiplies (prepends) the transformation matrix of the page object by the scaling matrix.
            </remarks>
    </member>
    <member name="M:C1.C1Flash.FPage.ScaleTransform(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)">
      <summary>
            Applies the specified scaling operation to the transformation matrix of this page object in the specified order.
            </summary>
      <param name="sx">Scale factor in the x direction.</param>
      <param name="sy">Scale factor in the y direction.</param>
      <param name="order">Member of the <see cref="T:System.Drawing.Drawing2D.MatrixOrder" /> enumeration that specifies whether the scaling operation is prepended or appended to the transformation matrix.</param>
      <remarks>
            The scaling operation consists of multiplying the transformation matrix by a diagonal matrix whose elements are (sx, sy, 1). 
            This method premultiplies (prepends) the transformation matrix of the page object by the scaling matrix.
            </remarks>
    </member>
    <member name="M:C1.C1Flash.FPage.TranslateTransform(System.Single,System.Single)">
      <summary>
            Prepends the specified translation to the transformation matrix of this page object.
            </summary>
      <param name="dx">x component of the translation.</param>
      <param name="dy">y component of the translation.</param>
      <remarks>
            The translation operation consists of multiplying the transformation matrix by a matrix whose translation part is the dx and dy parameters. 
            This method applies the translation by prepending the translation matrix to the transformation matrix.
            </remarks>
    </member>
    <member name="M:C1.C1Flash.FPage.TranslateTransform(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)">
      <summary>
            Applies the specified translation to the transformation matrix of this page object in the specified order.
            </summary>
      <param name="dx">x component of the translation.</param>
      <param name="dy">y component of the translation. </param>
      <param name="order">Member of the <see cref="T:System.Drawing.Drawing2D.MatrixOrder" /> enumeration that specifies whether the translation is prepended or appended to the transformation matrix.</param>
      <remarks>
            The translation operation consists of multiplying the transformation matrix by a matrix whose translation part is the dx and dy parameters. 
            This method premultiplies (prepends) or postmultiplies (appends) the transformation matrix of the page object by the translation matrix according to the order parameter.
            </remarks>
    </member>
    <member name="M:C1.C1Flash.FPage.PlaySound(System.String)">
      <summary>
            Plays the specified sound file in this frame.
            </summary>
      <returns>
            Returns the ID of the sound, which can be used to stop it.
            </returns>
    </member>
    <member name="M:C1.C1Flash.FPage.StopSound(System.UInt16)">
      <summary>
            Stops the sound.
            </summary>
    </member>
    <member name="P:C1.C1Flash.FPage.Width">
      <summary>
            Gets the width of the page in logical pixel unit.
            </summary>
    </member>
    <member name="P:C1.C1Flash.FPage.Height">
      <summary>
            Gets the height of the page in logical pixel unit.
            </summary>
    </member>
    <member name="P:C1.C1Flash.FPage.Transform">
      <summary>
            Gets or sets the world transformation for this page.
            </summary>
      <remarks>See the <see cref="T:System.Drawing.Drawing2D.Matrix" /> for more information.</remarks>
    </member>
    <member name="M:C1.C1Flash.C1FlashCanvas.#ctor">
      <summary>
            Initialize a new instance of C1FlashCanvas object.
            </summary>
      <remarks>
            The default width and height of the C1FlashCanvas object is 550x400 in logical pixels. 
            </remarks>
    </member>
    <member name="M:C1.C1Flash.C1FlashCanvas.#ctor(System.Int32,System.Int32)">
      <summary>
            Initialize a new instance of C1FlashCanvas object.
            </summary>
      <param name="width">The width of the canvas.</param>
      <param name="height">The height of the canvas.</param>
    </member>
    <member name="M:C1.C1Flash.C1FlashCanvas.GetHashCode">
      <summary>
            Serves as a hash function.
            </summary>
      <returns>A hash code for the current Object.</returns>
    </member>
    <member name="M:C1.C1Flash.C1FlashCanvas.Clear(System.Drawing.Color)">
      <summary>
            Clears all the content of the canvas.
            </summary>
      <param name="color">
            Color structure that represents the background color of the drawing surface.
            </param>
    </member>
    <member name="M:C1.C1Flash.C1FlashCanvas.RenderToFile(System.String)">
      <summary>
            Renders the flash content to a SWF file.
            </summary>
      <param name="fileName">
            The SWF file name.
            </param>
    </member>
    <member name="M:C1.C1Flash.C1FlashCanvas.RenderToStream(System.IO.MemoryStream)">
      <summary>
            Renders the flash content to a memory stream.
            </summary>
      <param name="memStream">
            The memory stream the flash content to be rendered to.
            </param>
    </member>
    <member name="P:C1.C1Flash.C1FlashCanvas.Width">
      <summary>
            Gets or sets the width of the canvas.
            </summary>
      <remarks>
            The default value is 550 in logical pixel.
            </remarks>
    </member>
    <member name="P:C1.C1Flash.C1FlashCanvas.Height">
      <summary>
            Gets or sets the height of the canvas.
            </summary>
      <remarks>
            The default value is 400 in logical pixel.
            </remarks>
    </member>
    <member name="T:C1.C1Flash.C1FlashMovie">
      <summary>
            C1FlashMovie is a class (component) that can be used to create multi-frames animation. 
            You are allowed to add/remove/transform graphical objects to the frames. 
            </summary>
      <remarks>
        <para>
            The coordinate in C1FlashMovie is twip, which is the measurement used by the Macromedia SWF specification. 
            In the SWF format, a twip is 1/20th of a logical pixel. 
            A logical pixel is the same as a screen pixel when the movie is played at 100%¡ªthat is, without scaling.
            </para>
      </remarks>
    </member>
    <member name="M:C1.C1Flash.C1FlashMovie.#ctor">
      <summary>
            Initialize a new instance of C1FlashMovie object.
            </summary>
      <remarks>
            The default width and height is 11000x8000 twips, the default frame rate is 12 frames/second.
            </remarks>
    </member>
    <member name="M:C1.C1Flash.C1FlashMovie.#ctor(System.Int32,System.Int32)">
      <summary>
            Initialize a new instance of C1FlashMovie object with the specified width and height.
            </summary>
      <param name="width">Width of the movie.</param>
      <param name="height">Height of the movie.</param>
    </member>
    <member name="M:C1.C1Flash.C1FlashMovie.#ctor(System.Int32,System.Int32,System.Single)">
      <summary>
            Initialize a new instance of C1FlashMovie object with the specified width, height and frame rate.
            </summary>
      <param name="width">Width of the movie.</param>
      <param name="height">Height of the movie.</param>
      <param name="frameRate">Frame rate.</param>
    </member>
    <member name="M:C1.C1Flash.C1FlashMovie.GetHashCode">
      <summary>
            Serves as a hash function.
            </summary>
      <returns>A hash code for the current Object.</returns>
    </member>
    <member name="M:C1.C1Flash.C1FlashMovie.Frames(System.Int32)">
      <summary>
            Gets a frame object from the index.
            </summary>
      <remarks>
            If the frame does not exist, this method will create one automatically.
            </remarks>
    </member>
    <member name="M:C1.C1Flash.C1FlashMovie.Clean">
      <summary>
            Cleans the movie.
            </summary>
      <remarks>
            This method cleans all the frames, gives user a new start to make movie.
            </remarks>
    </member>
    <member name="M:C1.C1Flash.C1FlashMovie.RenderToFile(System.String)">
      <summary>
            Renders the graphical content to a SWF file.
            </summary>
    </member>
    <member name="M:C1.C1Flash.C1FlashMovie.RenderToStream(System.IO.MemoryStream)">
      <summary>
            Renders the graphical content to a memory stream.
            </summary>
    </member>
    <member name="P:C1.C1Flash.C1FlashMovie.FrameRate">
      <summary>
            Gets or sets the frame rate of the movie.
            </summary>
      <remarks>
            The default value is 12 frames/second.
            </remarks>
    </member>
    <member name="P:C1.C1Flash.C1FlashMovie.Width">
      <summary>
            Gets or sets the width of the movie in twips.
            </summary>
      <remarks>
            The default value is 11000 twips.
            </remarks>
    </member>
    <member name="P:C1.C1Flash.C1FlashMovie.Height">
      <summary>
            Gets or sets the height of the movie in twips.
            </summary>
      <remarks>
            The default value is 8000 twips.
            </remarks>
    </member>
    <member name="P:C1.C1Flash.C1FlashMovie.BackgroundColor">
      <summary>
            Gets or sets the back ground color.
            </summary>
    </member>
    <member name="P:C1.C1Flash.C1FlashMovie.Item(System.Int32)">
      <summary>
            Gets a frame object from the index.
            </summary>
      <remarks>
            If the frame does not exist, this method will create one automatically.
            </remarks>
    </member>
    <member name="T:C1.C1Flash.SlideMode">
      <summary>
            Enumeration determins whether the slide is played automatically or manually.
            </summary>
    </member>
    <member name="F:C1.C1Flash.SlideMode.Automatic">
      <summary>
            The slide is played automatically.
            </summary>
    </member>
    <member name="F:C1.C1Flash.SlideMode.Manual">
      <summary>
            The slide is played manually, user has to navigate the pages with navigation buttons.
            </summary>
    </member>
    <member name="T:C1.C1Flash.C1FlashSlide">
      <summary>
            C1FlashSlide is a class (component) that can be used to create slide show in the Macromedia Flash file format. 
            </summary>
      <remarks>
        <para>
            Each page of the slide is an FPage class that provides the similar methods to those in the .NET Graphics class.
            </para>
        <para>
            With the powerful slide designer, user can layout and specify the properties of the UI elements in a convenient way, such as navigation buttons, page header, page footer and page number.
            </para>
        <para>
            The coordinate in C1FlashSlide is logical pixel.
            </para>
      </remarks>
    </member>
    <member name="M:C1.C1Flash.C1FlashSlide.#ctor">
      <summary>
            Initialize a new instance of C1FlashSlide object.
            </summary>
      <remarks>
            The default size is 550x400 in logical pixel.
            </remarks>
    </member>
    <member name="M:C1.C1Flash.C1FlashSlide.#ctor(System.Int32,System.Int32)">
      <summary>
            Initialize a new instance of C1FlashSlide object with the specified width and height.
            </summary>
    </member>
    <member name="M:C1.C1Flash.C1FlashSlide.GetHashCode">
      <summary>
            Serves as a hash function.
            </summary>
      <returns>A hash code for the current Object.</returns>
    </member>
    <member name="M:C1.C1Flash.C1FlashSlide.Clean">
      <summary>
            Cleans all the slide pages.
            </summary>
      <remarks>
            This method cleans all the slide pages, gives user a new start.
            </remarks>
    </member>
    <member name="M:C1.C1Flash.C1FlashSlide.AddPage">
      <summary>
            Adds a new page object to the slide.
            </summary>
      <remarks>
            This method creates and adds a page object to the slide, please see the <see cref="T:C1.C1Flash.FPage" /> class for more details of the page object.
            </remarks>
    </member>
    <member name="M:C1.C1Flash.C1FlashSlide.CreatePrevButton">
      <summary>
            Creates the button object for Previous Button.
            </summary>
      <returns>The FButton object.</returns>
    </member>
    <member name="M:C1.C1Flash.C1FlashSlide.CreateNextButton">
      <summary>
            Creates the button object for Next Button.
            </summary>
      <returns>The FButton object.</returns>
    </member>
    <member name="M:C1.C1Flash.C1FlashSlide.CreateLastButton">
      <summary>
            Creates the button object for Last Button.
            </summary>
      <returns>The FButton object.</returns>
    </member>
    <member name="M:C1.C1Flash.C1FlashSlide.CreatePageHeader">
      <summary>
            Creates the text object for page header.
            </summary>
      <returns>The FEditText object.</returns>
    </member>
    <member name="M:C1.C1Flash.C1FlashSlide.CreatePageFooter">
      <summary>
            Creates the text object for page footer.
            </summary>
      <returns>The FEditText object.</returns>
    </member>
    <member name="M:C1.C1Flash.C1FlashSlide.CreatePageNumber(System.Int32,System.Int32)">
      <summary>
            Creates the text object for page number by the index.
            </summary>
      <param name="index">The page index.</param>
      <returns>The FEditText object.</returns>
    </member>
    <member name="M:C1.C1Flash.C1FlashSlide.RenderToFile(System.String)">
      <summary>
            Renders all the pages to a SWF file.
            </summary>
    </member>
    <member name="M:C1.C1Flash.C1FlashSlide.RenderToStream(System.IO.MemoryStream)">
      <summary>
            Renders all the pages to a memory stream.
            </summary>
    </member>
    <member name="P:C1.C1Flash.C1FlashSlide.PageCount">
      <summary>
            Gets or sets the number of pages.
            </summary>
    </member>
    <member name="P:C1.C1Flash.C1FlashSlide.BackgroundColor">
      <summary>
            Gets or sets the back ground color.
            </summary>
    </member>
    <member name="P:C1.C1Flash.C1FlashSlide.Width">
      <summary>
            Gets or sets the width of the slide.
            </summary>
    </member>
    <member name="P:C1.C1Flash.C1FlashSlide.Height">
      <summary>
            Gets or sets the height of the slide.
            </summary>
    </member>
    <member name="P:C1.C1Flash.C1FlashSlide.SlideMode">
      <summary>
            Gets or sets slide mode.
            </summary>
      <remarks>
            The SlideMode enumeration has two values:
            	-Manual		Play the slide show with navigation buttons.
            	-Automatic	Play the slide show automatically with the interval delay time
            </remarks>
    </member>
    <member name="P:C1.C1Flash.C1FlashSlide.Interval">
      <summary>
            Gets or sets the interval time between pages in millisecond.
            </summary>
    </member>
    <member name="P:C1.C1Flash.C1FlashSlide.Item(System.Int32)">
      <summary>
            Gets a <see cref="T:C1.C1Flash.FPage" /> object by the index.
            </summary>
    </member>
    <member name="T:C1.C1Flash.Constants">
      <summary>
            Constants used in C1Flash.
            </summary>
    </member>
    <member name="F:C1.C1Flash.Constants.TWIPS">
      <summary>
            The number of twips a logic pixel has.
            </summary>
    </member>
    <member name="F:C1.C1Flash.Constants.FIXED_1">
      <summary>
            Fixed point number, value 1.0.
            </summary>
    </member>
    <member name="F:C1.C1Flash.Constants.FIXED_2">
      <summary>
            Fixed point number, value 2.0.
            </summary>
    </member>
    <member name="F:C1.C1Flash.Constants.FIXED_HALF">
      <summary>
            Fixed point number, value 0.5.
            </summary>
    </member>
    <member name="F:C1.C1Flash.Constants.INFINITY">
      <summary>
            Infinite number value.
            </summary>
    </member>
    <member name="F:C1.C1Flash.Constants.FIXED_SQR2">
      <summary>
            Fixed point numner, value sqrt(2)
            </summary>
    </member>
    <member name="M:C1.C1Flash.Constants.FixedToFloat(System.Int32)">
      <summary>
            Converts a integer number to a SWF format fixed point number.
            </summary>
      <param name="num">Integer number.</param>
      <returns>SWF format fixed point number.</returns>
    </member>
    <member name="M:C1.C1Flash.Constants.FloatToFixed(System.Single)">
      <summary>
            Converts a float number to a SWF format fixed point number.
            </summary>
      <param name="num">Float number.</param>
      <returns>SWF format fixed point number.</returns>
    </member>
    <member name="T:C1.C1Flash.Entity">
      <summary>
            Class that represents the location, size and visibility of a UI element in slide designer.
            </summary>
    </member>
    <member name="M:C1.C1Flash.Entity.#ctor">
      <summary>
            Initialize a new instance of Entity class.
            </summary>
    </member>
    <member name="M:C1.C1Flash.Entity.#ctor(System.Drawing.Point,System.Drawing.Size)">
      <summary>
            Initialize a new instance of Entity class with the specified location and size.
            </summary>
      <param name="location">Location of the entity.</param>
      <param name="size">Size of the entity.</param>
    </member>
    <member name="M:C1.C1Flash.Entity.#ctor(System.String)">
      <summary>
            Initialize a new instance of Entity entity with the text string.
            </summary>
      <param name="text">The text string of this entity.</param>
    </member>
    <member name="M:C1.C1Flash.Entity.#ctor(System.String,System.Drawing.Point,System.Drawing.Size)">
      <summary>
            Initialize a new instance of Entity entity with the text string, location and size.
            </summary>
      <param name="text">The text string of this entity.</param>
      <param name="location">Location of the entity.</param>
      <param name="size">Size of the entity.</param>
    </member>
    <member name="P:C1.C1Flash.Entity.Visible">
      <summary>
            Gets or sets the visibility of the entity.
            </summary>
    </member>
    <member name="P:C1.C1Flash.Entity.Location">
      <summary>
            Gets or sets the location of the entity.
            </summary>
    </member>
    <member name="P:C1.C1Flash.Entity.Size">
      <summary>
            Gets or sets the size of the entity.
            </summary>
    </member>
    <member name="P:C1.C1Flash.Entity.Text">
      <summary>
            Gets or sets the text of this entity.
            </summary>
    </member>
    <member name="P:C1.C1Flash.Entity.Font">
      <summary>
            Gets or sets the font associated with the text display.
            </summary>
    </member>
    <member name="P:C1.C1Flash.Entity.ForeColor">
      <summary>
            Gets or sets the foreground color associated with the text display.
            </summary>
    </member>
    <member name="P:C1.C1Flash.Entity.TextAlign">
      <summary>
            Gets or set the text alignment.
            </summary>
    </member>
    <member name="T:C1.C1Flash.StaticText">
      <summary>
            Class that represents a text entity appears in slide designer.
            </summary>
    </member>
    <member name="M:C1.C1Flash.StaticText.#ctor(System.String)">
      <summary>
            Initialize a new instance of StaticText entity with the text string.
            </summary>
      <param name="text">The text string of this entity.</param>
    </member>
    <member name="M:C1.C1Flash.StaticText.#ctor(System.String,System.Drawing.Point,System.Drawing.Size)">
      <summary>
            Initialize a new instance of StaticText entity with the text string, location and size.
            </summary>
      <param name="text">The text string of this entity.</param>
      <param name="location">Location of the entity.</param>
      <param name="size">Size of the entity.</param>
    </member>
    <member name="T:C1.C1Flash.PageNumber">
      <summary>
            Class that represents a page number entity appears in slide designer.
            </summary>
    </member>
    <member name="M:C1.C1Flash.PageNumber.#ctor">
      <summary>
            Initialize a new instance of PageNumber entity.
            </summary>
    </member>
    <member name="M:C1.C1Flash.PageNumber.#ctor(System.Drawing.Point,System.Drawing.Size)">
      <summary>
            Initialize a new instance of PageNumber entity.
            </summary>
      <param name="location">Location of the entity.</param>
      <param name="size">Size of the entity.</param>
    </member>
    <member name="T:C1.C1Flash.Base.FSWFStream">
      <summary>
            Class used to store data before it is written to a .swf file
            </summary>
    </member>
    <member name="M:C1.C1Flash.Base.FSWFStream.#ctor">
      <summary>
            Initialize a FSWFStream object.
            </summary>
    </member>
    <member name="M:C1.C1Flash.Base.FSWFStream.WriteBits(System.UInt32,System.UInt32)">
      <summary>
            Adds 'size' bits from 'data' to the FSWFStream.
            </summary>
      <remarks>
            Data is in the form of an unsigned integer.
            Size indicates how many of the 32 bits are significant and should be output.
            It checks how many bits are available in the current output byte
            and works by repeatedly stuffing it with the next bits from 'data' 
            and then adding currentByte to the until all "size" bits have been output.  
            </remarks>
      <param name="data">Data to write.</param>
      <param name="size">Bits of the data to write.</param>
    </member>
    <member name="M:C1.C1Flash.Base.FSWFStream.WriteLargeData(System.Byte[],System.UInt32)">
      <summary>
            Writes large data to the stream.
            </summary>
      <param name="data">Data block in byte array.</param>
      <param name="size">Size of the data block.</param>
    </member>
    <member name="M:C1.C1Flash.Base.FSWFStream.FlushBits">
      <summary>
            Kick out the current partially filled byte to the this.
            </summary>
      <remarks>
            If there is a byte currently being built for addition to the this, then the end of that
            byte is filled with zeroes and the byte is added to the this.
            </remarks>
    </member>
    <member name="M:C1.C1Flash.Base.FSWFStream.WriteDWord(System.UInt32)">
      <summary>
            Writes a 32 bit stream of data to given FSWFStream in reversed byte order.
            </summary>
      <remarks>
            Data will be written in reserved byte order, so B1B2B3B4 is written as B4B3B2B1.
            The function does this by sending a byte at a time
            of the data to the FSWFStream in the appropriate order.
            </remarks>
      <param name="data">Data to write.</param>
    </member>
    <member name="M:C1.C1Flash.Base.FSWFStream.WriteWord(System.UInt32)">
      <summary>
            Writes a 16 bit stream of data to the FSWFStream.
            </summary>
      <remarks>
            The data will be written in reversed order, so B1B2 is written as B2B1.
            </remarks>
      <param name="data">The data to write.</param>
    </member>
    <member name="M:C1.C1Flash.Base.FSWFStream.WriteByte(System.UInt32)">
      <summary>
            Writes an 8 bit stream of data to the FSWFStream.
            </summary>
      <remarks>
            There is no bit swapping!! A byte is written as a byte.
            </remarks>
      <param name="data">The data to write.</param>
    </member>
    <member name="M:C1.C1Flash.Base.FSWFStream.GetBuffer">
      <summary>
            Gets the data buffer.
            </summary>
      <returns>Data buffer in byte array.</returns>
    </member>
    <member name="M:C1.C1Flash.Base.FSWFStream.Append(C1.C1Flash.Base.FSWFStream)">
      <summary>
            Appends another stream to this stream.
            </summary>
      <remarks>
            Doesn't actually write the bitmaps, jpegs ...  
            Instead it just writes their file name with a note that the actual file should go there.
            </remarks>
      <param name="srcStream">The stream to be appended.</param>
    </member>
    <member name="M:C1.C1Flash.Base.FSWFStream.DumpToFile(System.String)">
      <summary>
            Writes the stream FSWFStream to the given file.
            </summary>
      <param name="swfFile">Name of the SWF file to write.</param>
      <returns>Number of byte written.</returns>
    </member>
    <member name="M:C1.C1Flash.Base.FSWFStream.DumpToMemory(System.IO.MemoryStream)">
      <summary>
            Writes the stream to a memory stream.
            </summary>
      <param name="stream">The memory stream.</param>
      <returns>Number of byte written.</returns>
    </member>
    <member name="M:C1.C1Flash.Base.FSWFStream.MinBits(System.UInt32,System.UInt16)">
      <summary>
            Calculates the minimum number of bits necessary to represent the given number.
            </summary>
      <remarks>
            The number should be given in its unsigned form with the flag sign equal to 1 if it is 
            signed.  Repeatedly compares number to another unsigned int called x.  
            x is initialized to 1.  The value of x is shifted left i times until x is greater 
            than number.  Now i is equal to the number of bits the UNSIGNED value of number needs.
            The signed value will need one more bit for the sign so i+1 is returned if the number
            is signed, and i is returned if the number is unsigned.
            </remarks>
      <param name="number">The numbe to be calculated.</param>
      <param name="sign">1 or 0 to indicates whether the number is a signed value or not.</param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Flash.Base.FSWFStream.MaxNum(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Compares the absolute values of 4 signed integers and returns the unsigned magnitude of
            the number with the greatest absolute value.
            </summary>
      <param name="a">Number a.</param>
      <param name="b">Number b.</param>
      <param name="c">Number c.</param>
      <param name="d">Number d.</param>
      <returns>
            The unsigned magnitude of the number with the greatest absolute value.
            </returns>
    </member>
    <member name="P:C1.C1Flash.Base.FSWFStream.Size">
      <summary>
            Returns the size of the FSWFStream.
            </summary>
    </member>
    <member name="T:C1.C1Flash.FButtonEvent">
      <summary>
            Enumeration that defines the event releated to button actions.
            </summary>
    </member>
    <member name="F:C1.C1Flash.FButtonEvent.MENU_DRAG_OUT">
      <summary>
            Mouse is dragged outside the hit area while the mouse button is down.
            Valid only for menu buttons.
            </summary>
    </member>
    <member name="F:C1.C1Flash.FButtonEvent.MENU_DRAG_OVER">
      <summary>
            Mouse is dragged inside the hit area while the mouse button is down.
            Valid only for menu buttons.
            </summary>
    </member>
    <member name="F:C1.C1Flash.FButtonEvent.PUSH_RELEASE_OUTSIDE">
      <summary>
            Mouse button is released outside the hit area while the mouse is captured.
            Valid only for push buttons.
            </summary>
    </member>
    <member name="F:C1.C1Flash.FButtonEvent.PUSH_DRAG_OVER">
      <summary>
            Mouse is dragged inside the hit area while the mouse button is down.
            Valid only for push buttons.
            </summary>
    </member>
    <member name="F:C1.C1Flash.FButtonEvent.PUSH_DRAG_OUT">
      <summary>
            Mouse is dragged outside the hit area while the mouse button is down.
            Valid only for push buttons.
            </summary>
    </member>
    <member name="F:C1.C1Flash.FButtonEvent.RELEASE">
      <summary>
            Mouse button is released while the mouse is inside the hit area.
            </summary>
    </member>
    <member name="F:C1.C1Flash.FButtonEvent.PRESS">
      <summary>
            Mouse button is pressed while the mouse is inside the hit area.
            </summary>
    </member>
    <member name="F:C1.C1Flash.FButtonEvent.ROLL_OUT">
      <summary>
            Mouse leaves the hit area while the mouse button is up.
            </summary>
    </member>
    <member name="F:C1.C1Flash.FButtonEvent.ROLL_OVER">
      <summary>
            Mouse enters the hit area while the mouse button is up.
            </summary>
    </member>
    <member name="T:C1.C1Flash.FImageFillType">
      <summary>
            The fill type for images.
            </summary>
    </member>
    <member name="F:C1.C1Flash.FImageFillType.Tile">
      <summary>
            Tile the image into the area.
            </summary>
    </member>
    <member name="F:C1.C1Flash.FImageFillType.Fill">
      <summary>
            Fill the image into the area, the size of the image will be ajusted according to the size of the area.
            </summary>
    </member>
    <member name="T:C1.C1Flash.FAlignment">
      <summary>
            Specifies the horizontal alignment of text.
            </summary>
    </member>
    <member name="F:C1.C1Flash.FAlignment.Left">
      <summary>
            Left align.
            </summary>
    </member>
    <member name="F:C1.C1Flash.FAlignment.Right">
      <summary>
            Right align.
            </summary>
    </member>
    <member name="F:C1.C1Flash.FAlignment.Center">
      <summary>
            Center align.
            </summary>
    </member>
    <member name="F:C1.C1Flash.FAlignment.Justify">
      <summary>
            Justify the text.
            </summary>
    </member>
    <member name="T:C1.C1Flash.FArc">
      <summary>
            Class the represents a arc shape.
            </summary>
    </member>
    <member name="T:C1.C1Flash.FShape">
      <summary>
            Base class for all the shape objects.
            </summary>
    </member>
    <member name="T:C1.C1Flash.FObject">
      <summary>
            Abstract base class for objects that can be added to frame. For example, any shape class, FFont class, etc.
            </summary>
    </member>
    <member name="P:C1.C1Flash.FObject.ID">
      <summary>
            Gets the object ID.
            </summary>
    </member>
    <member name="P:C1.C1Flash.FObject.Depth">
      <summary>
            Gets or sets the depth for this object in the frame.
            </summary>
    </member>
    <member name="M:C1.C1Flash.FShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Initialize a FShape object.
            </summary>
      <param name="xmin">Left position of shape bounds.</param>
      <param name="ymin">Top position of shape bounds.</param>
      <param name="xmax">Right position of shape bounds.</param>
      <param name="ymax">Bottom position of shape bounds.</param>
    </member>
    <member name="M:C1.C1Flash.FShape.#ctor(System.Drawing.Rectangle)">
      <summary>
            nitialize a FShape object.
            </summary>
      <param name="rectangle">Shape bounds.</param>
    </member>
    <member name="M:C1.C1Flash.FShape.Rotate(System.Single)">
      <summary>
            Rotates the shape about its own center.
            </summary>
      <param name="degree">Degree value to rotate.</param>
    </member>
    <member name="M:C1.C1Flash.FShape.Scale(System.Single,System.Single)">
      <summary>
            Scales the shape about its own center.
            </summary>
      <param name="scaleX">Ratio to scale in X direction.</param>
      <param name="scaleY">Ratio to scale in Y direction.</param>
    </member>
    <member name="M:C1.C1Flash.FShape.Translate(System.Int32,System.Int32)">
      <summary>
            Offsets the shape.
            </summary>
      <param name="offsetX">Offset in X direction.</param>
      <param name="offsetY">Offset in Y direction.</param>
    </member>
    <member name="M:C1.C1Flash.FShape.ResetTransform">
      <summary>
            Resets the transformation.
            </summary>
    </member>
    <member name="M:C1.C1Flash.FShape.ClearFilling">
      <summary>
            Clears the fill if has.
            </summary>
    </member>
    <member name="M:C1.C1Flash.FShape.FillSolidColor(System.Drawing.Color)">
      <summary>
            Fills the shape with solid color.
            </summary>
      <param name="color">The color to fill.</param>
    </member>
    <member name="M:C1.C1Flash.FShape.FillGradientColor(System.Drawing.Drawing2D.ColorBlend,System.Boolean)">
      <summary>
            Fills the shape with gradient colors.
            </summary>
      <param name="blend">The <see cref="T:System.Drawing.Drawing2D.ColorBlend" /> objects that specifies the gradient information.</param>
      <param name="linear">Indicates it is a linear or radiate gradient fill.</param>
    </member>
    <member name="M:C1.C1Flash.FShape.FillGradientColor(System.Drawing.Color,System.Drawing.Color,System.Boolean)">
      <summary>
            Fills the shape with gradient colors.
            </summary>
      <param name="a">Color of start point.</param>
      <param name="b">Color of end point.</param>
      <param name="linear">Indicates it is a linear or radiate gradient fill.</param>
    </member>
    <member name="M:C1.C1Flash.FShape.FillImage(System.Drawing.Image)">
      <summary>
            Fills the shape with a image.
            </summary>
      <param name="img">The image to fill.</param>
      <returns>The ID of the define tag. Could be used later.</returns>
    </member>
    <member name="M:C1.C1Flash.FShape.FillImage(System.String)">
      <summary>
            Fills the shape with image specified by a full path file name.
            </summary>
      <param name="filename">The full path name of the image file.</param>
      <returns>The ID of the define tag.</returns>
    </member>
    <member name="M:C1.C1Flash.FShape.FillJpeg(System.Int32,System.Int32,System.String)">
      <summary>
            Fills the shape with a JPEG file.
            </summary>
      <param name="width">Width of the image.</param>
      <param name="height">Height of the image.</param>
      <param name="jpegFilename">The full path name of the JPEG file.</param>
      <returns>
      </returns>
    </member>
    <member name="P:C1.C1Flash.FShape.FillMode">
      <summary>
            Specifies how the interior of a closed path is filled.
            </summary>
      <remarks>
            Please see the <see cref="T:System.Drawing.Drawing2D.FillMode" /> for details.
            </remarks>
    </member>
    <member name="P:C1.C1Flash.FShape.ImageFillType">
      <summary>
            Specifies the image fill type.
            </summary>
      <remarks>
            Please see the definition of <see cref="T:C1.C1Flash.FImageFillType" /> for details.
            </remarks>
    </member>
    <member name="P:C1.C1Flash.FShape.Bounds">
      <summary>
            Gets or sets the bounds of this shape.
            </summary>
    </member>
    <member name="P:C1.C1Flash.FShape.LineColor">
      <summary>
            Gets or sets the line color of this shape.
            </summary>
    </member>
    <member name="P:C1.C1Flash.FShape.LineWidth">
      <summary>
            Gets or sets the line width of this shape.
            </summary>
      <remarks>
            The width is in twips measurement.
            </remarks>
    </member>
    <member name="P:C1.C1Flash.FShape.Opacity">
      <summary>
            Gets or sets the Opacity level for this shape.
            </summary>
      <remarks>
            This value overrides the <see cref="P:C1.C1Flash.FFrame.Opacity" /> value defined in <see cref="T:C1.C1Flash.FFrame" /> object.
            </remarks>
    </member>
    <member name="M:C1.C1Flash.FArc.#ctor(System.Drawing.Rectangle,System.Single,System.Single)">
      <summary>
            Initialize a new instance of FArc.
            </summary>
      <param name="rectangle">The bounds of this arc.</param>
      <param name="startAngle">Start angle.</param>
      <param name="sweepAngle">Sweep angle.</param>
    </member>
    <member name="M:C1.C1Flash.FArc.#ctor(System.Drawing.Rectangle,System.Single,System.Single,System.Boolean,System.Boolean)">
      <summary>
            Initialize a new instance of FArc.
            </summary>
      <param name="rectangle">Bounds rectangle.</param>
      <param name="startAngle">Start angle.</param>
      <param name="sweepAngle">Sweep angle.</param>
      <param name="pie">Indicates whether the arc is closed to a pie shape.</param>
      <param name="chord">Indicates whether the arc is closed to a chord shape.</param>
      <remarks>
            Only one of pie or chord parameter can be set to true at the same time.
            </remarks>
    </member>
    <member name="T:C1.C1Flash.FBeziers">
      <summary>
            Class that represents a bezier curver line.
            </summary>
    </member>
    <member name="M:C1.C1Flash.FBeziers.#ctor(System.Drawing.Point[])">
      <summary>
            Initialize a FBeziers.
            </summary>
      <param name="points">Array of points.</param>
      <remarks>
            The number of points should be greater or equal to 3.
            The number of points should be odd.
            The points array is started by a anchor point, then control point, then anchor point...so on.
            </remarks>
    </member>
    <member name="T:C1.C1Flash.FButton">
      <summary>
            Class that represents a button object.
            </summary>
    </member>
    <member name="M:C1.C1Flash.FButton.#ctor(C1.C1Flash.FShape,C1.C1Flash.FShape,C1.C1Flash.FShape,C1.C1Flash.FShape)">
      <summary>
            Initialize a FButton.
            </summary>
      <param name="shapeUp">
        <see cref="T:C1.C1Flash.FShape" /> for up state.</param>
      <param name="shapeOver">
        <see cref="T:C1.C1Flash.FShape" /> for over state.</param>
      <param name="shapeDown">
        <see cref="T:C1.C1Flash.FShape" /> for down state.</param>
      <param name="shapeHit">
        <see cref="T:C1.C1Flash.FShape" /> for hit state.</param>
    </member>
    <member name="M:C1.C1Flash.FButton.AddAction(C1.C1Flash.FButtonEvent,C1.C1Flash.Base.FActionRecord)">
      <summary>
            Associate a button event with a action record.
            </summary>
      <param name="ev">Button event. Please see <see cref="T:C1.C1Flash.FButtonEvent" />.</param>
      <param name="record">Action record that specifying an action to be performed by the Flash player when the event happens. Please see <see cref="T:C1.C1Flash.Base.FActionRecord" /></param>
    </member>
    <member name="T:C1.C1Flash.FCircle">
      <summary>
            Class that represents a circle shape.
            </summary>
    </member>
    <member name="T:C1.C1Flash.FOval">
      <summary>
            Class that represents a oval shape.
            </summary>
    </member>
    <member name="M:C1.C1Flash.FOval.#ctor(System.Drawing.Rectangle)">
      <summary>
            Initialize a FOval.
            </summary>
      <param name="rect">Bounds rectangle of the oval shape.</param>
    </member>
    <member name="M:C1.C1Flash.FCircle.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>
            Initialize a FCircle.
            </summary>
      <param name="centerX">X position of center.</param>
      <param name="centeryY">Y position of center.</param>
      <param name="radius">Radius of the circle.</param>
    </member>
    <member name="M:C1.C1Flash.FCircle.#ctor(System.Drawing.Point,System.Int32)">
      <summary>
            Initialize a FCircle.
            </summary>
      <param name="center">Position of the center.</param>
      <param name="radius">Radius of the circle.</param>
    </member>
    <member name="T:C1.C1Flash.FEditText">
      <summary>
            Class that represents a dynamic text.
            </summary>
    </member>
    <member name="M:C1.C1Flash.FEditText.#ctor(System.Drawing.Rectangle,System.String)">
      <summary>
            Initialize a FEditText.
            </summary>
      <param name="rect">Bounds rectangle.</param>
      <param name="text">Text string for display.</param>
    </member>
    <member name="M:C1.C1Flash.FEditText.#ctor(System.Drawing.Rectangle,System.String,System.String)">
      <summary>
            Initialize a FEditText.
            </summary>
      <param name="rect">Bounds rectangle.</param>
      <param name="text">Text string for display.</param>
      <param name="fontName">Font name associated for text display.</param>
    </member>
    <member name="M:C1.C1Flash.FEditText.#ctor(System.Drawing.Rectangle,System.String,System.String,System.Boolean,System.Boolean)">
      <summary>
            Initialize a FEditText.
            </summary>
      <param name="rect">Bounds rectangle.</param>
      <param name="text">Text string for display.</param>
      <param name="fontName">Font name associated for text display.</param>
      <param name="italic">Indicates whether the text is in italic.</param>
      <param name="bold">Indicates whether the text is in bold.</param>
    </member>
    <member name="P:C1.C1Flash.FEditText.Font">
      <summary>
            Gets or sets the <see cref="T:C1.C1Flash.FFont2" /> object assocated with the object.
            </summary>
    </member>
    <member name="P:C1.C1Flash.FEditText.ForeColor">
      <summary>
            Gets or sets the forr ground color for text display.
            </summary>
    </member>
    <member name="P:C1.C1Flash.FEditText.Text">
      <summary>
            Gets or sets the text for display.
            </summary>
    </member>
    <member name="P:C1.C1Flash.FEditText.Height">
      <summary>
            Gets or sets the height of text for display.
            </summary>
      <remarks>
            The height is in twips.
            </remarks>
    </member>
    <member name="P:C1.C1Flash.FEditText.AutoSize">
      <summary>
            Gets or sets whether the bounds of text is auto sized.
            </summary>
    </member>
    <member name="P:C1.C1Flash.FEditText.ReadOnly">
      <summary>
            Gets or sets whether the text is readonly when displaying.
            </summary>
    </member>
    <member name="P:C1.C1Flash.FEditText.WordWrap">
      <summary>
            Gets or sets whether the text is word wrapped.
            </summary>
    </member>
    <member name="P:C1.C1Flash.FEditText.PassWord">
      <summary>
            Gets or sets whether the text is diaplayed in password style.
            </summary>
    </member>
    <member name="P:C1.C1Flash.FEditText.MultiLine">
      <summary>
            Gets or sets whether multiple line text is supported.
            </summary>
    </member>
    <member name="P:C1.C1Flash.FEditText.Border">
      <summary>
            Gets or sets whether to display the border.
            </summary>
    </member>
    <member name="P:C1.C1Flash.FEditText.MaxLength">
      <summary>
            Gets or sets the max-length of this text object.
            </summary>
    </member>
    <member name="P:C1.C1Flash.FEditText.NoSelect">
      <summary>
            Gets or sets whether the text is selectable by mouse.
            </summary>
    </member>
    <member name="P:C1.C1Flash.FEditText.Align">
      <summary>
            Gets or sets the horizontal alignment.
            </summary>
      <remarks>
            Please see the definition of <see cref="T:C1.C1Flash.FAlignment" /> for details.
            </remarks>
    </member>
    <member name="P:C1.C1Flash.FEditText.LeftMargin">
      <summary>
            Gets or sets the left margin size.
            </summary>
    </member>
    <member name="P:C1.C1Flash.FEditText.RightMargin">
      <summary>
            Gets or sets the right margin size.
            </summary>
    </member>
    <member name="P:C1.C1Flash.FEditText.Indent">
      <summary>
            Gets or sets the indent size.
            </summary>
    </member>
    <member name="P:C1.C1Flash.FEditText.Leading">
      <summary>
            Gets or sets the leading size between rows.
            </summary>
    </member>
    <member name="P:C1.C1Flash.FEditText.Html">
      <summary>
            Gets or sets whether the HTML tag can be rendered.
            </summary>
    </member>
    <member name="T:C1.C1Flash.FFont">
      <summary>
            Class that represents Glyph font.
            </summary>
    </member>
    <member name="M:C1.C1Flash.FFont.#ctor(System.String)">
      <summary>
            Initialize a instance of FFont.
            </summary>
      <param name="fontName">Font name.</param>
    </member>
    <member name="M:C1.C1Flash.FFont.AddGlyph(C1.C1Flash.FPolygon,System.UInt16,System.Int16)">
      <summary>
            Adds a glyph and associate it with a charector code.
            </summary>
      <param name="polygon">
        <see cref="T:C1.C1Flash.FPolygon" /> that defines the glyph of the static charactor.</param>
      <param name="code">Code value associated with the charactor shape.</param>
      <param name="advance">Advance value for display.</param>
    </member>
    <member name="M:C1.C1Flash.FFont.GetGlyphIndexFromAscii(System.UInt16)">
      <summary>
            Gets the index of glyph from a charactor code.
            </summary>
      <param name="code">Charactor code.</param>
      <returns>Index of the glyph.</returns>
    </member>
    <member name="M:C1.C1Flash.FFont.GetAdvance(System.Int32)">
      <summary>
            Gets the advance value of a glyph by index.
            </summary>
      <param name="index">Index of the glyph.</param>
      <returns>Advance value.</returns>
    </member>
    <member name="P:C1.C1Flash.FFont.GlyphCount">
      <summary>
            Gets the number of glyphs.
            </summary>
    </member>
    <member name="T:C1.C1Flash.FFont2">
      <summary>
            Class that represents a DefineFont2 tag in SWF format.
            </summary>
    </member>
    <member name="M:C1.C1Flash.FFont2.#ctor(System.String)">
      <summary>
            Initialize a FFont2.
            </summary>
      <param name="fontName">Font name.</param>
    </member>
    <member name="M:C1.C1Flash.FFont2.#ctor(System.String,System.Boolean,System.Boolean)">
      <summary>
            Initialize a FFont2.
            </summary>
      <param name="fontName">Font name.</param>
      <param name="italic">The font is in italic.</param>
      <param name="bold">The font is in bold.</param>
    </member>
    <member name="P:C1.C1Flash.FFont2.Name">
      <summary>
            Gets the font name.
            </summary>
    </member>
    <member name="P:C1.C1Flash.FFont2.Italic">
      <summary>
            Gets whether the font is in italic.
            </summary>
    </member>
    <member name="P:C1.C1Flash.FFont2.Bold">
      <summary>
            Gets whether the font is in bold.
            </summary>
    </member>
    <member name="T:C1.C1Flash.FFrame">
      <summary>
            Class that represens a frame in Flash Movie.
            </summary>
    </member>
    <member name="M:C1.C1Flash.FFrame.AddObject(C1.C1Flash.FObject)">
      <summary>
            Adds a <see cref="T:C1.C1Flash.FObject" /> inherited object to this frame. Those shape objects are all from <see cref="T:C1.C1Flash.FObject" />.
            </summary>
      <param name="obj">
        <see cref="T:C1.C1Flash.FObject" /> inherited object.</param>
    </member>
    <member name="M:C1.C1Flash.FFrame.RemoveObject(C1.C1Flash.FObject)">
      <summary>
            Removes a <see cref="T:C1.C1Flash.FObject" /> object from the frame.
            This object should has been added to a previous frame.
            </summary>
      <param name="obj">
        <see cref="T:C1.C1Flash.FObject" /> inherited object.</param>
    </member>
    <member name="M:C1.C1Flash.FFrame.AddGroup(C1.C1Flash.FGroup)">
      <summary>
            Adds a FGroup object to this frame.
            </summary>
      <param name="group">FGroup object to add.</param>
    </member>
    <member name="M:C1.C1Flash.FFrame.RemoveGroup(C1.C1Flash.FGroup)">
      <summary>
            Removes a FGroup object from this frame.
            </summary>
      <param name="group">The FGroup object to remove.</param>
    </member>
    <member name="M:C1.C1Flash.FFrame.AddAction(C1.C1Flash.Base.FActionRecord)">
      <summary>
            Adds an action to this frame.
            </summary>
      <param name="action">
        <see cref="T:C1.C1Flash.Base.FActionRecord" /> inherited object. For example, FActionPlay, FActionTop etc.</param>
    </member>
    <member name="P:C1.C1Flash.FFrame.Opacity">
      <summary>
            Gets or sets the opacity level of the frame.
            </summary>
      <value>
            The level of opacity for the frame. The default is 1.00.
            </value>
      <remarks>
        <para>
            This property enables you to specify a level of transparency for the frame and shapes added to this frame.
            </para>
        <para>
            Value should be between 0.00 and 1.00. Setting value to 0 will make the shapes fully transparent.
            </para>
      </remarks>
    </member>
    <member name="P:C1.C1Flash.FFrame.MaxDepth">
      <summary>
            Maximum depth in the frame used by FObjects.
            </summary>
    </member>
    <member name="T:C1.C1Flash.FGroup">
      <summary>
            Group of <see cref="T:C1.C1Flash.FObject" />. Objects could be produced from Metafile automatically.
            </summary>
      <remarks>
        <para>
            Adding or removing the FGroup to or from the frame would add or remove all the <see cref="T:C1.C1Flash.FObject" />.
            </para>
        <para>
            User can add metafile to this group. The meta file will be played to generate many FObject automatically.
            This is userful when user want to add an EMF image to a movie's frame whithout loosing its quality.
            </para>
      </remarks>
    </member>
    <member name="M:C1.C1Flash.FGroup.#ctor">
      <summary>
            Initialize a new instance of FGroup.
            </summary>
    </member>
    <member name="M:C1.C1Flash.FGroup.AddObject(C1.C1Flash.FObject)">
      <summary>
            Adds a <see cref="T:C1.C1Flash.FObject" /> inherited object to this group. Those shape objects are all from <see cref="T:C1.C1Flash.FObject" />.
            </summary>
      <param name="obj">
        <see cref="T:C1.C1Flash.FObject" /> inherited object.</param>
    </member>
    <member name="M:C1.C1Flash.FGroup.RemoveObject(C1.C1Flash.FObject)">
      <summary>
            Removes a <see cref="T:C1.C1Flash.FObject" /> object from the group.
            </summary>
      <param name="obj">
        <see cref="T:C1.C1Flash.FObject" /> inherited object.</param>
    </member>
    <member name="M:C1.C1Flash.FGroup.AddMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point)">
      <summary>
            Adds a Windows Meta File to this group.
            </summary>
      <param name="meta">The metafile.</param>
      <param name="point">The position on frame to place.</param>
    </member>
    <member name="M:C1.C1Flash.FGroup.AddMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF)">
      <summary>
            Adds a Windows Meta File to this group.
            </summary>
      <param name="meta">The metafile.</param>
      <param name="point">The position on frame to place.</param>
    </member>
    <member name="M:C1.C1Flash.FGroup.AddMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle)">
      <summary>
            Adds a Windows Meta File to this group.
            </summary>
      <param name="meta">The metafile.</param>
      <param name="rect">The rectangle on frame to place.</param>
    </member>
    <member name="M:C1.C1Flash.FGroup.AddMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF)">
      <summary>
            Adds a Windows Meta File to this group.
            </summary>
      <param name="meta">The metafile.</param>
      <param name="rect">The rectangle on frame to place.</param>
    </member>
    <member name="P:C1.C1Flash.FGroup.Item(System.Int32)">
      <summary>
            Gets a <see cref="T:C1.C1Flash.FObject" /> object from the group.
            </summary>
    </member>
    <member name="P:C1.C1Flash.FGroup.Count">
      <summary>
            Gets the count of <see cref="T:C1.C1Flash.FObject" /> object contained in this group.
            </summary>
    </member>
    <member name="T:C1.C1Flash.FImage">
      <summary>
            Class that represents a Image.
            </summary>
    </member>
    <member name="T:C1.C1Flash.FRectangle">
      <summary>
            Class that represents a rectangle shape.
            </summary>
    </member>
    <member name="M:C1.C1Flash.FRectangle.#ctor(System.Drawing.Rectangle)">
      <summary>
            Initialize a new instance of FRectangle.
            </summary>
      <param name="rect">Rectangle that specifies the location and size.</param>
      <remarks>
            Location and size are in twips.
            </remarks>
    </member>
    <member name="M:C1.C1Flash.FRectangle.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Initialize a new instance of FRectangle.
            </summary>
      <param name="x">X position of this rectangle..</param>
      <param name="y">Y position of this rectangle.</param>
      <param name="width">Width of this rectangle.</param>
      <param name="height">Height of this rectangle.</param>
      <remarks>
            Location and size are in twips.
            </remarks>
    </member>
    <member name="M:C1.C1Flash.FRectangle.#ctor(System.Drawing.Point,System.Drawing.Size)">
      <summary>
            Initialize a new instance of FRectangle.
            </summary>
      <param name="location">Location of this rectangle.</param>
      <param name="size">Size of this rectangle.</param>
      <remarks>
            Location and size are in twips.
            </remarks>
    </member>
    <member name="M:C1.C1Flash.FRectangle.#ctor(System.Drawing.Rectangle,System.Drawing.Size)">
      <summary>
            Initialize a new instance of FRectangle.
            </summary>
      <param name="rect">Rectangle specifies the location and size.</param>
      <param name="corner">Size of the corner.</param>
      <remarks>
            If the corner is set with a non empyy size, this FRectangle object represents a round corner rectangle.
            </remarks>
    </member>
    <member name="M:C1.C1Flash.FImage.#ctor(System.Drawing.Rectangle,System.Drawing.Image)">
      <summary>
            Initialize a new instance of FImage.
            </summary>
      <param name="rect">Rectangle of this image shape.</param>
      <param name="img">Image object.</param>
    </member>
    <member name="T:C1.C1Flash.FLine">
      <summary>
            Class that represents a Line.
            </summary>
    </member>
    <member name="M:C1.C1Flash.FLine.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Initialize a new instance of FLine.
            </summary>
      <param name="x1">X position of the start point.</param>
      <param name="y1">Y position of the start point.</param>
      <param name="x2">X position of the end point.</param>
      <param name="y2">Y position of the end point.</param>
    </member>
    <member name="M:C1.C1Flash.FLine.#ctor(System.Drawing.Point,System.Drawing.Point)">
      <summary>
            Initialize a new instance of FLine.
            </summary>
      <param name="pt1">Position of the start point.</param>
      <param name="pt2">Position of the end point.</param>
    </member>
    <member name="T:C1.C1Flash.FPath">
      <summary>
            Class that represents a Path.
            </summary>
    </member>
    <member name="M:C1.C1Flash.FPath.#ctor(System.Drawing.Drawing2D.GraphicsPath)">
      <summary>
            Initialize a new instance of FPath.
            </summary>
      <param name="path">
        <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> object that defines the path.</param>
    </member>
    <member name="P:C1.C1Flash.FPath.Path">
      <summary>
            Gets the <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> object that defines the path.
            </summary>
    </member>
    <member name="T:C1.C1Flash.FPolygon">
      <summary>
            Class that represents a polygon shape.
            </summary>
    </member>
    <member name="M:C1.C1Flash.FPolygon.#ctor(System.Int32,System.Int32)">
      <summary>
            Initialize a new instance of FPolygon.
            </summary>
      <param name="originX">The X position of the start point.</param>
      <param name="originY">The Y position of the start point.</param>
    </member>
    <member name="M:C1.C1Flash.FPolygon.#ctor(System.Drawing.Point)">
      <summary>
            Initialize a new instance of FPolygon.
            </summary>
      <param name="point">The position of the start point.</param>
    </member>
    <member name="M:C1.C1Flash.FPolygon.#ctor(System.Int32,System.Int32,System.Boolean)">
      <summary>
            Initialize a new instance of FPolygon.
            </summary>
      <param name="originX">The X position of the start point.</param>
      <param name="originY">The Y position of the start point.</param>
      <param name="autoClose">True to close the shape automatically.</param>
    </member>
    <member name="M:C1.C1Flash.FPolygon.#ctor(System.Drawing.Point,System.Boolean)">
      <summary>
            Initialize a new instance of FPolygon.
            </summary>
      <param name="point">The position of the start point.</param>
      <param name="autoClose">True to close the shape automatically.</param>
    </member>
    <member name="M:C1.C1Flash.FPolygon.#ctor(System.Drawing.Point[],System.Boolean)">
      <summary>
            Initialize a new instance of FPolygon.
            </summary>
      <param name="points">Point array of the polygon.</param>
      <param name="autoClose">True to close the shape automatically.</param>
    </member>
    <member name="M:C1.C1Flash.FPolygon.#ctor(System.Drawing.Point[])">
      <summary>
            Initialize a new instance of FPolygon.
            </summary>
      <param name="points">Point array of the polygon.</param>
    </member>
    <member name="M:C1.C1Flash.FPolygon.AddStraightLine(System.Int32,System.Int32)">
      <summary>
            Adds a straight line.
            </summary>
      <param name="dx">Distance to the last point in X direction.</param>
      <param name="dy">Distance to the last point in Y direction.</param>
    </member>
    <member name="M:C1.C1Flash.FPolygon.AddCurvedLine(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Adds a curve line.
            </summary>
      <param name="controlDX">Distance to the last control point in X direction.</param>
      <param name="controlDY">Distance to the last control point in Y direction.</param>
      <param name="anchorDX">Distance to the last anchor point in X direction.</param>
      <param name="anchorDY">Distance to the last anchor point in Y direction.</param>
    </member>
    <member name="T:C1.C1Flash.FText">
      <summary>
            Class that represents static text.
            </summary>
      <remarks>
            Displaying the text requires the Glyph definition stored in the <see cref="T:C1.C1Flash.FFont" /> object.
            </remarks>
    </member>
    <member name="M:C1.C1Flash.FText.#ctor(System.String,C1.C1Flash.FFont)">
      <summary>
            Initialize a new instance of FText object.
            </summary>
      <param name="text">The text string.</param>
      <param name="font">The <see cref="T:C1.C1Flash.FFont" /> object associated with text display.</param>
    </member>
    <member name="P:C1.C1Flash.FText.Text">
      <summary>
            Gets or sets the text string.
            </summary>
    </member>
    <member name="P:C1.C1Flash.FText.Font">
      <summary>
            Gets or sets the <see cref="T:C1.C1Flash.FFont" /> object assocated with the text display.
            </summary>
    </member>
    <member name="T:C1.C1Zip.C1ZipEntry">
      <summary>
            Represents an entry in a zip file, and exposes information including the entry name,
            compressed and uncompressed sizes, date, checksum, etc.
            </summary>
    </member>
    <member name="M:C1.C1Zip.C1ZipEntry.CheckCRC32">
      <summary>
            Calculates a checksum value for the entry and compares it to the checksum that
            was stored when the entry was created.
            </summary>
      <returns>True if the checksum values match, false otherwise.</returns>
      <remarks>
            This method is used to check the integrity of the entries in the zip file. If the
            calculated checksum does not match the stored checksum, then either the zip file is
            corrupted or the program used to create the zip file is incompatible with 
            <b>C1Zip</b>.
            </remarks>
    </member>
    <member name="M:C1.C1Zip.C1ZipEntry.CheckPassword">
      <summary>
            Checks whether this <see cref="T:C1.C1Zip.C1ZipEntry" /> can be read with the currently set password.
            </summary>
      <returns>True if the entry can be read with the current password, or if the entry is not
            encrypted.</returns>
      <remarks>
            This method is more efficient than using a try/catch block and trying to open the entry
            to determine whether the current password is valid for the entry.
            </remarks>
    </member>
    <member name="M:C1.C1Zip.C1ZipEntry.OpenReader">
      <summary>
            Returns a <see cref="T:System.IO.Stream" /> that can be used to read the content of the entry without
            extracting it to a disk file.
            </summary>
      <returns>A <see cref="T:System.IO.Stream" /> that can be used to read the data in the entry.</returns>
      <remarks>
            The <see cref="T:System.IO.Stream" /> returned is a <see cref="T:C1.C1Zip.C1ZStreamReader" />, which 
            decompresses the data as it is read from the entry.
            </remarks>
    </member>
    <member name="M:C1.C1Zip.C1ZipEntry.Extract(System.String)">
      <summary>
            Extracts this entry to a file.
            </summary>
      <param name="destFileName">Name and location of the extracted file.</param>
    </member>
    <member name="M:C1.C1Zip.C1ZipEntry.Remove">
      <summary>
            Removes this entry from the zip file.
            </summary>
    </member>
    <member name="P:C1.C1Zip.C1ZipEntry.FileName">
      <summary>
            Gets the entry name. This is usually a file name, optionally including a path.
            </summary>
    </member>
    <member name="P:C1.C1Zip.C1ZipEntry.SizeUncompressed">
      <summary>
            Gets the original (uncompressed) size of the entry, in bytes.
            </summary>
    </member>
    <member name="P:C1.C1Zip.C1ZipEntry.SizeCompressed">
      <summary>
            Gets the compressed size of the entry, in bytes.
            </summary>
    </member>
    <member name="P:C1.C1Zip.C1ZipEntry.CRC32">
      <summary>
            Gets the checksum calculated when the entry was compressed.
            </summary>
      <remarks>
            This value can be used to check the integrity of the entry when it is decompressed.
            </remarks>
    </member>
    <member name="P:C1.C1Zip.C1ZipEntry.Date">
      <summary>
            Gets the date and time when the file used to create the entry was last modified.
            </summary>
      <remarks>
            This value can be used to check whether an entry needs to be updated because the
            source file was modified since it was last compressed.
            </remarks>
    </member>
    <member name="P:C1.C1Zip.C1ZipEntry.Comment">
      <summary>
            Gets or sets a comment associated with the entry.
            </summary>
    </member>
    <member name="P:C1.C1Zip.C1ZipEntry.Attributes">
      <summary>
            Gets the file attributes associated with the entry.
            </summary>
    </member>
    <member name="P:C1.C1Zip.C1ZipEntry.IsEncrypted">
      <summary>
            Gets a value that determines whether the entry is encrypted.
            </summary>
      <remarks>
            Encrypted entries can only be extracted if the <see cref="P:C1.C1Zip.C1ZipFile.Password" /> property
            on the containing <see cref="T:C1.C1Zip.C1ZipFile" /> object is set to the password that was used
            when the file was added to the zip file.
            </remarks>
    </member>
    <member name="T:C1.C1Zip.C1ZipEntryCollection">
      <summary>
            A collection of <see cref="T:C1.C1Zip.C1ZipEntry" /> objects that represent the contents of
            a zip file.
            </summary>
      <remarks>
            Use the <b>C1ZipEntryCollection</b> to programmatically manage the contents of zip
            files. You can add, remove, extract, or insert items into the <b>C1ZipEntryCollection</b>.
            </remarks>
    </member>
    <member name="M:C1.C1Zip.C1ZipEntryCollection.Contains(System.String)">
      <summary>
            Determines whether the collection contains an entry with a given name.
            </summary>
      <param name="name">Name of the entry to look for.</param>
      <returns>True if the collection contains an entry with the given name, false otherwise.</returns>
    </member>
    <member name="M:C1.C1Zip.C1ZipEntryCollection.Contains(C1.C1Zip.C1ZipEntry)">
      <summary>
            Determines whether the collection contains an entry.
            </summary>
      <param name="entry">Entry of the entry to look for.</param>
      <returns>True if the collection contains the entry, false otherwise.</returns>
    </member>
    <member name="M:C1.C1Zip.C1ZipEntryCollection.IndexOf(System.String)">
      <summary>
            Gets the index of the entry with the specified name.
            </summary>
      <param name="name">Name of the entry to look for.</param>
      <returns>The index of the entry in the collection, or -1 if the entry was not found.</returns>
    </member>
    <member name="M:C1.C1Zip.C1ZipEntryCollection.IndexOf(C1.C1Zip.C1ZipEntry)">
      <summary>
            Gets the index of an entry in the collection.
            </summary>
      <param name="entry">
        <see cref="T:C1.C1Zip.C1ZipEntry" /> to look for.</param>
      <returns>The index of the entry in the collection, or -1 if the entry was not found.</returns>
    </member>
    <member name="M:C1.C1Zip.C1ZipEntryCollection.Add(System.String)">
      <summary>
            Adds an entry to the current zip file.
            </summary>
      <param name="fileName">Name of the file to add to the zip file.</param>
      <remarks>
            By default, the directory name is not stored in the zip file. To store a specific
            part of the directory name in the zip file, use the overloaded version of the 
            <b>Add</b> method with a <b>pathLevels</b> parameter.
            </remarks>
    </member>
    <member name="M:C1.C1Zip.C1ZipEntryCollection.Add(System.String[])">
      <summary>
            Adds a list of entries to the current zip file.
            </summary>
      <param name="fileNames">Array containing the file names of the entries to be added to the zip file.</param>
    </member>
    <member name="M:C1.C1Zip.C1ZipEntryCollection.Add(System.String,System.Int32)">
      <summary>
            Adds an entry to the current zip file.
            </summary>
      <param name="fileName">Name of the file to add to the zip file.</param>
      <param name="pathLevels">The number of path levels to be stored as the entry name.</param>
      <remarks>
        <para>By default, path names are not stored in the zip file. For example, adding
            the file "c:\temp\samples\readme.txt" to the zip file will create an entry called
            "readme.txt".</para>
        <para>The <paramref name="pathLevels" /> parameter allows you to store one or more levels of the path in the entry name.
            For example, adding the file "c:\temp\samples\readme.txt" to the zip file with <paramref name="pathLevels" />=1 
            will create an entry called "samples\readme.txt".</para>
      </remarks>
    </member>
    <member name="M:C1.C1Zip.C1ZipEntryCollection.Add(System.String,System.String)">
      <summary>
            Adds an entry to the current zip file.
            </summary>
      <param name="fileName">Name of the file to add to the zip file.</param>
      <param name="entryName">Name of the new entry as stored in the zip file.</param>
      <remarks>
            By default, entries in the zip file have the same name as the original (uncompressed)
            file. This method allows you to specify a different name, including a path for example.
            </remarks>
    </member>
    <member name="M:C1.C1Zip.C1ZipEntryCollection.Add(System.IO.Stream,System.String)">
      <summary>
            Adds a stream to the current zip file.
            </summary>
      <param name="stream">Stream that contains data for the new entry.</param>
      <param name="entryName">Name to be used for the new entry.</param>
    </member>
    <member name="M:C1.C1Zip.C1ZipEntryCollection.AddFolder(System.String)">
      <summary>
            Adds the content of a folder to the current zip file.
            </summary>
      <param name="path">The full path of the folder to be added to the zip file.</param>
      <remarks>
            This method adds all files and sub folders to the zip file.
            </remarks>
    </member>
    <member name="M:C1.C1Zip.C1ZipEntryCollection.AddFolder(System.String,System.String)">
      <summary>
            Adds the content of a folder to the current zip file.
            </summary>
      <param name="path">The full path of the folder to be added to the zip file.</param>
      <param name="searchPattern">A mask that specifies which files to add.</param>
      <remarks>
            If the folder contains sub folders, those are also added to the zip file.
            </remarks>
    </member>
    <member name="M:C1.C1Zip.C1ZipEntryCollection.AddFolder(System.String,System.String,System.Boolean)">
      <summary>
            Adds the content of a folder to the current zip file.
            </summary>
      <param name="path">The full path of the folder to be added to the zip file.</param>
      <param name="searchPattern">A mask that specifies which files to add.</param>
      <param name="includeSubfolders">True to include sub folders, false to include only files at the root level.</param>
    </member>
    <member name="M:C1.C1Zip.C1ZipEntryCollection.ExtractFolder(System.String)">
      <summary>
            Extracts the contents of the zip file into a specified path.
            </summary>
      <param name="path">Destination path for the unzipped files.</param>
      <remarks>
            If the zip file contains compressed folders, new folders will be created
            under the destination path to preserve the hierarchical structure of the
            archive.
            </remarks>
    </member>
    <member name="M:C1.C1Zip.C1ZipEntryCollection.Remove(System.Int32)">
      <summary>
            Removes an entry from the current zip file.
            </summary>
      <param name="index">Index of the entry to remove.</param>
    </member>
    <member name="M:C1.C1Zip.C1ZipEntryCollection.Remove(System.String)">
      <summary>
            Removes an entry from the current zip file.
            </summary>
      <param name="fileName">Name of the entry to remove (case-insensitive).</param>
    </member>
    <member name="M:C1.C1Zip.C1ZipEntryCollection.Remove(System.Int32[])">
      <summary>
            Removes several entries from the current zip file.
            </summary>
      <param name="indices">Array containing the indices of the entries to remove.</param>
    </member>
    <member name="M:C1.C1Zip.C1ZipEntryCollection.Remove(System.String[])">
      <summary>
            Removes several entries from the current zip file.
            </summary>
      <param name="entryNames">Array containing the names of the entries to remove.</param>
    </member>
    <member name="M:C1.C1Zip.C1ZipEntryCollection.Extract(System.Int32,System.String)">
      <summary>
            Extracts a file from the current zip file. 
            </summary>
      <param name="index">Index of the entry to extract.</param>
      <param name="destFileName">Name and location of the extracted file.</param>
    </member>
    <member name="M:C1.C1Zip.C1ZipEntryCollection.Extract(System.String,System.String)">
      <summary>
            Extracts a file from the current zip file. 
            </summary>
      <param name="entryName">Name of the entry to extract.</param>
      <param name="destFileName">Name and location of the extracted file.</param>
    </member>
    <member name="M:C1.C1Zip.C1ZipEntryCollection.Extract(System.Int32)">
      <summary>
            Extracts a file from the current zip file. 
            </summary>
      <param name="index">Index of the entry to extract.</param>
      <remarks>
            The entry is extracted to a file in the same folder as the current zip
            file, with the same name as the entry.
            </remarks>
    </member>
    <member name="M:C1.C1Zip.C1ZipEntryCollection.Extract(System.String)">
      <summary>
            Extracts a file from the current zip file. 
            </summary>
      <param name="entryName">Name of the entry to extract.</param>
      <remarks>
            The entry is extracted to a file in the same folder as the current zip
            file, with the same name as the entry.
            </remarks>
    </member>
    <member name="M:C1.C1Zip.C1ZipEntryCollection.OpenWriter(System.String,System.Boolean)">
      <summary>
            Opens a stream for writing an entry into the zip file.
            </summary>
      <param name="entryName">The name of the new entry.</param>
      <param name="useMemory">Whether to use a memory stream or temporary file.</param>
      <returns>
            A stream that can be used to write data into the zip file. The entry
            is not added until the stream is closed.
            </returns>
    </member>
    <member name="P:C1.C1Zip.C1ZipEntryCollection.Count">
      <summary>
            Gets the number of entries in the current zip file.
            </summary>
    </member>
    <member name="P:C1.C1Zip.C1ZipEntryCollection.Item(System.Int32)">
      <summary>
            Gets the <see cref="T:C1.C1Zip.C1ZipEntry" /> at the specified index.
            </summary>
    </member>
    <member name="P:C1.C1Zip.C1ZipEntryCollection.Item(System.String)">
      <summary>
            Gets the <see cref="T:C1.C1Zip.C1ZipEntry" /> with the given name (returns null if the entry cannot be found).
            </summary>
    </member>
    <member name="T:C1.C1Zip.C1ZipFile">
      <summary>
            Used for creating, opening, and managing zip files.
            </summary>
      <remarks>
        <para>Use the <see cref="M:C1.C1Zip.C1ZipFile.Open(System.String)" /> or <see cref="M:C1.C1Zip.C1ZipFile.Create(System.String)" /> methods to 
            associate the C1Zip file object with a zip file on disk. Then use the 
            <see cref="P:C1.C1Zip.C1ZipFile.Entries" /> property to add, remove, retrieve, or inspect 
            individual entries in the zip file.</para>
        <para>
          <see cref="T:C1.C1Zip.C1ZipFile" /> can only be used with standard zip files. The component
            does not support other similar formats such as gzip, zip2, tar, or rar.</para>
        <para>The standard zip file imposes some limitations on the size of each entry. 
            You cannot use it to compress files larger than 4 gigabytes (uint.MaxValue).</para>
      </remarks>
      <example>
            The code below creates a zip file called <b>sources.zip</b> and adds all 
            files with a "cs" extension to the zip file:
            <code>
            // get path for zip file and files to compress
            string path = Application.ExecutablePath;
            int pos = path.IndexOf(@"\bin");
            path = path.Substring(0, pos + 1);
            
            // create a zip file
            C1ZipFile zip = new C1ZipFile();
            zip.Create(path + "source.zip");
            
            // add all files with extension cs to the zip file
            foreach (string fileName in Directory.GetFiles(path, "*.cs"))
            	zip.Entries.Add(fileName);
            	
            // show result
            foreach (C1ZipEntry ze in zip.Entries)
            {
            	Console.WriteLine("{0} {1:#,##0} {2:#,##0}", 
            		ze.FileName, ze.SizeUncompressed, ze.SizeCompressed);
            }
            </code></example>
    </member>
    <member name="M:C1.C1Zip.C1ZipFile.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Zip.C1ZipFile" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Zip.C1ZipFile.#ctor(System.String,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Zip.C1ZipFile" /> class and creates or opens
            a zip file associated with this new instance.
            </summary>
      <param name="fileName">The name of the zip file to open or create.</param>
      <param name="create">True to create a new zip file, false to open an existing file.</param>
      <remarks>
        <para>If <paramref name="create" /> is true and the zip file already exists, it is overwritten
            with a new empty file.</para>
        <para>If <paramref name="create" /> is false and the zip file already exists, the existing file 
            is opened.</para>
      </remarks>
    </member>
    <member name="M:C1.C1Zip.C1ZipFile.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Zip.C1ZipFile" /> class and opens a zip file associated 
            with this new instance.
            </summary>
      <param name="fileName">The name of the zip file to open.</param>
      <remarks>
            If the file does not exist, a new empty file is created.
            </remarks>
    </member>
    <member name="M:C1.C1Zip.C1ZipFile.#ctor(System.IO.Stream,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Zip.C1ZipFile" /> class and opens a zip stream associated 
            with this new instance.
            </summary>
      <param name="stream">
        <see cref="T:System.IO.Stream" /> that contains the zip data.</param>
      <param name="create">Whether to initialize the stream with an empty zip header or open an existing
            zip file in the stream.</param>
    </member>
    <member name="M:C1.C1Zip.C1ZipFile.#ctor(System.IO.Stream)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Zip.C1ZipFile" /> class and opens a zip stream associated 
            with this new instance.
            </summary>
      <param name="stream">
        <see cref="T:System.IO.Stream" /> that contains the zip data.</param>
    </member>
    <member name="M:C1.C1Zip.C1ZipFile.Open(System.String)">
      <summary>
            Opens an existing zip file.
            </summary>
      <param name="fileName">The name of an existing zip file, including the path.</param>
      <remarks>
        <para>This method checks that the zip file exists and is a valid zip file, then
            reads the zip file directory into the <see cref="P:C1.C1Zip.C1ZipFile.Entries" /> collection.
            The zip file is then closed, and can be used by other applications. There is no
            need to close the zip file explicitly.</para>
      </remarks>
    </member>
    <member name="M:C1.C1Zip.C1ZipFile.Create(System.String)">
      <summary>
            Creates an empty zip file on disk.
            </summary>
      <param name="fileName">The name of the zip file to create, including the path.</param>
      <remarks>
            If a file by the same name already exists, it is deleted before the new one
            is created.
            </remarks>
    </member>
    <member name="M:C1.C1Zip.C1ZipFile.Open(System.IO.Stream)">
      <summary>
            Opens an existing zip file stored in a stream.
            </summary>
      <param name="stream">
        <see cref="T:System.IO.Stream" /> that contains a zip file.</param>
      <remarks>
        <para>This method allows you to open and work with a zip file stored in a stream
            instead of in an actual file.</para>
        <para>Typical usage scenarios for this are zip files stored as application resources 
            or in binary database fields.</para>
      </remarks>
      <example>
        <para>The example below loads information from a zip file stored in an embedded resource. 
            To embed a zip file in an application, follow these steps:</para>
        <para>1) Right-click the project node in Visual Studio, select the <b>Add | Add Existing Item...</b> menu option.</para>
        <para>2) Select a zip file to add to the project as an embedded resource.</para>
        <para>3) Select the newly added file and make sure the <b>Build Action</b> property is set to "Embedded Resource".</para>
        <code>
            // get Stream from application resources
            System.Reflection.Assembly a = this.GetType().Assembly;
            using (Stream stream = a.GetManifestResourceStream("MyApp.test.zip"))
            {
              // open C1ZipFile on the stream
              zip.Open(stream);
            
              // enumerate the entries in the zip file,
              foreach (C1ZipEntry ze in zip.Entries)
              {
                // show entries that have a 'txt' extension.
                if (ze.FileName.ToLower().EndsWith(".txt"))
                {
                  using (StreamReader sr = new StreamReader(ze.OpenReader()))
                  {
                    MessageBox.Show(sr.ReadToEnd(), ze.FileName);
                  }
                }
              }
            }
            </code>
      </example>
    </member>
    <member name="M:C1.C1Zip.C1ZipFile.Create(System.IO.Stream)">
      <summary>
            Creates a new zip file in a stream.
            </summary>
      <param name="stream">
        <see cref="T:System.IO.Stream" /> that will contain the new zip file.</param>
      <example>
            The code below creates a new <see cref="T:C1.C1Zip.C1ZipFile" /> on a memory stream, then adds
            several files to it. Finally, the code gets the zipped data out as an array of bytes,
            which could be stored in a database for example.
            <code>
            // create zip on a stream
            MemoryStream msZip = new MemoryStream();
            C1ZipFile zip = new C1ZipFile(msZip, true);
            
            // add some entries to it
            foreach (string f in Directory.GetFiles(@"c:\WINDOWS\Web\Wallpaper"))
            {
              zip.Entries.Add(f);
            }
            
            // get zipped data out as a byte array
            byte[] zipData = msZip.ToArray();
            </code></example>
    </member>
    <member name="M:C1.C1Zip.C1ZipFile.Close">
      <summary>
            Resets all data members of the <see cref="T:C1.C1Zip.C1ZipFile" /> object.
            </summary>
      <remarks>
            Disk files are automatically closed by <b>C1Zip</b>. You only need to use this
            method if you want to break the connection between a <see cref="T:C1.C1Zip.C1ZipFile" /> class 
            and a physical zip file.
            </remarks>
    </member>
    <member name="M:C1.C1Zip.C1ZipFile.Refresh">
      <summary>
            Refreshes all data members by re-opening the current zip file.
            </summary>
      <remarks>
            This method is useful in instances where other applications may have changed
            the zip file and you want to make sure the information in the <see cref="P:C1.C1Zip.C1ZipFile.Entries" />
            collection is up to date.
            </remarks>
    </member>
    <member name="M:C1.C1Zip.C1ZipFile.IsZipFile(System.String)">
      <summary>
            Tests whether a file is a valid zip file.
            </summary>
      <param name="fileName">Name of the file to test.</param>
      <returns>True if the file exists and is a valid zip file, false otherwise.</returns>
    </member>
    <member name="M:C1.C1Zip.C1ZipFile.IsZipFile(System.IO.Stream)">
      <summary>
            Tests whether a stream contains a valid zip file.
            </summary>
      <param name="stream">
        <see cref="T:System.IO.Stream" /> to test.</param>
      <returns>True if <paramref name="stream" /> contains a valid zip file, false otherwise.</returns>
    </member>
    <member name="M:C1.C1Zip.C1ZipFile.OpenBatch">
      <summary>
            Opens the zip file for multiple operations.
            </summary>
      <remarks>
        <para>By default, <see cref="T:C1.C1Zip.C1ZipFile" /> opens and closes the zip file 
            automatically whenever entries are added or removed.</para>
        <para>This can cause delays in systems that have certain types of anti-virus
            software installed, or in situations where you want to add a large number of 
            relatively small entries. In these cases, use the <see cref="M:C1.C1Zip.C1ZipFile.OpenBatch" /> and 
            <see cref="M:C1.C1Zip.C1ZipFile.CloseBatch" /> methods to keep the zip file open until the entire 
            operation is concluded.</para>
        <para>Use a finally clause to ensure that the <see cref="M:C1.C1Zip.C1ZipFile.CloseBatch" /> 
            method is called even if an exception occurs.</para>
      </remarks>
      <example>
            The code below opens a zip file, adds several entries to it, then closes 
            the file:
            <code>
            C1ZipFile zip = new C1ZipFile();
            zip.Open(myzipfile);
            try
            {
            	zip.OpenBatch();
            	foreach (string fileName in Directory.GetFiles(path, "*.*"))
            		zip.Entries.Add(fileName);
            }
            finally
            {
            	zip.CloseBatch();
            }
            </code></example>
    </member>
    <member name="M:C1.C1Zip.C1ZipFile.CloseBatch">
      <summary>
            Closes a zip file after it was opened with a call to the 
            <see cref="M:C1.C1Zip.C1ZipFile.OpenBatch" /> method.
            </summary>
      <remarks>
            See the <see cref="M:C1.C1Zip.C1ZipFile.OpenBatch" /> method for a complete description 
            and a sample.
            </remarks>
    </member>
    <member name="E:C1.C1Zip.C1ZipFile.Progress">
      <summary>
             Fired while data is being read from or written into a zip file.
             </summary>
      <remarks>
             This event is typically used to update the application UI during lengthy
             operations. It can also be used to cancel the operations.
            </remarks>
      <example>
             The code below writes messages to the output window while the application
             compresses files.
             <code>
             private void Compress()
             {
            		// create zip file
            		C1Zip zip = new C1Zip();
            		zip.Create(zipFileName);
             
            		// connect event handler
            		zip.Progress += new ZipProgressEventHandler(zip_Progress);
             
            		// add files
            		foreach (string fileName in Directory.GetFiles(path, "*.*"))
            			zip.Entries.Add(fileName);
            	}
             
             // print messages while files are compressed
             private void zip_Progress(object sender, ZipProgressEventArgs e)
             {
            		Console.WriteLine("Compressing {0}, {1:p0} done",
            			e.FileName, e.Position/(float)e.FileLength);
            	}
             </code></example>
    </member>
    <member name="P:C1.C1Zip.C1ZipFile.FileName">
      <summary>
            Gets the name of the current zip file.
            </summary>
    </member>
    <member name="P:C1.C1Zip.C1ZipFile.Password">
      <summary>
            Gets or sets the password to use when adding or retrieving entries from the 
            zip file.
            </summary>
      <remarks>
        <para>If the <see cref="P:C1.C1Zip.C1ZipFile.Password" /> property is set to a non-empty string, any entries 
            added to the zip file will be encrypted and protected by the password. To extract these 
            entries later, the same password must be used.</para>
        <para>The password applies to all entries from the moment it is set. If you set the 
            password to a non-empty string and then add several entries to the zip file, all
            entries will use the same password.</para>
        <para>Although <b>C1Zip</b> supports Unicode characters in passwords, several popular zip 
            utilities do not. To ensure your encrypted zip files can be opened with third-party
            utilities, use passwords that consist of ASCII characters only.</para>
      </remarks>
    </member>
    <member name="P:C1.C1Zip.C1ZipFile.Comment">
      <summary>
            Gets or sets a comment associated with the current zip file.
            </summary>
    </member>
    <member name="P:C1.C1Zip.C1ZipFile.CompressionLevel">
      <summary>
            Gets or sets the compression level to use when adding entries to the zip file.
            </summary>
      <remarks>
            Higher compression settings create smaller files, but take longer to process. The
            default setting (<see cref="F:C1.C1Zip.CompressionLevelEnum.DefaultCompression" />) provides 
            a good trade-off between compression and speed.
            </remarks>
    </member>
    <member name="P:C1.C1Zip.C1ZipFile.Entries">
      <summary>
            Gets a <see cref="T:C1.C1Zip.C1ZipEntryCollection" /> that contains the entries in the zip file.
            </summary>
      <remarks>
            The <see cref="P:C1.C1Zip.C1ZipFile.Entries" /> collection is used to enumerate the entries in the zip file,
            and also to add, remove, and expand entries.
            </remarks>
    </member>
    <member name="P:C1.C1Zip.C1ZipFile.OverwriteReadOnly">
      <summary>
            Determines whether the component should overwrite read-only files when extracting 
            entries from the zip file.
            </summary>
    </member>
    <member name="P:C1.C1Zip.C1ZipFile.OverwriteHidden">
      <summary>
            Determines whether the component should overwrite hidden files when extracting 
            entries from the zip file.
            </summary>
    </member>
    <member name="P:C1.C1Zip.C1ZipFile.OverwriteSystem">
      <summary>
            Determines whether the component should overwrite system files when extracting 
            entries from the zip file.
            </summary>
    </member>
    <member name="P:C1.C1Zip.C1ZipFile.MemoryThreshold">
      <summary>
            Gets or sets the size of the largest stream to be compressed in memory.
            </summary>
      <remarks>
        <para>
          <see cref="T:C1.C1Zip.C1ZipFile" /> compresses entries into temporary streams before
            adding them to the zip file.</para>
        <para>Entries with fewer than <see cref="P:C1.C1Zip.C1ZipFile.MemoryThreshold" /> bytes are compressed
            using a temporary memory stream.</para>
        <para>Entries with more than <see cref="P:C1.C1Zip.C1ZipFile.MemoryThreshold" /> bytes are compressed
            using a temporary file. You can control the location of the temporary file using
            the <see cref="P:C1.C1Zip.C1ZipFile.TempFileName" /> property.</para>
      </remarks>
    </member>
    <member name="P:C1.C1Zip.C1ZipFile.TempFileName">
      <summary>
            Gets or sets the name of the temporary file to use when adding entries to the zip file.
            </summary>
      <remarks>
        <para>
          <see cref="T:C1.C1Zip.C1ZipFile" /> creates temporary streams while adding entries to a zip file.
            These temporary streams can be memory-based or disk-based, depending on the size of the
            entry and on the setting of the <see cref="P:C1.C1Zip.C1ZipFile.MemoryThreshold" /> property.</para>
            If a temporary file is used, <see cref="T:C1.C1Zip.C1ZipFile" /> you can control its location by 
            setting the <see cref="P:C1.C1Zip.C1ZipFile.TempFileName" /> property. If you don't select a path for the 
            temporary file, <see cref="T:C1.C1Zip.C1ZipFile" /> will create one automatically using the 
            <see cref="M:System.IO.Path.GetTempFileName" /> method.
            </remarks>
    </member>
    <member name="T:C1.C1Zip.ZipProgressEventHandler">
      <summary>
            Represents the method that will handle the <see cref="E:C1.C1Zip.C1ZipFile.Progress" /> event of a 
            <see cref="T:C1.C1Zip.C1ZipFile" />.
            </summary>
    </member>
    <member name="T:C1.C1Zip.ZipProgressEventArgs">
      <summary>
            Provides data for the <see cref="E:C1.C1Zip.C1ZipFile.Progress" /> event of a 
            <see cref="T:C1.C1Zip.C1ZipFile" />.
            </summary>
    </member>
    <member name="F:C1.C1Zip.ZipProgressEventArgs.FileName">
      <summary>
            Gets the name of the file being compressed or expanded.
            </summary>
    </member>
    <member name="F:C1.C1Zip.ZipProgressEventArgs.FileLength">
      <summary>
            Gets the length of the file being compressed or expanded.
            </summary>
    </member>
    <member name="F:C1.C1Zip.ZipProgressEventArgs.Cancel">
      <summary>
            Set to true to cancel the current operation.
            </summary>
    </member>
    <member name="P:C1.C1Zip.ZipProgressEventArgs.Position">
      <summary>
            Gets the current position into the stream.
            </summary>
    </member>
    <member name="T:C1.C1Zip.ZipFileException">
      <summary>
            Exception thrown when trying to open an invalid Zip file.
            </summary>
    </member>
    <member name="M:C1.C1Zip.ZipFileException.#ctor(System.String)">
      <summary>
            Initializes a new instance of a <see cref="T:System.IO.FileLoadException" />.
            </summary>
      <param name="msg">Message that describes the exception.</param>
    </member>
    <member name="M:C1.C1Zip.ZipFileException.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of a <see cref="T:System.IO.FileLoadException" />.
            </summary>
      <param name="msg">Message that describes the exception.</param>
      <param name="filename">Name of the file that caused the exception.</param>
    </member>
    <member name="M:C1.C1Zip.ZipFileException.#ctor(System.String,System.String,System.Exception)">
      <summary>
            Initializes a new instance of a <see cref="T:System.IO.FileLoadException" />.
            </summary>
      <param name="msg">Message that describes the exception.</param>
      <param name="filename">Name of the file that caused the exception.</param>
      <param name="innerException">Inner exception.</param>
    </member>
    <member name="T:C1.C1Zip.C1ZStreamReader">
      <summary>
            Decompresses data from .NET streams.
            </summary>
      <remarks>
        <para>To decompress data from a compressed stream, create a <see cref="T:C1.C1Zip.C1ZStreamReader" /> object 
            passing the compressed stream to the <see cref="T:C1.C1Zip.C1ZStreamReader" /> constructor.</para>
        <para>Then read the data from the <see cref="T:C1.C1Zip.C1ZStreamReader" /> using the <see cref="M:C1.C1Zip.C1ZStreamReader.Read(System.Byte[],System.Int32,System.Int32)" />
            method, or create a <see cref="T:System.IO.StreamReader" /> on the <see cref="T:C1.C1Zip.C1ZStreamReader" />. 
            The second option is indicated when you want to read formatted data.</para>
      </remarks>
      <example>
            The code below decompresses a string that was stored into a memory stream object:
            <code>
            public string ExpandString(byte[] buffer)
            {
            	// turn buffer into a memory stream
            	MemoryStream ms = new MemoryStream(buffer);
            	
            	// attach decompressor stream to memory stream
            	C1ZStreamReader sr = new C1ZStreamReader(ms);
            	
            	// read uncompressed data
            	StreamReader reader = new StreamReader(sr);
            	return reader.ReadToEnd();
            }
            </code></example>
    </member>
    <member name="M:C1.C1Zip.C1ZStreamReader.#ctor(System.IO.Stream)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Zip.C1ZStreamReader" /> class.
            </summary>
      <param name="baseStream">Input stream that contains the compressed data.</param>
    </member>
    <member name="M:C1.C1Zip.C1ZStreamReader.#ctor(System.IO.Stream,System.Boolean,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Zip.C1ZStreamReader" /> class.
            </summary>
      <param name="baseStream">Input stream that contains the compressed data.</param>
      <param name="zip">Specifies whether the compressed stream was created in zip format.</param>
      <param name="sizeCompressed">Specifies the number of compressed bytes to read from the stream.</param>
      <remarks>
            The <paramref name="sizeCompressed" /> parameter is needed only when a single stream contains
            several compressed streams (in zip files for example). If this parameter is not 
            specified, it is assumed that the stream contains a single stream of compressed data.
            </remarks>
    </member>
    <member name="M:C1.C1Zip.C1ZStreamReader.#ctor(System.IO.Stream,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Zip.C1ZStreamReader" /> class.
            </summary>
      <param name="baseStream">Input stream that contains the compressed data.</param>
      <param name="zip">Specifies whether the compressed stream was created in zip format.</param>
    </member>
    <member name="M:C1.C1Zip.C1ZStreamReader.#ctor(System.IO.Stream,System.Boolean,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Zip.C1ZStreamReader" /> class.
            </summary>
      <param name="baseStream">Input stream that contains the compressed data.</param>
      <param name="header">Specifies whether the compressed stream contains header information (should be False for streams in zip files).</param>
      <param name="crc32">Specifies whether the compressed stream contains a CRC32 checksum (should be True for streams in zip files).</param>
    </member>
    <member name="M:C1.C1Zip.C1ZStreamReader.#ctor(System.IO.Stream,System.Boolean,System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Zip.C1ZStreamReader" /> class.
            </summary>
      <param name="baseStream">Input stream that contains the compressed data.</param>
      <param name="zip">Specifies whether the compressed stream was created in zip format.</param>
      <param name="sizeCompressed">Specifies the number of compressed bytes to read from the stream.</param>
      <param name="method">Specifies the method that was used to compress the stream.</param>
    </member>
    <member name="M:C1.C1Zip.C1ZStreamReader.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>
            Not supported.
            </summary>
    </member>
    <member name="M:C1.C1Zip.C1ZStreamReader.SetLength(System.Int64)">
      <summary>
            Sets the number of compressed bytes to read from the underlying stream.
            </summary>
    </member>
    <member name="M:C1.C1Zip.C1ZStreamReader.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>
            Reads a sequence of bytes from the underlying compressed stream, decompressing them into
            a buffer, then advances the position within the stream by the number of bytes read.
            </summary>
      <param name="buf">An array of bytes. When this method returns, <paramref name="buff" /> contains the specified byte array with the values between <paramref name="offset" />and (<paramref name="offset" /> + <paramref name="count" />) replaced by the uncompressed data read from the stream.</param>
      <param name="offset">The zero-based byte offset in <paramref name="buff" /> at which to begin storing the data read from the current stream.</param>
      <param name="count">The maximum number of (decompressed) bytes to be read from the current stream.</param>
      <returns>The total number of bytes read into the buffer. This may be less than the number of bytes 
            requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.
            </returns>
    </member>
    <member name="M:C1.C1Zip.C1ZStreamReader.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>
            This method is overridden and is not supported by the <see cref="T:C1.C1Zip.C1ZStreamReader" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Zip.C1ZStreamReader.Flush">
      <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying 
            stream.
            </summary>
    </member>
    <member name="M:C1.C1Zip.C1ZStreamReader.Close">
      <summary>
        <para>Closes the current stream compressor and flushed any pending data into the base stream.</para>
        <para>If the <see cref="P:C1.C1Zip.C1ZStreamReader.OwnsBaseStream" /> property is set to True (the default value), 
            then this method also closes the base stream and releases any resources (such as sockets 
            and file handles) associated with it.</para>
      </summary>
    </member>
    <member name="M:C1.C1Zip.C1ZStreamReader.ReadByte">
      <summary>
            Reads a byte from the stream and advances the position within the stream 
            by one byte, or returns -1 if at the end of the stream.
            </summary>
      <returns>The unsigned byte cast to an <see cref="T:System.Int32" />, or -1 if at 
            the end of the stream.
            </returns>
    </member>
    <member name="P:C1.C1Zip.C1ZStreamReader.BaseStream">
      <summary>
            Gets the underlying stream that contains the compressed data.
            </summary>
    </member>
    <member name="P:C1.C1Zip.C1ZStreamReader.OwnsBaseStream">
      <summary>
            Gets or sets whether calling the <see cref="M:C1.C1Zip.C1ZStreamReader.Close" /> method will also
            close the underlying stream (see <see cref="P:C1.C1Zip.C1ZStreamReader.BaseStream" />).
            </summary>
    </member>
    <member name="P:C1.C1Zip.C1ZStreamReader.SizeCompressed">
      <summary>
            Gets the number of bytes in the stream (compressed bytes).
            </summary>
    </member>
    <member name="P:C1.C1Zip.C1ZStreamReader.SizeUncompressed">
      <summary>
            Gets the number of bytes that were compressed into the stream (uncompressed bytes).
            </summary>
    </member>
    <member name="P:C1.C1Zip.C1ZStreamReader.ZStream">
      <summary>
            Gets the ZStream instance wrapped by this <see cref="T:C1.C1Zip.C1ZStreamWriter" />.
            </summary>
      <remarks>
            This property is useful only in advanced applications that need to customize 
            the low-level behavior of the compressor. It is not needed in common applications.
            </remarks>
    </member>
    <member name="P:C1.C1Zip.C1ZStreamReader.CanRead">
      <summary>
            Always returns True.
            </summary>
    </member>
    <member name="P:C1.C1Zip.C1ZStreamReader.CanWrite">
      <summary>
            Always returns False.
            </summary>
    </member>
    <member name="P:C1.C1Zip.C1ZStreamReader.CanSeek">
      <summary>
            Always returns False.
            </summary>
    </member>
    <member name="P:C1.C1Zip.C1ZStreamReader.Length">
      <summary>
            Gets the length of the compressed stream if it is known (or -1 if the
            length of the compressed stream is unknown).
            </summary>
    </member>
    <member name="P:C1.C1Zip.C1ZStreamReader.Position">
      <summary>
            Gets the position within the stream (read-only).
            </summary>
    </member>
    <member name="T:C1.C1Zip.CompressionLevelEnum">
      <summary>
            Specifies the level of compression to be applied when adding entries to a <see cref="T:C1.C1Zip.C1ZipFile" />.
            </summary>
    </member>
    <member name="F:C1.C1Zip.CompressionLevelEnum.NoCompression">
      <summary>
            No Compression.
            </summary>
    </member>
    <member name="F:C1.C1Zip.CompressionLevelEnum.BestSpeed">
      <summary>
            Low compression, highest speed.
            </summary>
    </member>
    <member name="F:C1.C1Zip.CompressionLevelEnum.BestCompression">
      <summary>
            Highest compression, low speed.
            </summary>
    </member>
    <member name="F:C1.C1Zip.CompressionLevelEnum.DefaultCompression">
      <summary>
            High compression, high speed.
            </summary>
    </member>
    <member name="T:C1.C1Zip.C1ZStreamWriter">
      <summary>
            Compresses data into .NET Streams.
            </summary>
      <remarks>
        <para>To compress data into a stream, create a <see cref="T:C1.C1Zip.C1ZStreamWriter" /> object 
            passing the stream to the <see cref="T:C1.C1Zip.C1ZStreamWriter" /> constructor.</para>
        <para>Then write the data into the <see cref="T:C1.C1Zip.C1ZStreamWriter" /> using the <see cref="M:C1.C1Zip.C1ZStreamWriter.Write(System.Byte[],System.Int32,System.Int32)" />
            method, or create a <see cref="T:System.IO.StreamWriter" /> on the <see cref="T:C1.C1Zip.C1ZStreamWriter" />. 
            The second option is indicated when you want to write formatted data.</para>
        <para>When you are done writing the data, call the <see cref="M:C1.C1Zip.C1ZStreamWriter.Close" /> method to
            flush the data and close the underlying stream.</para>
      </remarks>
      <example>
            The code below compresses a string into a memory stream:
            <code>
            public byte[] CompressString(string str)
            {
            	// open memory stream
            	MemoryStream ms = new MemoryStream();
            	
            	// attach compressor stream to memory stream
            	C1ZStreamWriter sw = new C1ZStreamWriter(ms);
            	
            	// write data into compressor stream
            	StreamWriter writer = new StreamWriter(sw);
            	writer.Write(str);
            	
            	// flush any pending data
            	writer.Flush();
            	
            	// return the memory buffer
            	return ms.ToArray();
            }
            </code></example>
    </member>
    <member name="M:C1.C1Zip.C1ZStreamWriter.#ctor(System.IO.Stream)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Zip.C1ZStreamWriter" /> class.
            </summary>
      <param name="baseStream">Output stream that will contain the compressed data.</param>
    </member>
    <member name="M:C1.C1Zip.C1ZStreamWriter.#ctor(System.IO.Stream,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Zip.C1ZStreamWriter" /> class.
            </summary>
      <param name="baseStream">Output stream that will contain the compressed data.</param>
      <param name="zip">Specifies whether the compressed stream should be compatible with zip files.</param>
      <remarks>
        <para>Streams in zip files are different from regular zlib streams in two aspects:</para>
        <para>(1) zip streams do not contain any local header information (the information is stored in the zip file headers instead) and</para>
        <para>(2) zip streams use a CRC32 checksum instead of the adler32 checksum used by zlib streams.</para>
      </remarks>
    </member>
    <member name="M:C1.C1Zip.C1ZStreamWriter.#ctor(System.IO.Stream,System.Boolean,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Zip.C1ZStreamWriter" /> class.
            </summary>
      <param name="baseStream">Output stream that will contain the compressed data.</param>
      <param name="header">Include header information in compressed stream (should be False for streams in zip files).</param>
      <param name="crc32">Include CRC32 checksum in compressed stream (should be True for streams in zip files).</param>
    </member>
    <member name="M:C1.C1Zip.C1ZStreamWriter.#ctor(System.IO.Stream,C1.C1Zip.CompressionLevelEnum)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Zip.C1ZStreamWriter" /> class.
            </summary>
      <param name="baseStream">Output stream that will contain the compressed data.</param>
      <param name="level">Compression level to use when compressing data.</param>
    </member>
    <member name="M:C1.C1Zip.C1ZStreamWriter.#ctor(System.IO.Stream,C1.C1Zip.CompressionLevelEnum,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Zip.C1ZStreamWriter" /> class.
            </summary>
      <param name="baseStream">Output stream that will contain the compressed data.</param>
      <param name="level">Compression level to use when compressing data.</param>
      <param name="zip">Specifies whether the compressed stream should be compatible with zip files.</param>
    </member>
    <member name="M:C1.C1Zip.C1ZStreamWriter.#ctor(System.IO.Stream,C1.C1Zip.CompressionLevelEnum,System.Boolean,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Zip.C1ZStreamWriter" /> class.
            </summary>
      <param name="baseStream">Output stream that will contain the compressed data.</param>
      <param name="level">Compression level to use when compressing data.</param>
      <param name="header">Include header information in compressed stream (should be False for streams in zip files).</param>
      <param name="crc32">Include CRC32 checksum in compressed stream (should be True for streams in zip files).</param>
    </member>
    <member name="M:C1.C1Zip.C1ZStreamWriter.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>
            Not supported.
            </summary>
    </member>
    <member name="M:C1.C1Zip.C1ZStreamWriter.SetLength(System.Int64)">
      <summary>
            Not supported.
            </summary>
    </member>
    <member name="M:C1.C1Zip.C1ZStreamWriter.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>
            Not supported.
            </summary>
    </member>
    <member name="M:C1.C1Zip.C1ZStreamWriter.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>
            Writes a sequence of bytes to the current stream and advances the current 
            position within this stream by the number of bytes written.
            </summary>
      <param name="buf">An array of bytes. This method copies <paramref name="count" /> bytes from
            <paramref name="buf" /> to the current stream.</param>
      <param name="offset">The zero-based byte offset in <paramref name="buf" /> at which to begin copying bytes to the current stream.</param>
      <param name="count">The number of bytes to be written to the current stream.</param>
      <remarks>
            The data is compressed as it is written into the stream. Writing <paramref name="count" /> bytes
            into the stream will usually advance the position by a number smaller than <paramref name="count" />.
            </remarks>
    </member>
    <member name="M:C1.C1Zip.C1ZStreamWriter.Flush">
      <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying 
            stream.
            </summary>
    </member>
    <member name="M:C1.C1Zip.C1ZStreamWriter.Close">
      <summary>
        <para>Closes the current stream compressor and flushed any pending data into the base stream.</para>
        <para>If the <see cref="P:C1.C1Zip.C1ZStreamWriter.OwnsBaseStream" /> property is set to True (the default value), 
            then this method also closes the base stream and releases any resources (such as sockets 
            and file handles) associated with it.</para>
      </summary>
    </member>
    <member name="M:C1.C1Zip.C1ZStreamWriter.WriteByte(System.Byte)">
      <summary>
            Writes a byte to the current position in the stream and advances the position within the stream by one byte.
            </summary>
      <param name="value">Value to be written to the stream.</param>
    </member>
    <member name="P:C1.C1Zip.C1ZStreamWriter.BaseStream">
      <summary>
            Gets the underlying stream that receives the compressed data.
            </summary>
    </member>
    <member name="P:C1.C1Zip.C1ZStreamWriter.OwnsBaseStream">
      <summary>
            Gets or sets whether calling the <see cref="M:C1.C1Zip.C1ZStreamWriter.Close" /> method will also
            close the underlying stream (see <see cref="P:C1.C1Zip.C1ZStreamWriter.BaseStream" />).
            </summary>
    </member>
    <member name="P:C1.C1Zip.C1ZStreamWriter.Checksum">
      <summary>
            Gets the checksum value used to check the integrity of the stream.
            </summary>
      <remarks>
            The checksum used may be an Adler or crc32 value depending on how
            the <see cref="T:C1.C1Zip.C1ZStreamWriter" /> was created.
            </remarks>
    </member>
    <member name="P:C1.C1Zip.C1ZStreamWriter.SizeCompressed">
      <summary>
            Gets the number of bytes in the stream (compressed bytes).
            </summary>
    </member>
    <member name="P:C1.C1Zip.C1ZStreamWriter.SizeUncompressed">
      <summary>
            Gets the number of bytes that were compressed into the stream (uncompressed bytes).
            </summary>
    </member>
    <member name="P:C1.C1Zip.C1ZStreamWriter.ZStream">
      <summary>
            Gets the ZStream instance wrapped by this <see cref="T:C1.C1Zip.C1ZStreamWriter" />.
            </summary>
      <remarks>
            This property is useful only in advanced applications that need to customize 
            the low-level behavior of the compressor. It is not needed in common applications.
            </remarks>
    </member>
    <member name="P:C1.C1Zip.C1ZStreamWriter.CanRead">
      <summary>
            Always returns False.
            </summary>
    </member>
    <member name="P:C1.C1Zip.C1ZStreamWriter.CanWrite">
      <summary>
            Always returns True.
            </summary>
    </member>
    <member name="P:C1.C1Zip.C1ZStreamWriter.CanSeek">
      <summary>
            Always returns False.
            </summary>
    </member>
    <member name="P:C1.C1Zip.C1ZStreamWriter.Length">
      <summary>
            Returns the length of the underlying stream, in bytes.
            </summary>
    </member>
    <member name="P:C1.C1Zip.C1ZStreamWriter.Position">
      <summary>
            Gets the position within the stream (read-only).
            </summary>
    </member>
    <member name="T:C1.C1Zip.ZLib.ZStream">
      <summary>
        <b>ZStream</b> is the most flexible and hardest to use class in the <b>C1.C1Zip</b> assembly.
            It contains a C# implementation of ZLIB's zstream object, which is a general purpose 
            compressor and decompressor.
            </summary>
      <remarks>
        <para>In most cases, you should be able to use the <see cref="T:C1.C1Zip.C1ZStreamReader" /> 
            and <see cref="T:C1.C1Zip.C1ZStreamWriter" /> classes instead of <b>ZStream</b>. 
            These classes provide friendly and easy-to-use wrappers that hide the ZLIB complexity.</para>
        <para>
            Use <b>ZStream</b> only if you are familiar with ZLIB and need control over 
            the low-level aspects of the data compression or decompression process 
            (e.g., to provide your own buffers or compression dictionaries).</para>
        <para>
            If you choose to use <b>ZStream</b> directly and need technical support, 
            please check out the detailed documentation, sample, and articles available 
            at http://www.info-zip.org/ or http://www.gzip.org/, the official zlib sites.</para>
        <para>
            ZLIB is an open-source, patent-free library created by Jean-Loup Gailly and Mark Adler.</para>
      </remarks>
    </member>
    <member name="F:C1.C1Zip.ZLib.ZStream.Z_OK">
      <summary>
            No error.
            </summary>
    </member>
    <member name="F:C1.C1Zip.ZLib.ZStream.Z_STREAM_END">
      <summary>
            End of stream detected.
            </summary>
    </member>
    <member name="F:C1.C1Zip.ZLib.ZStream.Z_NEED_DICT">
      <summary>
            A preset dictionary is needed at this point.
            </summary>
    </member>
    <member name="F:C1.C1Zip.ZLib.ZStream.Z_ERRNO">
      <summary>
            File error.
            </summary>
    </member>
    <member name="F:C1.C1Zip.ZLib.ZStream.Z_STREAM_ERROR">
      <summary>
            Stream structure is inconsistent (input/output buffers are null for example).
            </summary>
    </member>
    <member name="F:C1.C1Zip.ZLib.ZStream.Z_DATA_ERROR">
      <summary>
            Input data is corrupted (wrong format or checksum).
            </summary>
    </member>
    <member name="F:C1.C1Zip.ZLib.ZStream.Z_MEM_ERROR">
      <summary>
            Not enough memory.
            </summary>
    </member>
    <member name="F:C1.C1Zip.ZLib.ZStream.Z_BUF_ERROR">
      <summary>
            No progress possible or no room in output buffer.
            </summary>
    </member>
    <member name="F:C1.C1Zip.ZLib.ZStream.Z_VERSION_ERROR">
      <summary>
            Incompatible ZLIB version.
            </summary>
    </member>
    <member name="F:C1.C1Zip.ZLib.ZStream.next_in">
      <summary>
            Input buffer.
            </summary>
    </member>
    <member name="F:C1.C1Zip.ZLib.ZStream.next_in_index">
      <summary>
            Position of cursor into input buffer.
            </summary>
    </member>
    <member name="F:C1.C1Zip.ZLib.ZStream.avail_in">
      <summary>
            Number of bytes available in the input buffer.
            </summary>
    </member>
    <member name="F:C1.C1Zip.ZLib.ZStream.total_in">
      <summary>
            Total number of input bytes read so far.
            </summary>
    </member>
    <member name="F:C1.C1Zip.ZLib.ZStream.next_out">
      <summary>
            Output buffer.
            </summary>
    </member>
    <member name="F:C1.C1Zip.ZLib.ZStream.next_out_index">
      <summary>
            Position of cursor into the output buffer.
            </summary>
    </member>
    <member name="F:C1.C1Zip.ZLib.ZStream.avail_out">
      <summary>
            Number of free bytes remaining in output buffer.
            </summary>
    </member>
    <member name="F:C1.C1Zip.ZLib.ZStream.total_out">
      <summary>
            Total number of bytes output so far.
            </summary>
    </member>
    <member name="F:C1.C1Zip.ZLib.ZStream.msg">
      <summary>
            Description of the last error (null if no errors).
            </summary>
    </member>
    <member name="F:C1.C1Zip.ZLib.ZStream.adler">
      <summary>
            Current checksum value (Adler or CRC32).
            </summary>
    </member>
    <member name="M:C1.C1Zip.ZLib.ZStream.#ctor">
      <summary>
            Initializes a new instance of the <b>ZStream</b> class using an Adler checksum.
            </summary>
    </member>
    <member name="M:C1.C1Zip.ZLib.ZStream.#ctor(System.Boolean)">
      <summary>
            Initializes a new instance of the <b>ZStream</b> class.
            </summary>
      <param name="crc32">
        <b>True</b> to use a CRC32 checksum, <b>False</b> to use an Adler checksum.</param>
      <remarks>
            CRC32 checksums are the standard used in zip files. Adler checksums are the default
            used by ZLIB. Adler checksums are faster to calculate, but are not compatible with the zip format.
            </remarks>
    </member>
    <member name="M:C1.C1Zip.ZLib.ZStream.inflateInit">
      <summary>
            Initializes the internal stream state for decompression.
            </summary>
      <returns>Zero on success, an error code on failure.</returns>
      <remarks>
        <para>The fields <see cref="F:C1.C1Zip.ZLib.ZStream.next_in" /> and <see cref="F:C1.C1Zip.ZLib.ZStream.avail_in" /> must be 
            initialized before by the caller.</para>
        <para>
          <b>inflateInit</b> does not perform any decompression apart from reading the 
            zlib header if present: data decompression is done by the <see cref="M:C1.C1Zip.ZLib.ZStream.inflate(System.Int32)" /> 
            method. Therefore, the <b>next_in</b> and <b>avail_in</b> may be modified, but 
            <b>next_out</b> and <b>avail_out</b> are unchanged.</para>
      </remarks>
    </member>
    <member name="M:C1.C1Zip.ZLib.ZStream.inflateInit(System.Int32)">
      <summary>
            Initializes the internal stream state for decompression.
            </summary>
      <param name="bits">Size of the LZ77 sliding compression window in bits (the default value is 15 bits).</param>
      <returns>Zero on success, an error code on failure.</returns>
    </member>
    <member name="M:C1.C1Zip.ZLib.ZStream.inflate(System.Int32)">
      <summary>
            Decompresses as much data as possible until the input buffer is exhausted or 
            the output buffer is full.
            </summary>
      <param name="flush">How to flush data into the output buffer (default value is 2).</param>
      <returns>
        <b>Z_OK</b> if some progress has been made (more input processed or more output produced), 
            <b>Z_STREAM_END</b> if the end of the compressed data has been reached and all 
            uncompressed output has been produced, 
            <b>Z_NEED_DICT</b> if a preset dictionary is needed at this point, 
            <b>Z_DATA_ERROR</b> if the input data was corrupted (input stream not conforming to 
            the zlib format or incorrect checksum), 
            <b>Z_STREAM_ERROR</b> if the stream structure was inconsistent (for example if 
            <b>next_in</b> or <b>next_out</b> was null), 
            <b>Z_MEM_ERROR</b> if there was not enough memory,
            <b>Z_BUF_ERROR</b> if no progress is possible or if there was not enough room in the 
            output buffer when <b>Z_FINISH</b> is used.
            </returns>
      <remarks>
        <para>
          <b>inflate</b> performs one or both of the following actions:</para>
        <para>1. Decompress more input starting at <b>next_in</b> and update <b>next_in</b>
            and <b>avail_in</b> accordingly. If not all input can be processed (because there 
            is not enough room in the output buffer), <b>next_in</b> is updated and processing 
            will resume at this point for the next call to inflate.</para>
        <para>2. Provide more output starting at <b>next_out</b> and update <b>next_out</b>
            and <b>avail_out</b> accordingly. <b>inflate</b> provides as much output as 
            possible, until there is no more input data or no more space in the output buffer.</para>
        <para>Before the call to inflate, the application should ensure that at least one of the 
            actions is possible, by providing more input and/or consuming more output, and 
            updating the <b>next_*</b> and <b>avail_*</b> values accordingly.</para>
        <para>If <b>inflate</b> returns Zero and <b>avail_out</b> == 0, it must be called again 
            after making room in the output buffer because there might be more output pending.</para>
        <para>The application can consume the uncompressed output when it wants, for example when 
            the output buffer is full (<b>avail_out</b> == 0), or after each call of <b>inflate</b>.</para>
        <para>This method may introduce some output latency (reading input without producing 
            any output) except when forced to flush.</para>
      </remarks>
    </member>
    <member name="M:C1.C1Zip.ZLib.ZStream.inflateEnd">
      <summary>
            Frees all dynamically allocated data structures for this stream, 
            discards any unprocessed input, and does not flush any pending output.
            </summary>
      <returns>Zero on success, an error code on failure.</returns>
    </member>
    <member name="M:C1.C1Zip.ZLib.ZStream.inflateSync">
      <summary>
            Skips invalid compressed data until a full flush point is found, 
            or until all available input is skipped. No output is provided.
            </summary>
      <returns>Zero on success, an error code on failure.</returns>
    </member>
    <member name="M:C1.C1Zip.ZLib.ZStream.inflateSetDictionary(System.Byte[],System.Int32)">
      <summary>
            Initializes the decompression dictionary from the given uncompressed byte sequence.
            </summary>
      <param name="dictionary">Data in the dictionary.</param>
      <param name="dictLength">Number of bytes in the dictionary.</param>
      <returns>Zero on success, an error code on failure.</returns>
      <remarks>
        <para>This method must be called immediately after a call of <see cref="M:C1.C1Zip.ZLib.ZStream.inflate(System.Int32)" /> 
            if this call returned <b>Z_NEED_DICT</b>. The dictionary chosen by the compressor 
            can be determined from the <b>Adler32</b> value returned by this call to <b>inflate</b>.</para>
        <para>The compressor and decompressor must use exactly the same dictionary 
            (see the <see cref="M:C1.C1Zip.ZLib.ZStream.deflateSetDictionary(System.Byte[],System.Int32)" /> method).</para>
      </remarks>
    </member>
    <member name="M:C1.C1Zip.ZLib.ZStream.deflateInit(System.Int32)">
      <summary>
            Initializes the internal stream state for compression.
            </summary>
      <param name="level">Compression level between zero and nine (0-9).</param>
      <returns>Zero on success, an error code on failure.</returns>
      <remarks>
        <para>Compression level 1 gives best speed, 9 gives best compression.</para>
        <para>Compression level zero gives no compression at all (the input data is simply copied a block at a time).</para>
        <para>The default compression level is 6, which provides a compromise between speed and compression.</para>
      </remarks>
    </member>
    <member name="M:C1.C1Zip.ZLib.ZStream.deflateInit(System.Int32,System.Int32)">
      <summary>
            Initializes the internal stream state for compression.
            </summary>
      <param name="level">Compression level between zero and nine (0-9).</param>
      <param name="bits">Size of the LZ77 sliding compression window in bits (the default value is 15 bits).</param>
      <returns>Zero on success, an error code on failure.</returns>
      <remarks>
        <para>Compression level 1 gives best speed, 9 gives best compression.</para>
        <para>Compression level zero gives no compression at all (the input data is simply copied a block at a time).</para>
        <para>The default compression level is 6, which provides a compromise between speed and compression.</para>
      </remarks>
    </member>
    <member name="M:C1.C1Zip.ZLib.ZStream.deflate(System.Int32)">
      <summary>
            Compresses as much data as possible, and stops when the input buffer becomes empty or the 
            output buffer becomes full.
            </summary>
      <param name="flush">Non-zero to force some data to be flushed into the output buffer.</param>
      <returns>Zero on success, an error code on failure.</returns>
      <remarks>
        <para>
          <b>deflate</b> performs one or both of the following actions:</para>
        <para>1. Compress more input starting at <b>next_in</b> and update <b>next_in</b> and 
            <b>avail_in</b> accordingly. If not all input can be processed (because there is not 
            enough room in the output buffer), <b>next_in</b> and <b>avail_in</b> are updated and 
            processing will resume at this point for the next call to <b>deflate</b>.</para>
        <para>2. Provide more output starting at <b>next_out</b> and update <b>next_out</b> and 
            <b>avail_out</b> accordingly. This action is forced if the parameter <paramref name="flush" /> is 
            non zero. Forcing flush frequently degrades the compression ratio, so this parameter 
            should be set only when necessary (in interactive applications). Some output may be 
            provided even if flush is not set</para>
        <para>This method may introduce some output latency (reading input without producing 
            any output) except when forced to flush.</para>
        <para>If <b>deflate</b> returns with <b>avail_out</b> == 0, this method must be called 
            again with the same value of the <paramref name="flush" /> parameter and more output space 
            until the flush is complete (<b>deflate</b> returns with <b>avail_out</b> != 0).</para>
      </remarks>
    </member>
    <member name="M:C1.C1Zip.ZLib.ZStream.deflateEnd">
      <summary>
            Frees all dynamically allocated data structures for this stream, 
            discards any unprocessed input, and does not flush any pending output.
            </summary>
      <returns>Zero on success, an error code on failure.</returns>
    </member>
    <member name="M:C1.C1Zip.ZLib.ZStream.deflateParams(System.Int32,System.Int32)">
      <summary>
            Dynamically updates the compression level and compression strategy.
            </summary>
      <param name="level">Compression level between zero and nine (0-9).</param>
      <param name="strategy">Compression strategy (0-2).</param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Zip.ZLib.ZStream.deflateSetDictionary(System.Byte[],System.Int32)">
      <summary>
            Initializes the compression dictionary from the given byte sequence without 
            producing any compressed output.
            </summary>
      <param name="dictionary">Data in the dictionary.</param>
      <param name="dictLength">Number of bytes in the dictionary.</param>
      <returns>Zero on success, an error code on failure.</returns>
      <remarks>
        <para>This method must be called immediately after <see cref="M:C1.C1Zip.ZLib.ZStream.deflateInit(System.Int32)" />,
            before any call to <see cref="M:C1.C1Zip.ZLib.ZStream.deflate(System.Int32)" />.</para>
        <para>The compressor and decompressor must use exactly the same dictionary 
            (see <see cref="M:C1.C1Zip.ZLib.ZStream.inflateSetDictionary(System.Byte[],System.Int32)" />).</para>
      </remarks>
    </member>
    <member name="T:C1.C1Zip.ZLib.ZStreamException">
      <summary>
            The exception that is thrown when reading or writing to a compressed stream fails.
            </summary>
    </member>
  </members>
</doc>