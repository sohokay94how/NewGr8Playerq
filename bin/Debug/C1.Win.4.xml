<?xml version="1.0"?>
<doc>
    <assembly>
        <name>C1.Win.4</name>
    </assembly>
    <members>
        <member name="F:C1.Util.Licensing.VersionConst.VerString">
            <summary>
            WinForms version string representation (4 dot-delimited numbers).
            </summary>
        </member>
        <member name="F:C1.Util.Licensing.VersionConst.VersionStr">
            <summary>
            Same as <see cref="F:C1.Util.Licensing.VersionConst.VerString"/>.
            </summary>
        </member>
        <member name="F:C1.Util.Licensing.VersionConst.VerAsmName">
            <summary>
            For .NET 4.0 version only, used for designer assembly names.
            </summary>
        </member>
        <member name="T:C1.Framework.ButtonElement">
            <summary>
            Simple button with text and image.
            </summary>
        </member>
        <member name="T:C1.Framework.StackPanel">
            <summary>
            Panel that stacks children horizontally or vertically into a single line.
            </summary>
        </member>
        <member name="T:C1.Framework.BasePanel">
            <summary>
            Base class for all <see cref="T:C1.Framework.Element"/> object that contain child elements.
            </summary>
            <remarks>
            <para>This class extends <see cref="T:C1.Framework.Element"/> and implements the <see cref="P:C1.Framework.BasePanel.Children"/> property.</para>
            <para>This class acts like a static canvas. It has no layout logic other than sizing itself to fit its children.</para>
            </remarks>
        </member>
        <member name="T:C1.Framework.Element">
            <summary>
            <para>Base class for all elements, handles layout and styles. Instances of this
            class have no content and no children.</para>
            
            <para>Elements with content (and no children) derive from <see cref="T:C1.Framework.ContentElement"/>.</para>
            
            <para>Elements with children derive from <see cref="T:C1.Framework.BasePanel"/>.</para>
            
            <para>This class doesn't do much by itself except call virtual methods that can
            be overridden in derived classes. It can draw a background and borders with 
            no content, so it can be used to implement things like bars and spacers.</para>
            
            <para>It is designed to be very light-weight, since typical documents may create 
            thousands of these. Additional elements should be added to not-so-common derived 
            classes.</para>
            </summary>
        </member>
        <member name="F:C1.Framework.Element._parent">
            <summary>
            The parent <see cref="T:C1.Framework.Element"/>.
            </summary>
        </member>
        <member name="F:C1.Framework.Element._bounds">
            <summary>
            The <see cref="T:System.Drawing.Rectangle"/> that defines the position of the <see cref="T:C1.Framework.Element"/> within its parent.
            </summary>
        </member>
        <member name="F:C1.Framework.Element._style">
            <summary>
            The <see cref="P:C1.Framework.Element.Style"/> object that defines the appearance of this <see cref="T:C1.Framework.Element"/>.
            </summary>
        </member>
        <member name="F:C1.Framework.Element._flags">
            <summary>
            An <see cref="T:C1.Framework.Element.ElementFlags"/> value that defines the behavior of this <see cref="T:C1.Framework.Element"/>.
            </summary>
        </member>
        <member name="M:C1.Framework.Element.#ctor(C1.Framework.Style)">
            <summary>
            Creates a new instance of an <see cref="T:C1.Framework.Element"/>.
            </summary>
            <param name="style">Style for the new element.</param>
        </member>
        <member name="M:C1.Framework.Element.#ctor">
            <summary>
            Creates a new instance of an <see cref="T:C1.Framework.Element"/>.
            </summary>
        </member>
        <member name="M:C1.Framework.Element.Focus">
            <summary>
            Sets the focus to the host control and to this <see cref="T:C1.Framework.Element"/> within the host control.
            </summary>
            <returns>True if the focus was set successfully.</returns>
        </member>
        <member name="M:C1.Framework.Element.GetBounds(C1.Framework.Element)">
            <summary>
            Gets the element's bounds (size and location) within an arbitrary ancestor, in pixels.
            <param name="ancestor">Ancestor element (parent, grand-parent, etc).</param>
            <returns>A <see cref="T:System.Drawing.Rectangle"/> that corresponds to the element's position 
            within the given <paramref name="ancestor"/>.</returns>
            </summary>
        </member>
        <member name="M:C1.Framework.Element.GetBounds(C1.Framework.Element,System.Boolean,System.Boolean)">
            <summary>
            Gets the element's bounds (size and location) within an arbitrary ancestor, in pixels.
            </summary>
            <param name="ancestor">Ancestor element (parent, grand-parent, etc).</param>
            <param name="contentArea">Whether to return the element's outer bounds or content area.</param>
            <param name="clip">Whether to clip the rectangle to the ancestor's content area.</param>
            <returns>A <see cref="T:System.Drawing.Rectangle"/> that corresponds to the element's position 
            within the given <paramref name="ancestor"/>.</returns>
        </member>
        <member name="M:C1.Framework.Element.Offset(System.Int32,System.Int32)">
            <summary>
            Adjusts the location of this element by the specified amount.
            </summary>
            <param name="x">Offset in the horizontal direction.</param>
            <param name="y">Offset in the vertical direction.</param>
        </member>
        <member name="M:C1.Framework.Element.SetDirty(System.Boolean,System.Boolean)">
            <summary>
            Marks this element as dirty, forcing all parent and child elements to be laid out.
            </summary>
            <param name="dirty">Whether the element needs to be laid out.</param>
            <param name="layoutOnly">Whether <b>ContentElements</b> (e.g. elements without children, such as
            <see cref="T:C1.Framework.TextElement"/>, <see cref="T:C1.Framework.ImageElement"/>) also need to be laid out.</param>
        </member>
        <member name="M:C1.Framework.Element.SetDirty(System.Boolean)">
            <summary>
            Marks this element as dirty, forcing all parent and child elements to be laid out.
            </summary>
            <param name="dirty">Whether the element needs to be laid out.</param>
        </member>
        <member name="M:C1.Framework.Element.SetDirty">
            <summary>
            Marks this element as dirty, forcing all parent and child elements to be laid out.
            </summary>
        </member>
        <member name="M:C1.Framework.Element.Clone">
            <summary>
            Returns a clone of this element.
            </summary>
            <returns>A clone of this element.</returns>
        </member>
        <member name="M:C1.Framework.Element.Layout(System.Drawing.Graphics)">
            <summary>
            Lays out this element based on its style and contents.
            </summary>
            <param name="g">Graphics object used to measure the element.</param>
        </member>
        <member name="M:C1.Framework.Element.Layout">
            <summary>
            Perform layout using host control's <see cref="T:System.Drawing.Graphics"/> object.
            </summary>
        </member>
        <member name="M:C1.Framework.Element.Render(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Renders the element into a given rectangle. 
            </summary>
            <param name="g">Graphics object where the element will be rendered.</param>
            <param name="r">Rectangle where the element will be rendered.</param>
        </member>
        <member name="M:C1.Framework.Element.RenderChildren(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Renders the child elements into a given rectangle. 
            </summary>
            <param name="g">Graphics object where the element will be rendered.</param>
            <param name="r">Rectangle where the child elements will be rendered.</param>
            <remarks>
            Derived elements may override this method in order to draw into the <see cref="T:System.Drawing.Graphics"/>
            after the background and borders have been rendered but before the child elements are 
            rendered.
            </remarks>
        </member>
        <member name="M:C1.Framework.Element.RenderContent(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Render this element's content (no children). 
            </summary>
            <param name="g">Graphics object where the element will be rendered.</param>
            <param name="r">Rectangle to render into.</param>
        </member>
        <member name="M:C1.Framework.Element.HitTest(System.Drawing.Point)">
            <summary>
            Returns the element at a given point.
            </summary>
            <param name="pt">Point to check.</param>
            <returns>The element at the point.</returns>
        </member>
        <member name="M:C1.Framework.Element.GetParentOfType(System.Type)">
            <summary>
            Navigates up the tree to find an ancestor of a given type.
            </summary>
            <param name="type">Type of element we're looking for.</param>
            <returns>A reference to the ancestor of the given type, null if not found.</returns>
        </member>
        <member name="M:C1.Framework.Element.GetScrollOrigin">
            <summary>
            Returns the scroll origin (override to implement non-scrolling areas).
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Framework.Element.IsChildOf(C1.Framework.Element)">
            <summary>
            Determines whether this element is a child of another element.
            </summary>
            <param name="parent">Parent element to investigate.</param>
            <returns>True if <paramref name="parent"/> contains this element.</returns>
        </member>
        <member name="M:C1.Framework.Element.Invalidate(System.Boolean)">
            <summary>
            Invalidates this <see cref="T:C1.Framework.Element"/> within the host control.
            </summary>
            <param name="update">Whether to repaint the host control immediately after invalidation.</param>
        </member>
        <member name="M:C1.Framework.Element.Invalidate">
            <summary>
            Invalidates this <see cref="T:C1.Framework.Element"/> within the host control.
            </summary>
        </member>
        <member name="M:C1.Framework.Element.OnMouseEnter(System.EventArgs)">
            <summary>
            Called by the host control when the mouse enters this <see cref="T:C1.Framework.Element"/>.
            </summary>
            <param name="e"><see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.Element.OnMouseLeave(System.EventArgs)">
            <summary>
            Called by the host control when the mouse leaves this <see cref="T:C1.Framework.Element"/>.
            </summary>
            <param name="e"><see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.Element.OnMouseEnterHover(System.EventArgs)">
            <summary>
            Called by the host control when the mouse enters this <see cref="T:C1.Framework.Element"/>, 
            even if another element has captured the mouse.
            </summary>
            <param name="e"><see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.Element.OnMouseLeaveHover(System.EventArgs)">
            <summary>
            Called by the host control when the mouse leaves this <see cref="T:C1.Framework.Element"/>, 
            even if another element has captured the mouse.
            </summary>
            <param name="e"><see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.Element.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Called by the host control when the user presses a mouse button over this <see cref="T:C1.Framework.Element"/>.
            </summary>
            <param name="e"><see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.Element.OnMouseWheel(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Handles MouseWheel events.
            </summary>
            <param name="e"><see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data.</param>
            <returns>True if the event was handled by this element, false otherwise.</returns>
        </member>
        <member name="M:C1.Framework.Element.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Called by the host control when the user releases a mouse button over this <see cref="T:C1.Framework.Element"/>.
            </summary>
            <param name="e"><see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.Element.OnMouseLostCapture(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Called by the host control when the user releases the left mouse button over a disabled <see cref="T:C1.Framework.Element"/>.
            </summary>
            <param name="e"><see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.Element.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Called by the host control when the mouse moves over this <see cref="T:C1.Framework.Element"/>.
            </summary>
            <param name="e"><see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.Element.OnClick(System.EventArgs)">
            <summary>
            Called by the host control when the user clicks this <see cref="T:C1.Framework.Element"/>.
            </summary>
            <param name="e"><see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.Element.OnDoubleClick(System.EventArgs)">
            <summary>
            Called by the host control when the user double-clicks this <see cref="T:C1.Framework.Element"/>.
            </summary>
            <param name="e"><see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.Element.OnGotFocus(System.EventArgs)">
            <summary>
            Called by the host control when this <see cref="T:C1.Framework.Element"/> receives the focus.
            </summary>
            <param name="e"><see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.Element.OnLostFocus(System.EventArgs)">
            <summary>
            Called by the host control when this <see cref="T:C1.Framework.Element"/> loses the focus.
            </summary>
            <param name="e"><see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.Element.OnValidating(System.ComponentModel.CancelEventArgs)">
            <summary>
            Called by the host control when the element is about to lose focus.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Framework.Element.OnValidated(System.EventArgs)">
            <summary>
            Called by the host control after the element has been validated.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Framework.Element.IsInputKey(System.Windows.Forms.Keys)">
            <summary>
            Determines whether the specified key is a regular input key or a special key that requires preprocessing. 
            </summary>
            <param name="keyData">Key that was pressed and needs to be checked.</param>
            <returns><b>true</b> if the specified key is a regular input key; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:C1.Framework.Element.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Called by the host control when the user presses a key and this <see cref="T:C1.Framework.Element"/> has the focus.
            </summary>
            <param name="e"><see cref="T:System.Windows.Forms.KeyEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.Element.OnKeyUp(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Called by the host control when the user releases a key and this <see cref="T:C1.Framework.Element"/> has the focus.
            </summary>
            <param name="e"><see cref="T:System.Windows.Forms.KeyEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.Element.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Called by the host control when the user presses a character key and this <see cref="T:C1.Framework.Element"/> has the focus.
            </summary>
            <param name="e"><see cref="T:System.Windows.Forms.KeyEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.Element.OnStateChanged(C1.Framework.Element.ElementFlags)">
            <summary>
            Called by the host control when the state of this <see cref="T:C1.Framework.Element"/> changes.
            </summary>
            <param name="oldFlags"><see cref="T:C1.Framework.Element.ElementFlags"/> that contains the state before the change.</param>
            <remarks>
            The state of an element is represented by a combination of <see cref="T:C1.Framework.Element.ElementFlags"/> values.
            Each individual flag is represented by a specific property, including <see cref="P:C1.Framework.Element.Visible"/>, <see cref="P:C1.Framework.Element.Enabled"/>,
            etc.
            </remarks>
        </member>
        <member name="M:C1.Framework.Element.Measure(System.Drawing.Graphics,System.Object)">
            <summary>
            Provides the size, in pixels, of the specified content drawn on the specified <see cref="T:System.Drawing.Graphics"/> surface.
            </summary>
            <param name="g">The <see cref="T:System.Drawing.Graphics"/> object to use for measuring.</param>
            <param name="value">The content to measure.</param>
            <returns>The desired <see cref="P:C1.Framework.Element.Size"/>, in pixels, of the content drawn in a single line with the current style settings in the specified device context.</returns>
        </member>
        <member name="M:C1.Framework.Element.Measure(C1.Framework.Style,System.Drawing.Graphics,System.Object)">
            <summary>
            Provides the size, in pixels, of the specified content drawn on the specified <see cref="T:System.Drawing.Graphics"/> surface with the specified style.
            </summary>
            <param name="s">The <see cref="P:C1.Framework.Element.Style"/> object to use.</param>
            <param name="g">The <see cref="T:System.Drawing.Graphics"/> object to use for measuring.</param>
            <param name="value">The content to measure.</param>
            <returns>The desired <see cref="P:C1.Framework.Element.Size"/>, in pixels, of the content drawn in a single line with the specified style settings in the specified device context.</returns>
        </member>
        <member name="M:C1.Framework.Element.Measure(System.Drawing.Graphics,System.Object,System.Int32)">
            <summary>
            Provides the size, in pixels, of the specified content drawn on the specified <see cref="T:System.Drawing.Graphics"/> surface within the rectangle of the specified width.
            </summary>
            <param name="g">The <see cref="T:System.Drawing.Graphics"/> object to use for measuring.</param>
            <param name="value">The content to measure.</param>
            <param name="width">The available width.</param>
            <returns>The desired <see cref="P:C1.Framework.Element.Size"/>, in pixels, of the content drawn in within the rectangle of the specified width with the current style settings in the specified device context.</returns>
        </member>
        <member name="M:C1.Framework.Element.Measure(C1.Framework.Style,System.Drawing.Graphics,System.Object,System.Int32)">
            <summary>
            Provides the size, in pixels, of the specified content drawn on the specified <see cref="T:System.Drawing.Graphics"/> surface within the rectangle of the specified width with the specified style settings.
            </summary>
            <param name="s">The <see cref="P:C1.Framework.Element.Style"/> object to use.</param>
            <param name="g">The <see cref="T:System.Drawing.Graphics"/> object to use for measuring.</param>
            <param name="value">The content to measure.</param>
            <param name="width">The available width.</param>
            <returns>The desired <see cref="P:C1.Framework.Element.Size"/>, in pixels, of the content drawn in within the rectangle of the specified width with the specified style settings in the specified device context.</returns>
        </member>
        <member name="M:C1.Framework.Element.GetImageResource(System.String)">
            <summary>
            Gets an <see cref="T:System.Drawing.Image"/> from the application's embedded resources.
            </summary>
            <param name="name">Name of the embedded resource that contains the image.</param>
            <returns>An <see cref="T:System.Drawing.Image"/> stored with the given name, or null if the image could not be found.</returns>
        </member>
        <member name="M:C1.Framework.Element.GetBitmapResource(System.String)">
            <summary>
            Gets a <see cref="T:System.Drawing.Bitmap"/> from the application's embedded resources.
            </summary>
            <param name="name">Name of the embedded resource that contains the bitmap.</param>
            <returns>A <see cref="T:System.Drawing.Bitmap"/> stored with the given name, or null if the image could not be found.</returns>
        </member>
        <member name="M:C1.Framework.Element.FindMnemonic(C1.Framework.Element,System.Char)">
            <summary>
            Finds the <see cref="T:C1.Framework.Element"/> that is represented by a given hot key.
            </summary>
            <param name="e"><see cref="T:C1.Framework.Element"/> to search (including all its children).</param>
            <param name="charCode">Hot key to search for.</param>
            <returns>The <see cref="T:C1.Framework.IMnemonicElement"/> that is represented by the given hot key.</returns>
        </member>
        <member name="M:C1.Framework.Element.PointToClient(System.Drawing.Point)">
            <summary>
             Computes the location of the specified screen point into client coordinates.
            </summary>
            <param name="p">The screen coordinate <see cref="T:System.Drawing.Point"/> to convert.</param>
            <returns> A <see cref="T:System.Drawing.Point"/> that represents the converted <see cref="T:System.Drawing.Point"/> in client coordinates.</returns>
        </member>
        <member name="M:C1.Framework.Element.PointToScreen(System.Drawing.Point)">
            <summary>
            Computes the location of the specified client point into screen coordinates.
            </summary>
            <param name="p">The client coordinate <see cref="T:System.Drawing.Point"/> to convert.</param>
            <returns>A <see cref="T:System.Drawing.Point"/> that represents the converted <see cref="T:System.Drawing.Point"/> in screen coordinates.</returns>
        </member>
        <member name="P:C1.Framework.Element.Parent">
            <summary>
            Gets the element's parent, or null if this is the root element.
            </summary>
        </member>
        <member name="P:C1.Framework.Element.Root">
            <summary>
            Gets the element's top-level parent.
            </summary>
        </member>
        <member name="P:C1.Framework.Element.Style">
            <summary>
            Gets or sets the Style object used to render this Element.
            </summary>
        </member>
        <member name="P:C1.Framework.Element.RenderStyle">
            <summary>
            Gets the element's style, or a default style if the element doesn't have one.
            This never returns null.
            </summary>
        </member>
        <member name="P:C1.Framework.Element.Visible">
            <summary>
            Gets or sets whether the element is visible.
            </summary>
        </member>
        <member name="P:C1.Framework.Element.IsVisible">
            <summary>
            Gets whether this element and all its ancestors are visible.
            </summary>
        </member>
        <member name="P:C1.Framework.Element.Enabled">
            <summary>
            Gets or sets whether the element is enabled (can receive mouse and keyboard messages).
            </summary>
        </member>
        <member name="P:C1.Framework.Element.IsEnabled">
            <summary>
            Gets whether this element and all its ancestors are enabled.
            </summary>
        </member>
        <member name="P:C1.Framework.Element.HitTestable">
            <summary>
            Gets or sets whether the element is hit-testable (receives mouse messages).
            </summary>
        </member>
        <member name="P:C1.Framework.Element.Focusable">
            <summary>
            Gets or sets whether the element is focusable (receives keyboard messages).
            </summary>
        </member>
        <member name="P:C1.Framework.Element.IsFocusable">
            <summary>
            Gets whether this element can currently receive the focus.
            </summary>
        </member>
        <member name="P:C1.Framework.Element.InheritedRtl">
            <summary>
            Gets or sets whether the value of RightToLeft property is inherited from the parent element.
            </summary>
        </member>
        <member name="P:C1.Framework.Element.RightToLeft">
            <summary>
            Gets or sets whether the element should be drawn using right-to-left layout.
            </summary>
        </member>
        <member name="P:C1.Framework.Element.ShowFocusRectangle">
            <summary>
            Gets or sets whether the element should display a focus rectangle when it has focus.
            </summary>
        </member>
        <member name="P:C1.Framework.Element.Focused">
            <summary>
            Gets a value that indicates whether this <see cref="T:C1.Framework.Element"/> has the focus.
            </summary>
        </member>
        <member name="P:C1.Framework.Element.ContainsFocus">
            <summary>
            Gets a value that indicates whether this <see cref="T:C1.Framework.Element"/> or one of its children has the focus.
            </summary>
        </member>
        <member name="P:C1.Framework.Element.Validated">
            <summary>
            Gets or sets a value indicating if the contents was successfully validated.
            </summary>
        </member>
        <member name="P:C1.Framework.Element.IsHot">
            <summary>
            Gets or sets whether the element should be displayed using the Style.Hot style.
            </summary>
        </member>
        <member name="P:C1.Framework.Element.IsPressed">
            <summary>
            Gets or sets whether the element should be displayed using the Style.Pressed style.
            </summary>
        </member>
        <member name="P:C1.Framework.Element.Bounds">
            <summary>
            Gets or sets the element's bounds (size and location) within its parent element, in pixels.
            </summary>
        </member>
        <member name="P:C1.Framework.Element.Size">
            <summary>
            Gets or sets the size of the element.
            </summary>
        </member>
        <member name="P:C1.Framework.Element.ContentBounds">
            <summary>
            Client rectangle, in pixels.
            This discounts margins, borders, and padding.
            </summary>
        </member>
        <member name="P:C1.Framework.Element.Width">
            <summary>
            Element width. Set to -1 to let the element calculate it automatically.
            </summary>
        </member>
        <member name="P:C1.Framework.Element.Height">
            <summary>
            Element height. Set to -1 to let the element calculate it automatically.
            </summary>
        </member>
        <member name="P:C1.Framework.Element.Location">
            <summary>
            Gets or sets the location of the element within its parent.
            </summary>
        </member>
        <member name="P:C1.Framework.Element.Left">
            <summary>
            Gets or sets the horizontal position of the element within its parent.
            </summary>
        </member>
        <member name="P:C1.Framework.Element.Top">
            <summary>
            Gets or sets the vertical position of the element within its parent.
            </summary>
        </member>
        <member name="P:C1.Framework.Element.IsDirty">
            <summary>
            Gets a value that indicates this element needs to be laid out.
            </summary>
        </member>
        <member name="P:C1.Framework.Element.LineDescent">
            <summary>
            Gets the portion of the element that renders below the baseline.
            Usually non-zero only for text elements, depends on font.
            </summary>
        </member>
        <member name="P:C1.Framework.Element.ForceLineBreak">
            <summary>
            Gets a <see cref="T:C1.Framework.Element.LineBreak"/> value that determines whether there should be
            line breaks before and/or after this <see cref="T:C1.Framework.Element"/> when it occurs in a paragraph.
            </summary>
        </member>
        <member name="P:C1.Framework.Element.Children">
            <summary>
            Gets a list of child elements.
            </summary>
            <remarks>
            The base class always returns null; panel elements should be based on <see cref="T:C1.Framework.BasePanel"/>.
            </remarks>
        </member>
        <member name="P:C1.Framework.Element.HasChildren">
            <summary>
            Gets a value that indicates the element has a non-empty <see cref="P:C1.Framework.Element.Children"/> collection.
            </summary>
        </member>
        <member name="P:C1.Framework.Element.HostedControl">
            <summary>
            Gets the <see cref="T:System.Windows.Forms.Control"/> that is hosted in this element.
            </summary>
        </member>
        <member name="P:C1.Framework.Element.HostControl">
            <summary>
            Gets the <see cref="T:System.Windows.Forms.Control"/> that is hosting this <see cref="T:C1.Framework.Element"/>.
            </summary>
        </member>
        <member name="P:C1.Framework.Element.AutoSize">
            <summary>
            Gets the <see cref="T:System.Boolean"/> value specifying whether element size is automatically determined by its style and contents.
            </summary>
        </member>
        <member name="P:C1.Framework.Element.AutoWidth">
            <summary>
            Gets or sets the <see cref="T:System.Boolean"/> value specifying whether element width is automatically determined by its style and contents.
            </summary>
        </member>
        <member name="P:C1.Framework.Element.AutoHeight">
            <summary>
            Gets or sets the <see cref="T:System.Boolean"/> value specifying whether element height is automatically determined by its style and contents.
            </summary>
        </member>
        <member name="T:C1.Framework.Element.ElementFlags">
            <summary>
            Flags that represent the state of an <see cref="T:C1.Framework.Element"/>.
            </summary>
        </member>
        <member name="F:C1.Framework.Element.ElementFlags.Dirty">
            <summary>
            Element should be laid out before it is rendered.
            </summary>
        </member>
        <member name="F:C1.Framework.Element.ElementFlags.Visible">
            <summary>
            Element is visible.
            </summary>
        </member>
        <member name="F:C1.Framework.Element.ElementFlags.AutoWidth">
            <summary>
            The width of the element is automatically determined by its style and contents.
            </summary>
        </member>
        <member name="F:C1.Framework.Element.ElementFlags.AutoHeight">
            <summary>
            The height of the element is automatically determined by its style and contents.
            </summary>
        </member>
        <member name="F:C1.Framework.Element.ElementFlags.Enabled">
            <summary>
            The element is enabled and may receive mouse and keyboard messages.
            </summary>
        </member>
        <member name="F:C1.Framework.Element.ElementFlags.HitTestable">
            <summary>
            The element recognizes mouse messages.
            </summary>
        </member>
        <member name="F:C1.Framework.Element.ElementFlags.Focusable">
            <summary>
            The element recognizes keyboard messages.
            </summary>
        </member>
        <member name="F:C1.Framework.Element.ElementFlags.ShowFocus">
            <summary>
            The element should display a focus rectangle when it has the focus.
            </summary>
        </member>
        <member name="F:C1.Framework.Element.ElementFlags.TabStop">
            <summary>
            The element can receive the focus when the tab key is pressed.
            </summary>
        </member>
        <member name="F:C1.Framework.Element.ElementFlags.Hot">
            <summary>
            The mouse is over the element.
            </summary>
        </member>
        <member name="F:C1.Framework.Element.ElementFlags.Pressed">
            <summary>
            The mouse is over the element and the left button is pressed.
            </summary>
        </member>
        <member name="F:C1.Framework.Element.ElementFlags.Isolated">
            <summary>
            The Hot state does not propagate automatically to the parent element.
            </summary>
        </member>
        <member name="F:C1.Framework.Element.ElementFlags.Horizontal">
            <summary>
            Flow child elements in the horizontal direction.
            </summary>
        </member>
        <member name="F:C1.Framework.Element.ElementFlags.RightToLeft">
            <summary>
            Used for international applications where the language is written from right to left.
            </summary>
        </member>
        <member name="F:C1.Framework.Element.ElementFlags.InheritedRtl">
            <summary>
            Indicates if the value of RightToLeft property is inherited from the parent element.
            </summary>
        </member>
        <member name="F:C1.Framework.Element.ElementFlags.Validated">
            <summary>
            Indicates if the contents was successfully validated.
            </summary>
        </member>
        <member name="T:C1.Framework.Element.LineBreak">
            <summary>
            Flags that represent the line-breaking behavior caused by an element when it is contained
            in a paragraph.
            </summary>
        </member>
        <member name="F:C1.Framework.Element.LineBreak.None">
            <summary>
            The element does not cause line breaks.
            </summary>
        </member>
        <member name="F:C1.Framework.Element.LineBreak.Before">
            <summary>
            Insert line breaks before the element.
            </summary>
        </member>
        <member name="F:C1.Framework.Element.LineBreak.After">
            <summary>
            Insert line breaks after the element.
            </summary>
        </member>
        <member name="M:C1.Framework.BasePanel.#ctor(C1.Framework.Style)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Framework.BasePanel"/>.
            </summary>
            <param name="style"><see cref="T:C1.Framework.Style"/> object used to measure and render this <see cref="T:C1.Framework.BasePanel"/>.</param>
        </member>
        <member name="M:C1.Framework.BasePanel.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Framework.BasePanel"/>.
            </summary>
        </member>
        <member name="M:C1.Framework.BasePanel.Layout(System.Drawing.Graphics)">
            <summary>
            Layout this element based on its style and contents.
            </summary>
            <param name="g">Graphics object used to measure the element.</param>
        </member>
        <member name="P:C1.Framework.BasePanel.Children">
            <summary>
            Gets or sets the list of child elements contained in this <see cref="T:C1.Framework.Element"/>.
            </summary>
        </member>
        <member name="M:C1.Framework.StackPanel.#ctor(C1.Framework.Style,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.StackPanel"/> element with specified orientation and style options.
            </summary>
            <param name="style">The <see cref="T:C1.Framework.Style"/> object to use.</param>
            <param name="horizontal">True for horizontal and False for vertical orientation.</param>
        </member>
        <member name="M:C1.Framework.StackPanel.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.StackPanel"/> element with specified orientation.
            </summary>
            <param name="horizontal">True for horizontal and False for vertical orientation.</param>
        </member>
        <member name="M:C1.Framework.StackPanel.#ctor(C1.Framework.Style)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.StackPanel"/> element with specified style options.
            </summary>
            <param name="style">The <see cref="T:C1.Framework.Style"/> object to use.</param>
        </member>
        <member name="M:C1.Framework.StackPanel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.StackPanel"/> element.
            </summary>
        </member>
        <member name="P:C1.Framework.StackPanel.Orientation">
            <summary>
            Gets or sets a value that indicates the dimension by which child elements are stacked.
            </summary>
        </member>
        <member name="T:C1.Framework.IToolTipElement">
            <summary>
            Interface implemented by Elements that want to display tooltips when seen 
            in an XView.
            </summary>
        </member>
        <member name="P:C1.Framework.IToolTipElement.ToolTipText">
            <summary>
            Gets or sets the text that appears as a ToolTip for this <see cref="T:C1.Framework.Element"/>.
            </summary>
        </member>
        <member name="M:C1.Framework.ButtonElement.OnClick">
            <summary>
            Fires the <see cref="E:C1.Framework.ButtonElement.Click"/> event.
            </summary>
        </member>
        <member name="M:C1.Framework.ButtonElement.#ctor(C1.Framework.Style,System.Object[])">
            <summary>
            Initializes a new <see cref="T:C1.Framework.ButtonElement"/> with specified style and content.
            </summary>
            <param name="style">The <see cref="T:C1.Framework.Style"/> object to use.</param>
            <param name="content">An <see cref="T:System.Array"/> of objects to display as content.</param>
        </member>
        <member name="M:C1.Framework.ButtonElement.#ctor(C1.Framework.Style)">
            <summary>
            Initializes a new <see cref="T:C1.Framework.ButtonElement"/> with specified style.
            </summary>
            <param name="style">The <see cref="T:C1.Framework.Style"/> object to use.</param>
        </member>
        <member name="M:C1.Framework.ButtonElement.#ctor(System.Object[])">
            <summary>
            Initializes a new <see cref="T:C1.Framework.ButtonElement"/> with specified content.
            </summary>
            <param name="content">An <see cref="T:System.Array"/> of objects to display as content.</param>
        </member>
        <member name="M:C1.Framework.ButtonElement.#ctor">
            <summary>
            Initializes a new <see cref="T:C1.Framework.ButtonElement"/>.
            </summary>
        </member>
        <member name="M:C1.Framework.ButtonElement.GetTextElement">
            <summary>
            Returns reference to the <see cref="T:C1.Framework.TextElement"/> used to display text.
            </summary>
            <returns>The reference to the <see cref="T:C1.Framework.TextElement"/> if it exists; Null otherwise.</returns>
        </member>
        <member name="M:C1.Framework.ButtonElement.GetTextElement(System.Boolean)">
            <summary>
            Returns reference to the <see cref="T:C1.Framework.TextElement"/> used to display text.
            </summary>
            <param name="force">If True and the <see cref="T:C1.Framework.TextElement"/> doesn't exist, this method will create it.</param>
            <returns>The reference to the <see cref="T:C1.Framework.TextElement"/> if it exists; Null otherwise.</returns>
        </member>
        <member name="M:C1.Framework.ButtonElement.GetImageElement">
            <summary>
            Returns reference to the <see cref="T:C1.Framework.ImageElement"/> used to display image.
            </summary>
            <returns>The reference to the <see cref="T:C1.Framework.ImageElement"/> if it exists; Null otherwise.</returns>
        </member>
        <member name="M:C1.Framework.ButtonElement.GetImageElement(System.Boolean)">
            <summary>
            Returns reference to the <see cref="T:C1.Framework.ImageElement"/> used to display image.
            </summary>
            <param name="force">If True and the <see cref="T:C1.Framework.ImageElement"/> doesn't exist, this method will create it.</param>
            <returns>The reference to the <see cref="T:C1.Framework.ImageElement"/> if it exists; Null otherwise.</returns>
        </member>
        <member name="M:C1.Framework.ButtonElement.PerformClick">
            <summary>
            Fires the <see cref="E:C1.Framework.ButtonElement.Click"/> event.
            </summary>
        </member>
        <member name="M:C1.Framework.ButtonElement.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Called by the host control when the user presses a key and this <see cref="T:C1.Framework.Element"/> has the focus.
            </summary>
            <param name="e"><see cref="T:System.Windows.Forms.KeyEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.ButtonElement.OnKeyUp(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Called by the host control when the user releases a key and this <see cref="T:C1.Framework.Element"/> has the focus.
            </summary>
            <param name="e"><see cref="T:System.Windows.Forms.KeyEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.ButtonElement.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Called by the host control when the user releases a mouse button over this <see cref="T:C1.Framework.Element"/>.
            </summary>
            <param name="e"><see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="E:C1.Framework.ButtonElement.Click">
            <summary>
            Occurs when the <see cref="T:C1.Framework.ButtonElement"/> element is clicked.
            </summary>
        </member>
        <member name="P:C1.Framework.ButtonElement.Text">
            <summary>
            Gets or sets the <see cref="T:System.String"/> value to display.
            </summary>
        </member>
        <member name="P:C1.Framework.ButtonElement.Image">
            <summary>
            Gets or sets the <see cref="P:C1.Framework.ButtonElement.Image"/> to display.
            </summary>
        </member>
        <member name="P:C1.Framework.ButtonElement.ToolTipText">
            <summary>
            Gets or sets the <see cref="T:System.String"/> value to show as element tooltip.
            </summary>
        </member>
        <member name="T:C1.Framework.RepeatButtonElement">
            <summary>
            Repeat button (fires repeatedly, like scrollbar buttons).
            </summary>
        </member>
        <member name="M:C1.Framework.RepeatButtonElement.#ctor(C1.Framework.Style,System.Object[])">
            <summary>
            Initializes a new <see cref="T:C1.Framework.RepeatButtonElement"/> with specified style and content.
            </summary>
            <param name="style">The <see cref="T:C1.Framework.Style"/> object to use.</param>
            <param name="content">An <see cref="T:System.Array"/> of objects to display as content.</param>
        </member>
        <member name="M:C1.Framework.RepeatButtonElement.#ctor(C1.Framework.Style)">
            <summary>
            Initializes a new <see cref="T:C1.Framework.RepeatButtonElement"/> with specified style.
            </summary>
            <param name="style">The <see cref="T:C1.Framework.Style"/> object to use.</param>
        </member>
        <member name="M:C1.Framework.RepeatButtonElement.#ctor(System.Object[])">
            <summary>
            Initializes a new <see cref="T:C1.Framework.RepeatButtonElement"/> with specified content.
            </summary>
            <param name="content">An <see cref="T:System.Array"/> of objects to display as content.</param>
        </member>
        <member name="M:C1.Framework.RepeatButtonElement.#ctor">
            <summary>
            Initializes a new <see cref="T:C1.Framework.RepeatButtonElement"/>.
            </summary>
        </member>
        <member name="M:C1.Framework.RepeatButtonElement.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Called by the host control when the user presses a mouse button over this <see cref="T:C1.Framework.Element"/>.
            </summary>
            <param name="e"><see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.RepeatButtonElement.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Called by the host control when the user releases a mouse button over this <see cref="T:C1.Framework.Element"/>.
            </summary>
            <param name="e"><see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.RepeatButtonElement.OnMouseLostCapture(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Called by the host control when the user releases the left mouse button over a disabled <see cref="T:C1.Framework.Element"/>.
            </summary>
            <param name="e"><see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.RepeatButtonElement.OnMouseEnter(System.EventArgs)">
            <summary>
            Called by the host control when the mouse enters this <see cref="T:C1.Framework.Element"/>.
            </summary>
            <param name="e"><see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.RepeatButtonElement.OnMouseLeave(System.EventArgs)">
            <summary>
            Called by the host control when the mouse leaves this <see cref="T:C1.Framework.Element"/>.
            </summary>
            <param name="e"><see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="P:C1.Framework.RepeatButtonElement.Interval">
            <summary>
            Gets or sets the interval between clicks when the button is kept pressed, in milliseconds.
            </summary>
        </member>
        <member name="P:C1.Framework.RepeatButtonElement.Delay">
            <summary>
            Gets or sets the interval before the button starts firing click events when the button is kept pressed,
            in milliseconds.
            </summary>
        </member>
        <member name="P:C1.Framework.RepeatButtonElement.HoverDelay">
            <summary>
            Gets or sets the interval before the button starts firing click events when the mouse hovers over
            the button, in milliseconds.
            </summary>
        </member>
        <member name="T:C1.Framework.CheckButtonElement">
            <summary>
            Check (toggle) button.
            </summary>
        </member>
        <member name="M:C1.Framework.CheckButtonElement.#ctor(C1.Framework.Style,System.Object[])">
            <summary>
            Initializes a new <see cref="T:C1.Framework.CheckButtonElement"/> with specified style and content.
            </summary>
            <param name="style">The <see cref="T:C1.Framework.Style"/> object to use.</param>
            <param name="content">An <see cref="T:System.Array"/> of objects to display as content.</param>
        </member>
        <member name="M:C1.Framework.CheckButtonElement.#ctor(C1.Framework.Style)">
            <summary>
            Initializes a new <see cref="T:C1.Framework.CheckButtonElement"/> with specified style.
            </summary>
            <param name="style">The <see cref="T:C1.Framework.Style"/> object to use.</param>
        </member>
        <member name="M:C1.Framework.CheckButtonElement.#ctor(System.Object[])">
            <summary>
            Initializes a new <see cref="T:C1.Framework.CheckButtonElement"/> with specified content.
            </summary>
            <param name="content">An <see cref="T:System.Array"/> of objects to display as content.</param>
        </member>
        <member name="M:C1.Framework.CheckButtonElement.#ctor">
            <summary>
            Initializes a new <see cref="T:C1.Framework.CheckButtonElement"/>.
            </summary>
        </member>
        <member name="M:C1.Framework.CheckButtonElement.GetCheckboxImage(System.Windows.Forms.VisualStyles.CheckBoxState)">
            <summary>
            Gets a check box image as a function of the specified checkbox state.
            </summary>
            <param name="state">A value from the <see cref="T:System.Windows.Forms.VisualStyles.CheckBoxState"/> enumeration.</param>
            <returns>A checkbox image to be displayed in the element.</returns>
            <remarks>
            Override this method to provide your own images for checkboxes in various states.
            </remarks>
        </member>
        <member name="M:C1.Framework.CheckButtonElement.GetCheckboxImage">
            <summary>
            Gets a check box image as a function of the current checkbox state.
            </summary>
            <returns>A checkbox image to be displayed in the element.</returns>
        </member>
        <member name="M:C1.Framework.CheckButtonElement.OnMouseLeaveHover(System.EventArgs)">
            <summary>
            Called by the host control when the mouse leaves this <see cref="T:C1.Framework.Element"/>, 
            even if another element has captured the mouse.
            </summary>
            <param name="e"><see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.CheckButtonElement.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Called by the host control when the user releases a mouse button over this <see cref="T:C1.Framework.Element"/>.
            </summary>
            <param name="e"><see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.CheckButtonElement.OnLostFocus(System.EventArgs)">
            <summary>
            Called by the host control when this <see cref="T:C1.Framework.Element"/> loses the focus.
            </summary>
            <param name="e"><see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.CheckButtonElement.OnKeyUp(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Called by the host control when the user releases a key and this <see cref="T:C1.Framework.Element"/> has the focus.
            </summary>
            <param name="e"><see cref="T:System.Windows.Forms.KeyEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.CheckButtonElement.OnClick">
            <summary>
            Fires the <see cref="E:C1.Framework.ButtonElement.Click"/> event.
            </summary>
        </member>
        <member name="M:C1.Framework.CheckButtonElement.OnCheckedChanged">
            <summary>
            Called when check box state is changed.
            </summary>
        </member>
        <member name="M:C1.Framework.CheckButtonElement.OnStateChanged(C1.Framework.Element.ElementFlags)">
            <summary>
            Called by the host control when the state of this <see cref="T:C1.Framework.Element"/> changes.
            </summary>
            <param name="oldFlags"><see cref="T:C1.Framework.Element.ElementFlags"/> that contains the state before the change.</param>
            <remarks>
            The state of an element is represented by a combination of <see cref="T:C1.Framework.Element.ElementFlags"/> values.
            Each individual flag is represented by a specific property, including <see cref="F:C1.Framework.Element.ElementFlags.Visible"/>, <see cref="F:C1.Framework.Element.ElementFlags.Enabled"/>,
            etc.
            </remarks>
        </member>
        <member name="M:C1.Framework.CheckButtonElement.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Called by the host control when the user presses a mouse button over this <see cref="T:C1.Framework.Element"/>.
            </summary>
            <param name="e"><see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="P:C1.Framework.CheckButtonElement.CheckboxImageElement">
            <summary>
            Returns reference to the <see cref="T:C1.Framework.Element"/> used to display chich box mark.
            </summary>
        </member>
        <member name="P:C1.Framework.CheckButtonElement.CheckBoxIndex">
            <summary>
            Gets or sets the index of the CheckBox element within the button.
            </summary>
            <remarks>
            <para>If there is no CheckBox element, this property returns -1. Setting the property to -1 removes the CheckBox element.</para>
            <para>Setting this property value greater than the number of children does not throw an exception. In this case, the
            maximum valid value (Children.Count) is used instead (e.g. CheckBoxIndex = 1000).</para>
            </remarks>
        </member>
        <member name="P:C1.Framework.CheckButtonElement.Checked">
            <summary>
            Gets or sets whether the button is checked.
            </summary>
        </member>
        <member name="P:C1.Framework.CheckButtonElement.CheckState">
            <summary>
            Gets or sets the button's CheckState (can be checked, unchecked, or indeterminate). 
            </summary>
        </member>
        <member name="T:C1.Framework.ContentElement">
            <summary>
            <para>Abstract class for elements that display text or images.</para>
            
            <para>Derived classes should override <see cref="M:C1.Framework.ContentElement.GetValue"/> method to 
            provide the content (text, images, formatted values).</para>
            
            <para>This class does not have child elements.</para>
            </summary>
        </member>
        <member name="M:C1.Framework.ContentElement.#ctor(C1.Framework.Style)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Framework.ContentElement"/>.
            </summary>
            <param name="style">Style for the new element.</param>
        </member>
        <member name="M:C1.Framework.ContentElement.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Framework.ContentElement"/>.
            </summary>
        </member>
        <member name="M:C1.Framework.ContentElement.GetValue">
            <summary>
            Gets the value represented by this <see cref="T:C1.Framework.ContentElement"/>.
            </summary>
            <returns>Object to be rendered as this element's content.</returns>
            <remarks>
            The value is an object that the <see cref="T:C1.Framework.Style"/> class can measure and render, usually a string,
            an <see cref="T:System.Drawing.Image"/>, or an <see cref="T:System.IFormattable"/> object.
            </remarks>
        </member>
        <member name="M:C1.Framework.ContentElement.RenderContent(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Renders the element contents into the specified <see cref="T:System.Drawing.Graphics"/> object at the specified location.
            </summary>
            <param name="g"><see cref="T:System.Drawing.Graphics"/> object where the <see cref="T:C1.Framework.Element"/> will be rendered.</param>
            <param name="r"><see cref="T:System.Drawing.Rectangle"/> where the <see cref="T:C1.Framework.Element"/> contents will be rendered.</param>
        </member>
        <member name="M:C1.Framework.ContentElement.Layout(System.Drawing.Graphics)">
            <summary>
            Layout this element based on its style and contents.
            </summary>
            <param name="g"><see cref="T:System.Drawing.Graphics"/> object used to measure the <see cref="T:C1.Framework.Element"/>.</param>
        </member>
        <member name="M:C1.Framework.ContentElement.ToString">
            <summary>
            Gets a string representation of this <see cref="T:C1.Framework.ContentElement"/>.
            </summary>
            <returns>A string representation of this <see cref="T:C1.Framework.ContentElement"/>.</returns>
        </member>
        <member name="T:C1.Framework.RadioButtonElement">
            <summary>
            Radio button with text and image.
            </summary>
        </member>
        <member name="M:C1.Framework.RadioButtonElement.#ctor(C1.Framework.Style,System.Object[])">
            <summary>
            Initializes a new <see cref="T:C1.Framework.RadioButtonElement"/> with specified style and content.
            </summary>
            <param name="style">The <see cref="T:C1.Framework.Style"/> object to use.</param>
            <param name="content">An <see cref="T:System.Array"/> of objects to display as content.</param>
        </member>
        <member name="M:C1.Framework.RadioButtonElement.#ctor(C1.Framework.Style)">
            <summary>
            Initializes a new <see cref="T:C1.Framework.RadioButtonElement"/> with specified style.
            </summary>
            <param name="style">The <see cref="T:C1.Framework.Style"/> object to use.</param>
        </member>
        <member name="M:C1.Framework.RadioButtonElement.#ctor(System.Object[])">
            <summary>
            Initializes a new <see cref="T:C1.Framework.RadioButtonElement"/> with specified content.
            </summary>
            <param name="content">An <see cref="T:System.Array"/> of objects to display as content.</param>
        </member>
        <member name="M:C1.Framework.RadioButtonElement.#ctor">
            <summary>
            Initializes a new <see cref="T:C1.Framework.RadioButtonElement"/>.
            </summary>
        </member>
        <member name="M:C1.Framework.RadioButtonElement.OnCheckedChanged">
            <summary>
            Called when check box state is changed.
            </summary>
        </member>
        <member name="T:C1.Framework.ControlHostElement">
            <summary>
            <see cref="T:C1.Framework.Element"/> that hosts a WinForms <see cref="P:C1.Framework.ControlHostElement.Control"/>.
            </summary>
            <remarks>
            <para>In principle, this class allows hosting <i>any</i> WinForms control. In practice,
            not all controls work well in this scenario. For example, some controls cannot be freely
            resized, so the element should account for that.</para>
            <para>** Important Note: to allow hosting generic controls, this class stores a reference
            to itself in the contained control's <b>Tag</b> property. That means hosted controls cannot 
            use their <b>Tag</b> property for anything else.</para>
            </remarks>
        </member>
        <member name="T:C1.Framework.IControlHostElement">
            <summary>
            Interface implemented by WinForms controls hosted in X elements.
            </summary>
            <remarks>
            This interface allows the <see cref="T:C1.Framework.XView"/> control to manage WinForms controls 
            contained in C1.Framework elements.
            </remarks>
        </member>
        <member name="M:C1.Framework.IControlHostElement.UpdateControlBounds">
            <summary>
            Updates the hosted control bounds to match the element's current bounds.
            </summary>
        </member>
        <member name="P:C1.Framework.IControlHostElement.Control">
            <summary>
            Gets a reference to the <see cref="P:C1.Framework.IControlHostElement.Control"/> that this <see cref="T:C1.Framework.Element"/> is hosting.
            </summary>
        </member>
        <member name="M:C1.Framework.ControlHostElement.#ctor(C1.Framework.Style,System.Windows.Forms.Control)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.ControlHostElement"/> with the specified style and control to host.
            </summary>
            <param name="style">The <see cref="T:C1.Framework.Style"/> object to use.</param>
            <param name="hostedControl">The <see cref="P:C1.Framework.ControlHostElement.Control"/> that this element is hosting.</param>
        </member>
        <member name="M:C1.Framework.ControlHostElement.#ctor(C1.Framework.Style)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.ControlHostElement"/> with the specified style.
            </summary>
            <param name="style">The <see cref="T:C1.Framework.Style"/> object to use.</param>
        </member>
        <member name="M:C1.Framework.ControlHostElement.#ctor(System.Windows.Forms.Control)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.ControlHostElement"/> with the specified control to host.
            </summary>
            <param name="hostedControl">The <see cref="P:C1.Framework.ControlHostElement.Control"/> that this element is hosting.</param>
        </member>
        <member name="M:C1.Framework.ControlHostElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.ControlHostElement"/>.
            </summary>
        </member>
        <member name="M:C1.Framework.ControlHostElement.ApplyStyle">
            <summary>
            Copies style attributes from the element to the hosted control.
            </summary>
        </member>
        <member name="M:C1.Framework.ControlHostElement.UpdateControlBounds">
            <summary>
            Updates the hosted control bounds to match the element's bounds.
            </summary>
        </member>
        <member name="M:C1.Framework.ControlHostElement.OnTextChanged(System.EventArgs)">
            <summary>
            Override to get text change notifications.
            </summary>
            <param name="e"><see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.ControlHostElement.Render(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Renders the element into a given rectangle. 
            </summary>
            <param name="g">Graphics object where the element will be rendered.</param>
            <param name="r">Rectangle where the element will be rendered.</param>
        </member>
        <member name="M:C1.Framework.ControlHostElement.OnGotFocus(System.EventArgs)">
            <summary>
            Called by the host control when this <see cref="T:C1.Framework.Element"/> receives the focus.
            </summary>
            <param name="e"><see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.ControlHostElement.OnLostFocus(System.EventArgs)">
            <summary>
            Called by the host control when this <see cref="T:C1.Framework.Element"/> loses the focus.
            </summary>
            <param name="e"><see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.ControlHostElement.OnMouseLeave(System.EventArgs)">
            <summary>
            Called by the host control when the mouse leaves this <see cref="T:C1.Framework.Element"/>.
            </summary>
            <param name="e"><see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="P:C1.Framework.ControlHostElement.HostedControl">
            <summary>
            Gets the <see cref="P:C1.Framework.ControlHostElement.Control"/> that is hosted in this element.
            </summary>
        </member>
        <member name="P:C1.Framework.ControlHostElement.Control">
            <summary>
            Gets or sets the <see cref="P:C1.Framework.ControlHostElement.Control"/> that this element is hosting.
            </summary>
        </member>
        <member name="T:C1.Framework.ProgressBarElement">
            <summary>
            Element equivalent to a WinForms <see cref="T:System.Windows.Forms.ProgressBar"/> control.
            </summary>
            <remarks>
            <para>This element has two styles: the regular (<see cref="P:C1.Framework.Element.Style"/>) is used
            to paint the element background; the <see cref="P:C1.Framework.ProgressBarElement.ProgressStyle"/> is used to paint the
            progress indicator.</para>
            <para>If either style is set to null (the default value), then the background and/or
            progress indicators are rendered using system's current visual theme.</para>
            </remarks>
        </member>
        <member name="M:C1.Framework.ProgressBarElement.#ctor(C1.Framework.Style)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Framework.ProgressBarElement"/> with a given <see cref="T:C1.Framework.Style"/>.
            </summary>
            <param name="style"><see cref="T:C1.Framework.Style"/> used to paint the element's background.</param>
        </member>
        <member name="M:C1.Framework.ProgressBarElement.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Framework.ProgressBarElement"/>.
            </summary>
        </member>
        <member name="P:C1.Framework.ProgressBarElement.Minimum">
            <summary>
            Gets or sets the minimum value of the progress bar range.
            </summary>
        </member>
        <member name="P:C1.Framework.ProgressBarElement.Maximum">
            <summary>
            Gets or sets the maximum value of the progress bar range.
            </summary>
        </member>
        <member name="P:C1.Framework.ProgressBarElement.Value">
            <summary>
            Gets or sets the current value of the progress bar range.
            </summary>
        </member>
        <member name="P:C1.Framework.ProgressBarElement.ProgressStyle">
            <summary>
            Gets or sets the <see cref="T:C1.Framework.Style"/> used to paint the progress bar.
            </summary>
            <remarks>
            If this property is set to null, then the progress is painted using the
            system's current visual theme.
            </remarks>
        </member>
        <member name="T:C1.Framework.ScrollablePanel">
            <summary>
            Panel that knows how to scroll child elements bigger than itself.
            </summary>
            <remarks>
            <para>The child elements are clipped to the bounds of the <b>ScrollablePanel</b>; 
            scrolling is done by setting the <see cref="P:C1.Framework.ScrollablePanel.ScrollPosition"/> property, 
            which works like the <b>ScrollPosition</b> in the <see cref="T:C1.Framework.XView"/> control.</para>
            <para>This class only implements the scrollable (client) area of a scrollable
            control. It doesn't have scrollbars or buttons. For that, use the 
            <see cref="T:C1.Framework.ScrollBarPanel"/> or <see cref="T:C1.Framework.ScrollableStackPanel"/> classes
            (or implement your own scrollable panel).</para>
            </remarks>
        </member>
        <member name="M:C1.Framework.ScrollablePanel.#ctor(C1.Framework.Style)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.ScrollablePanel"/> element with the pecified style options.
            </summary>
            <param name="s">The <see cref="T:C1.Framework.Style"/> object to use.</param>
        </member>
        <member name="M:C1.Framework.ScrollablePanel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.ScrollablePanel"/> element.
            </summary>
        </member>
        <member name="M:C1.Framework.ScrollablePanel.ScrollIntoView(C1.Framework.Element)">
            <summary>
            Scrolls a given <see cref="T:C1.Framework.Element"/> into view.
            </summary>
            <param name="e"><see cref="T:C1.Framework.Element"/> to scroll into view.</param>
        </member>
        <member name="M:C1.Framework.ScrollablePanel.ScrollIntoView(System.Drawing.Rectangle)">
            <summary>
            Scrolls a given <see cref="T:System.Drawing.Rectangle"/> into view.
            </summary>
            <param name="r"><see cref="T:System.Drawing.Rectangle"/> to scroll into view.</param>
        </member>
        <member name="M:C1.Framework.ScrollablePanel.OnScrollPositionChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:C1.Framework.ScrollablePanel.ScrollPositionChanged"/> event.
            </summary>
            <param name="e"><see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="P:C1.Framework.ScrollablePanel.ScrollPosition">
            <summary>
            Negative pixel offset (like the <see cref="T:C1.Framework.XView"/> control).
            </summary>
        </member>
        <member name="P:C1.Framework.ScrollablePanel.ContentElement">
            <summary>
            <see cref="T:C1.Framework.Element"/> that contains the content to be scrolled.
            </summary>
        </member>
        <member name="P:C1.Framework.ScrollablePanel.SmoothScrolling">
            <summary>
            Gets or sets whether the scrolling should be performed in steps.
            </summary>
            <remarks>
            <para>Setting this property to true causes the panel to scroll its contents
            in steps when the <see cref="P:C1.Framework.ScrollablePanel.ScrollPosition"/> property changes.
            The result is a smooth scrolling effect, as opposed to the instant change applied 
            when <b>SmoothScrolling</b> is set to false.</para>
            </remarks>
        </member>
        <member name="E:C1.Framework.ScrollablePanel.ScrollPositionChanged">
            <summary>
            Event that occurs when the <see cref="P:C1.Framework.ScrollablePanel.ScrollPosition"/> property changes.
            </summary>
        </member>
        <member name="T:C1.Framework.ScrollBarPanel">
            <summary>
            Panel that plays the role of a <see cref="T:System.Windows.Forms.ScrollableControl"/>).
            </summary>
            <remarks>
            <para>This element contains a <see cref="P:C1.Framework.ScrollBarPanel.ScrollablePanel"/> that contains the 
            content to display and two <see cref="T:C1.Framework.ScrollBarElement"/> objects that are displayed
            as needed and control the scroll position on the main panel.</para>
            <para>If the panel contains an <see cref="T:C1.Framework.Element"/> that is <see cref="P:C1.Framework.Element.HitTestable"/>,
            then it will honor the mouse wheel in addition to the scrollbars.</para>
            </remarks>
        </member>
        <member name="M:C1.Framework.ScrollBarPanel.#ctor(C1.Framework.Style)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Framework.ScrollBarPanel"/>.
            </summary>
            <param name="style"><see cref="T:C1.Framework.Style"/> initially assigned to the new <b>ScrollBarPanel</b>.</param>
        </member>
        <member name="M:C1.Framework.ScrollBarPanel.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Framework.ScrollBarPanel"/>.
            </summary>
        </member>
        <member name="P:C1.Framework.ScrollBarPanel.ScrollBars">
            <summary>
            Gets or sets which scrollbars should be visible.
            </summary>
        </member>
        <member name="P:C1.Framework.ScrollBarPanel.ForceScrollBars">
            <summary>
            Gets or sets whether the scrollbars defined by the <see cref="P:C1.Framework.ScrollBarPanel.ScrollBars"/>
            property should remain visible even if they are not needed.
            </summary>
        </member>
        <member name="P:C1.Framework.ScrollBarPanel.ButtonSize">
            <summary>
            Gets or sets the size of the scrollbar buttons.
            </summary>
        </member>
        <member name="P:C1.Framework.ScrollBarPanel.ScrollablePanel">
            <summary>
            Returns reference to the child <see cref="P:C1.Framework.ScrollBarPanel.ScrollablePanel"/> element.
            </summary>
        </member>
        <member name="P:C1.Framework.ScrollBarPanel.ContentElement">
            <summary>
            Gets or sets the <see cref="T:C1.Framework.Element"/> which displays the scrollable content.
            </summary>
        </member>
        <member name="P:C1.Framework.ScrollBarPanel.ScrollBarVertical">
            <summary>
            Returns reference to the vertical <see cref="T:C1.Framework.ScrollBarElement"/> element.
            </summary>
        </member>
        <member name="P:C1.Framework.ScrollBarPanel.ScrollBarHorizontal">
            <summary>
            Returns reference to the horizontal <see cref="T:C1.Framework.ScrollBarElement"/> element.
            </summary>
        </member>
        <member name="T:C1.Framework.ScrollableStackPanel">
            <summary>
            Panel that contains two scroll buttons (<see cref="P:C1.Framework.ScrollableStackPanel.ButtonPrevious"/>, 
            <see cref="P:C1.Framework.ScrollableStackPanel.ButtonNext"/>) and a <see cref="P:C1.Framework.ScrollableStackPanel.ScrollablePanel"/> with 
            content that can be scrolled by clicking the buttons.
            </summary>
            <remarks>
            To use this class, assign the <see cref="T:C1.Framework.Element"/> that contains the 
            scrollable content should be assigned to the <see cref="P:C1.Framework.ScrollableStackPanel.ContentElement"/> 
            property.
            </remarks>
        </member>
        <member name="M:C1.Framework.ScrollableStackPanel.#ctor(C1.Framework.Style)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Framework.ScrollableStackPanel"/>.
            </summary>
            <param name="style"><see cref="T:C1.Framework.Style"/> initially assigned to the new <see cref="T:C1.Framework.ScrollableStackPanel"/>.</param>
        </member>
        <member name="M:C1.Framework.ScrollableStackPanel.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Framework.ScrollableStackPanel"/>.
            </summary>
        </member>
        <member name="P:C1.Framework.ScrollableStackPanel.ScrollPosition">
            <summary>
            Gets or sets the scroll position (negative pixel offset, like the <see cref="T:C1.Framework.XView"/> control).
            </summary>
        </member>
        <member name="P:C1.Framework.ScrollableStackPanel.ScrollStep">
            <summary>
            Gets or sets the scroll step, in pixels.
            </summary>
        </member>
        <member name="P:C1.Framework.ScrollableStackPanel.ScrollDelay">
            <summary>
            Gets or sets the time before buttons start firing while pressed, in milliseconds
            </summary>
        </member>
        <member name="P:C1.Framework.ScrollableStackPanel.ScrollDelayHover">
            <summary>
            Gets or sets the time before buttons start firing when the mouse hovers over them
            (even without pressing them)
            </summary>
            <remarks>
            Set to zero or any negative value to disable the hover scroll feature.
            </remarks>
        </member>
        <member name="P:C1.Framework.ScrollableStackPanel.ScrollInterval">
            <summary>
            Gets or sets the time between scroll steps while buttons are pressed, in milliseconds.
            </summary>
        </member>
        <member name="P:C1.Framework.ScrollableStackPanel.ForceScrollButtons">
            <summary>
            Gets or sets whether the scroll buttons should be visible even when they are not needed.
            </summary>
        </member>
        <member name="P:C1.Framework.ScrollableStackPanel.ButtonPrevious">
            <summary>
            Returns reference to the <see cref="T:C1.Framework.RepeatButtonElement"/> element working for navigation to previous elements.
            </summary>
        </member>
        <member name="P:C1.Framework.ScrollableStackPanel.ButtonNext">
            <summary>
            Returns reference to the <see cref="T:C1.Framework.RepeatButtonElement"/> element working for navigation to next elements.
            </summary>
        </member>
        <member name="P:C1.Framework.ScrollableStackPanel.ScrollablePanel">
            <summary>
            Returns reference to the child <see cref="P:C1.Framework.ScrollableStackPanel.ScrollablePanel"/> element.
            </summary>
        </member>
        <member name="P:C1.Framework.ScrollableStackPanel.ContentElement">
            <summary>
            Gets or sets the <see cref="T:C1.Framework.Element"/> which displays the scrollable content.
            </summary>
        </member>
        <member name="P:C1.Framework.ScrollableStackPanel.ButtonSize">
            <summary>
            Gets or sets the <see cref="T:System.Int32"/> value determining height and width in pixels of navigation buttons.
            
            </summary>
        </member>
        <member name="T:C1.Framework.ScrollBarElement">
            <summary>
            Element that looks and behaves like a WinForms <see cref="T:System.Windows.Forms.ScrollBar"/>.
            </summary>
            <remarks>
            <para>If no <see cref="T:C1.Framework.Style"/> is assigned to this element, it will render itself
            using Windows Visual Styles.</para>
            
            <para>Use the <see cref="P:C1.Framework.StackPanel.Orientation"/> property to control whether
            the <b>ScrollBarElement</b> should be rendered as a vertical or horizontal 
            scrollbar.</para>
            </remarks>
        </member>
        <member name="M:C1.Framework.ScrollBarElement.#ctor(C1.Framework.Style,System.Boolean)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Framework.ScrollBarElement"/>.
            </summary>
            <param name="style"><see cref="T:C1.Framework.Style"/> assigned to the new <b>ScrollBarElement</b>.</param>
            <param name="horizontal">Whether the scrollbar is horizontal or vertical.</param>
        </member>
        <member name="M:C1.Framework.ScrollBarElement.#ctor(C1.Framework.Style)">
            <summary>
            Initializes a new instance of a vertical <see cref="T:C1.Framework.ScrollBarElement"/>.
            </summary>
            <param name="style"><see cref="T:C1.Framework.Style"/> assigned to the new <b>ScrollBarElement</b>.</param>
        </member>
        <member name="M:C1.Framework.ScrollBarElement.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Framework.ScrollBarElement"/> without a <see cref="T:C1.Framework.Style"/>.
            </summary>
            <param name="horizontal">Whether the scrollbar is horizontal or vertical.</param>
        </member>
        <member name="M:C1.Framework.ScrollBarElement.#ctor">
            <summary>
            Initializes a new instance of a vertical <see cref="T:C1.Framework.ScrollBarElement"/> without a <see cref="T:C1.Framework.Style"/>.
            </summary>
        </member>
        <member name="P:C1.Framework.ScrollBarElement.Minimum">
            <summary>
            Gets or sets the lower limit of values of the scrollable range.
            </summary>
        </member>
        <member name="P:C1.Framework.ScrollBarElement.Maximum">
            <summary>
            Gets or sets the upper limit of values of the scrollable range.
            </summary>
        </member>
        <member name="P:C1.Framework.ScrollBarElement.Value">
            <summary>
            Gets or sets a numeric value that represents the current position of the 
            scroll box on the <see cref="T:C1.Framework.ScrollBarElement"/>.
            </summary>
        </member>
        <member name="P:C1.Framework.ScrollBarElement.SmallChange">
            <summary>
            Gets or sets the value to be added to or subtracted from the <see cref="P:C1.Framework.ScrollBarElement.Value"/>
            property when the scroll box is moved a small distance (one 'line').
            </summary>
        </member>
        <member name="P:C1.Framework.ScrollBarElement.LargeChange">
            <summary>
            Gets or sets a value to be added to or subtracted from the <see cref="P:C1.Framework.ScrollBarElement.Value"/> 
            property when the scroll box is moved a large distance (one 'page').
            </summary>
        </member>
        <member name="P:C1.Framework.ScrollBarElement.ProportionalThumb">
            <summary>
            Gets or sets whether the thumb size should reflect the ratio of the scroll bar 
            size to its range.
            </summary>
        </member>
        <member name="P:C1.Framework.ScrollBarElement.ZoomFactor">
            <summary>
            Gets or sets the scale factor (used with Gc/C1Zoom).
            </summary>
        </member>
        <member name="P:C1.Framework.ScrollBarElement.LineUpButton">
            <summary>
            Gets the element that represents the 'line up' button.
            </summary>
            <remarks>
            You can use this value to style the <see cref="T:C1.Framework.ScrollBarElement"/>.
            </remarks>
        </member>
        <member name="P:C1.Framework.ScrollBarElement.PageUpButton">
            <summary>
            Gets the element that represents the 'page up' button.
            </summary>
            <remarks>
            You can use this value to style the <see cref="T:C1.Framework.ScrollBarElement"/>.
            </remarks>
        </member>
        <member name="P:C1.Framework.ScrollBarElement.Thumb">
            <summary>
            Gets the element that represents the scroll box ('thumb' element).
            </summary>
            <remarks>
            You can use this value to style the <see cref="T:C1.Framework.ScrollBarElement"/>.
            </remarks>
        </member>
        <member name="P:C1.Framework.ScrollBarElement.PageDownButton">
            <summary>
            Gets the element that represents the 'page down' button.
            </summary>
            <remarks>
            You can use this value to style the <see cref="T:C1.Framework.ScrollBarElement"/>.
            </remarks>
        </member>
        <member name="P:C1.Framework.ScrollBarElement.LineDownButton">
            <summary>
            Gets the element that represents the 'line down' button.
            </summary>
            <remarks>
            You can use this value to style the <see cref="T:C1.Framework.ScrollBarElement"/>.
            </remarks>
        </member>
        <member name="P:C1.Framework.ScrollBarElement.ButtonSize">
            <summary>
            Gets or sets the size of the thumb and line up/down buttons in the scroll direction.
            </summary>
            <remarks>
            <para>By default, the scroll buttons are square. This property allows you to set the 
            button height in vertical scrollbars or the button width in horizontal scrollbars.</para>
            <para>Set this property to a value less than 1 to restore the default (square) sizes.</para>
            </remarks>
        </member>
        <member name="P:C1.Framework.ScrollBarElement.SmoothScrolling">
            <summary>
            Gets or sets whether the scrolling should be performed in steps.
            </summary>
            <remarks>
            <para>Setting this property to true causes the control to scroll in steps.
            The result is a smooth scrolling effect, as opposed to the instant change 
            applied when <b>SmoothScrolling</b> is set to false.</para>
            </remarks>
        </member>
        <member name="E:C1.Framework.ScrollBarElement.ValueChanged">
            <summary>
            Fires when the <see cref="P:C1.Framework.ScrollBarElement.Value"/> property has been changed.
            </summary>
        </member>
        <member name="T:C1.Framework.ScrollBarElement.ScrollCommand">
            <summary>
            Specifies the command being executed by the ScrollBarElement.
            </summary>
        </member>
        <member name="T:C1.Framework.ScrollBarElement.ScrollBarLineButton">
            <summary>
            Buttons at either end of the scrollbar (line up/down)
            </summary>
        </member>
        <member name="T:C1.Framework.ScrollBarElement.ScrollBarPageButton">
            <summary>
            Area between the buttons and the thumb (page up/down)
            </summary>
        </member>
        <member name="T:C1.Framework.ScrollBarElement.ScrollBarThumb">
            <summary>
            Thumb (track)
            </summary>
        </member>
        <member name="T:C1.Framework.ImageElement">
            <summary>
            <para>Element that displays an <see cref="P:C1.Framework.ImageElement.Image"/>.</para>
            
            <para>Alignment and scaling are controlled by the element's <see cref="T:C1.Framework.Style"/>.</para>
            </summary>
        </member>
        <member name="M:C1.Framework.ImageElement.#ctor(C1.Framework.Style,System.Drawing.Image)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.ImageElement"/> class with the specified image and style options.
            </summary>
            <param name="style">The <see cref="T:C1.Framework.Style"/> object to use.</param>
            <param name="image">The image to show.</param>
        </member>
        <member name="M:C1.Framework.ImageElement.#ctor(System.Drawing.Image)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.ImageElement"/> class with the specified image.
            </summary>
            <param name="image">The image to show.</param>
        </member>
        <member name="M:C1.Framework.ImageElement.#ctor(C1.Framework.Style)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.ImageElement"/> class with the specified style options.
            </summary>
            <param name="style">The <see cref="T:C1.Framework.Style"/> object to use.</param>
        </member>
        <member name="M:C1.Framework.ImageElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.ImageElement"/> class.
            </summary>
        </member>
        <member name="M:C1.Framework.ImageElement.GetValue">
            <summary>
            The content of this element is the image.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.Framework.ImageElement.Image">
            <summary>
            Gets or sets the reference to the <see cref="P:C1.Framework.ImageElement.Image"/> object to show.
            </summary>
        </member>
        <member name="P:C1.Framework.ImageElement.LineDescent">
            <summary>
            No descent for images.
            </summary>
        </member>
        <member name="T:C1.Framework.TabElement">
            <summary>
            Tab pages are represented by TabPageElement elements in the
            tab.TabArea.Children collection.
            </summary>
        </member>
        <member name="T:C1.Framework.DockPanel">
            <summary>
            The <see cref="T:C1.Framework.DockPanel"/> is a layout panel, that layouts children elements to the left, right, top, bottom or center of the panel.
            </summary>
        </member>
        <member name="M:C1.Framework.DockPanel.#ctor(C1.Framework.Style)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.DockPanel"/> with the specified style.
            </summary>
            <param name="style">The <see cref="T:C1.Framework.Style"/> object to use.</param>
        </member>
        <member name="M:C1.Framework.DockPanel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.DockPanel"/>.
            </summary>
        </member>
        <member name="M:C1.Framework.DockPanel.AddChild(C1.Framework.Element,System.Windows.Forms.DockStyle)">
            <summary>
            Adds child element with the specified <see cref="T:System.Windows.Forms.DockStyle"/> option.
            </summary>
            <param name="e">The <see cref="T:C1.Framework.Element"/> to add.</param>
            <param name="dock">The <see cref="T:System.Windows.Forms.DockStyle"/> option to use for the added child element.</param>
        </member>
        <member name="M:C1.Framework.DockPanel.SetDock(C1.Framework.Element,System.Windows.Forms.DockStyle)">
            <summary>
            Changes the <see cref="T:System.Windows.Forms.DockStyle"/> option for the specified child element.
            </summary>
            <param name="e">The <see cref="T:C1.Framework.Element"/> to change.</param>
            <param name="dock">The new <see cref="T:System.Windows.Forms.DockStyle"/> option to use.</param>
        </member>
        <member name="M:C1.Framework.DockPanel.GetDock(C1.Framework.Element)">
            <summary>
            Returns the <see cref="T:System.Windows.Forms.DockStyle"/> option used for the specified child element.
            </summary>
            <param name="e">The child <see cref="T:C1.Framework.Element"/> to check.</param>
            <returns>The new <see cref="T:System.Windows.Forms.DockStyle"/> option used for the specified child element.</returns>
        </member>
        <member name="M:C1.Framework.DockPanel.Clone">
            <summary>
            Returns a clone of this element.
            </summary>
            <returns>A clone of this element.</returns>
        </member>
        <member name="M:C1.Framework.TabElement.Clear">
            <summary>
            Removes all tabs and content from the TabElement.
            </summary>
        </member>
        <member name="M:C1.Framework.TabElement.GetParentTab(C1.Framework.Element)">
            <summary>
            Gets the TabPageElement that contains a given child element.
            </summary>
            <param name="childElement">Child element in the Tab.</param>
            <returns>The TabPageElement that contains the given child element, or
            null if the element does not belong to any tab pages.</returns>
        </member>
        <member name="P:C1.Framework.TabElement.TabArea">
            <summary>
            Gets the RowPanel that contains the tabs.
            </summary>
        </member>
        <member name="P:C1.Framework.TabElement.ContentArea">
            <summary>
            Gets the element that is currently displayed in the content area.
            </summary>
        </member>
        <member name="P:C1.Framework.TabElement.SelectedTab">
            <summary>
            Gets or sets the selected TabPageElement.
            </summary>
        </member>
        <member name="P:C1.Framework.TabElement.TabPages">
            <summary>
            Gets the collection of <see cref="T:C1.Framework.TabPageElement"/> elements that represent the tab pages.
            </summary>
        </member>
        <member name="T:C1.Framework.TabPageElement">
            <summary>
            
            </summary>
        </member>
        <member name="T:C1.Framework.TextBoxElement">
            <summary>
            <see cref="T:C1.Framework.Element"/> that hosts a <see cref="P:C1.Framework.TextBoxElement.TextBox"/> control.
            </summary>
        </member>
        <member name="M:C1.Framework.TextBoxElement.#ctor(C1.Framework.Style,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.TextBoxElement"/> class with specified text and style settings.
            </summary>
            <param name="style">The <see cref="T:C1.Framework.Style"/> object to use.</param>
            <param name="text">The text to display.</param>
        </member>
        <member name="M:C1.Framework.TextBoxElement.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.TextBoxElement"/> class with specified text.
            </summary>
            <param name="text">The text to display.</param>
        </member>
        <member name="M:C1.Framework.TextBoxElement.#ctor(C1.Framework.Style)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.TextBoxElement"/> class with specified  style settings.
            </summary>
            <param name="style">The <see cref="T:C1.Framework.Style"/> object to use.</param>
        </member>
        <member name="M:C1.Framework.TextBoxElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.TextBoxElement"/> class.
            </summary>
        </member>
        <member name="M:C1.Framework.TextBoxElement.UpdateAlignment">
            <summary>
            Updates the alignment of the text box control to reflect the current <see cref="T:C1.Framework.Style"/>.
            </summary>
        </member>
        <member name="P:C1.Framework.TextBoxElement.Text">
            <summary>
            Gets or sets the current text.
            </summary>
        </member>
        <member name="P:C1.Framework.TextBoxElement.TextBox">
            <summary>
            Returns the reference to the hosted <see cref="P:C1.Framework.TextBoxElement.TextBox"/> control.
            </summary>
        </member>
        <member name="P:C1.Framework.TextBoxElement.LineCount">
            <summary>
            Gets the number of lines in the text box control.
            </summary>
        </member>
        <member name="T:C1.Framework.IMnemonicElement">
            <summary>
            Interface implemented by elements that can process mnemonics.
            </summary>
        </member>
        <member name="M:C1.Framework.IMnemonicElement.HandleMnemonic">
            <summary>
            Method that gets called when the user presses the hot key that corresponds to this <see cref="T:C1.Framework.Element"/>.
            </summary>
            <returns>True if the hot key was handled by the element, false otherwise.</returns>
        </member>
        <member name="T:C1.Framework.ElementList">
            <summary>
            Contains a list of Elements that belong to a parent element.
            </summary>
        </member>
        <member name="M:C1.Framework.ElementList.#ctor(C1.Framework.Element)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.ElementList"/> class for the specified owning element.
            </summary>
            <param name="owner">The <see cref="T:C1.Framework.Element"/> which owns this list.</param>
        </member>
        <member name="M:C1.Framework.ElementList.Offset(System.Int32,System.Int32)">
            <summary>
            Adjusts the location of all <see cref="T:C1.Framework.Element"/> objects in the list by the specified amount. 
            </summary>
            <param name="x">Horizontal offset in pixels.</param>
            <param name="y">Vertical offset in pixels.</param>
        </member>
        <member name="M:C1.Framework.ElementList.Offset(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Adjusts the location of some <see cref="T:C1.Framework.Element"/> objects in the list by the specified amount. 
            </summary>
            <param name="x">Horizontal offset in pixels.</param>
            <param name="y">Vertical offset in pixels.</param>
            <param name="first">Index of the first <see cref="T:C1.Framework.Element"/> to be offset.</param>
            <param name="count">Number of elements to offset.</param>
        </member>
        <member name="M:C1.Framework.ElementList.OnListChanged">
            <summary>
            Called when elements are added or removed from the list.
            </summary>
        </member>
        <member name="M:C1.Framework.ElementList.Add(System.Object)">
            <summary>
            Adds an <see cref="T:C1.Framework.Element"/> to the list.
            </summary>
            <param name="value"><see cref="T:C1.Framework.Element"/> to add to the list.</param>
            <returns>The index of the new object in the list.</returns>
        </member>
        <member name="M:C1.Framework.ElementList.Insert(System.Int32,System.Object)">
            <summary>
            Inserts an <see cref="T:C1.Framework.Element"/> at a specified index.
            </summary>
            <param name="index">Index where the <see cref="T:C1.Framework.Element"/> will be inserted.</param>
            <param name="value"><see cref="T:C1.Framework.Element"/> to add to the list.</param>
        </member>
        <member name="M:C1.Framework.ElementList.InsertRange(System.Int32,System.Collections.ICollection)">
            <summary>
            Inserts the elements of a collection into the list at the specified index. 
            </summary>
            <param name="index">Index where the elements will be inserted.</param>
            <param name="c"><see cref="T:System.Collections.ICollection"/> whose elements will be inserted.</param>
        </member>
        <member name="M:C1.Framework.ElementList.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:C1.Framework.Element"/> at the specified index from the list.
            </summary>
            <param name="index">The index of the <see cref="T:C1.Framework.Element"/> to remove.</param>
        </member>
        <member name="M:C1.Framework.ElementList.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of elements from the list.
            </summary>
            <param name="index">Index of the first element to remove from the list.</param>
            <param name="count">Number of elements to remove.</param>
        </member>
        <member name="M:C1.Framework.ElementList.Reverse(System.Int32,System.Int32)">
            <summary>
            Reverses the order of the elements in the list or a portion of it. 
            </summary>
            <param name="index">Index where the reversal should start.</param>
            <param name="count">Number of elements to reverse.</param>
        </member>
        <member name="M:C1.Framework.ElementList.Reverse">
            <summary>
            Reverses the order of the elements in the list or a portion of it. 
            </summary>
        </member>
        <member name="M:C1.Framework.ElementList.Clear">
            <summary>
            Removes all elements from the list.
            </summary>
        </member>
        <member name="P:C1.Framework.ElementList.Owner">
            <summary>
            Gets a reference to the <see cref="T:C1.Framework.Element"/> that owns this <see cref="T:C1.Framework.ElementList"/>.
            </summary>
        </member>
        <member name="P:C1.Framework.ElementList.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:C1.Framework.Element"/> at a specified index in the list.
            </summary>
            <param name="index">Index of the element to get or set.</param>.
            <returns>The <see cref="T:C1.Framework.Element"/> at the specified index.</returns>
        </member>
        <member name="P:C1.Framework.ElementList.Last">
            <summary>
            Gets or sets the last <see cref="T:C1.Framework.Element"/> on the list.
            </summary>
        </member>
        <member name="T:C1.Framework.FlowPanel">
            <summary>
            Panel that stacks children horizontally or vertically.
            </summary>
        </member>
        <member name="M:C1.Framework.FlowPanel.#ctor(C1.Framework.Style,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.FlowPanel"/> with the specified style and orientation.
            </summary>
            <param name="style">The <see cref="T:C1.Framework.Style"/> object to use.</param>
            <param name="horizontal">If True, creates panel of the horizontal orientation; if False, creates vertical panel.</param>
        </member>
        <member name="M:C1.Framework.FlowPanel.#ctor(C1.Framework.Style)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.FlowPanel"/> with the specified style settings.
            </summary>
            <param name="style">The <see cref="T:C1.Framework.Style"/> object to use.</param>
        </member>
        <member name="M:C1.Framework.FlowPanel.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.FlowPanel"/> of the specified orientation.
            </summary>
            <param name="horizontal">If True, creates panel of the horizontal orientation; if False, creates vertical panel.</param>
        </member>
        <member name="M:C1.Framework.FlowPanel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.FlowPanel"/>.
            </summary>
        </member>
        <member name="P:C1.Framework.FlowPanel.Orientation">
            <summary>
            Specifies the <see cref="P:C1.Framework.FlowPanel.Orientation"/> value to use for layout children.
            </summary>
        </member>
        <member name="T:C1.Framework.GridCell">
            <summary>
            This class is an accessor for getting and setting elements at intersections
            of grid rows and columns. The actual elements are stored in the rows.
            </summary>
        </member>
        <member name="M:C1.Framework.GridCell.#ctor(C1.Framework.GridPanel,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.GridCell"/> object.
            </summary>
            <param name="grid">The owning <see cref="T:C1.Framework.GridPanel"/> element.</param>
            <param name="row">The number of grid row this cell should appear in.</param>
            <param name="column">The number of grid column this cell should appear in.</param>
        </member>
        <member name="M:C1.Framework.GridCell.#ctor(C1.Framework.GridRow,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.GridCell"/> object.
            </summary>
            <param name="row">The number of grid row this cell should appear in.</param>
            <param name="column">The number of grid column this cell should appear in.</param>
        </member>
        <member name="P:C1.Framework.GridCell.Element">
            <summary>
            Gets or sets the <see cref="P:C1.Framework.GridCell.Element"/> displayed in this grid cell.
            </summary>
        </member>
        <member name="P:C1.Framework.GridCell.RowSpan">
            <summary>
            Gets or sets a value that indicates the total number of rows that cell spans within a grid.
            </summary>
        </member>
        <member name="P:C1.Framework.GridCell.ColSpan">
            <summary>
            Gets or sets a value that indicates the total number of columns that cell spans within a grid.
            </summary>
        </member>
        <member name="T:C1.Framework.GridColumn">
            <summary>
            Keeps track of column widths and positions
            </summary>
        </member>
        <member name="T:C1.Framework.ValueElement">
            <summary>
            <para>Element that displays a simple value (numbers, dates, etc).</para>
            
            <para>The element's <see cref="T:C1.Framework.Style"/> is responsible for formatting the value 
            (with <see cref="T:System.IFormattable"/>).</para>
            </summary>
        </member>
        <member name="M:C1.Framework.ValueElement.#ctor(C1.Framework.Style,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.ValueElement"/> class with the specified value and style settings.
            </summary>
            <param name="style">The <see cref="T:C1.Framework.Style"/> object to use.</param>
            <param name="value">The value to display.</param>
        </member>
        <member name="M:C1.Framework.ValueElement.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.ValueElement"/> class with the specified value.
            </summary>
            <param name="value">The value to display.</param>
        </member>
        <member name="M:C1.Framework.ValueElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.ValueElement"/> class.
            </summary>
        </member>
        <member name="P:C1.Framework.ValueElement.Value">
            <summary>
            Gets or sets the current value.
            </summary>
        </member>
        <member name="T:C1.Framework.GridColumnCollection">
            <summary>
            GridColumn collection. Just an ElementList typed to get and set GridColumn objects.
            </summary>
        </member>
        <member name="M:C1.Framework.GridColumnCollection.#ctor(C1.Framework.GridPanel)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.GridColumnCollection"/> class.
            </summary>
            <param name="grid">The owning <see cref="T:C1.Framework.GridPanel"/> element.</param>
        </member>
        <member name="M:C1.Framework.GridColumnCollection.Add(C1.Framework.GridColumn)">
            <summary>
            Adds an <see cref="T:C1.Framework.GridColumn"/> to the list.
            </summary>
            <param name="value"><see cref="T:C1.Framework.GridColumn"/> to add to the list.</param>
            <returns>The index of the new grid column in the list.</returns>
        </member>
        <member name="M:C1.Framework.GridColumnCollection.Add">
            <summary>
            Adds an <see cref="T:C1.Framework.GridColumn"/> to the list.
            </summary>
            <returns>The index of the new grid column in the list.</returns>
        </member>
        <member name="P:C1.Framework.GridColumnCollection.Grid">
            <summary>
            Return the reference to the owning grid.
            </summary>
        </member>
        <member name="P:C1.Framework.GridColumnCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:C1.Framework.GridColumn"/> at a specified index in the list.
            </summary>
            <param name="index">Index of the grid column to get or set.</param>.
            <returns>The <see cref="T:C1.Framework.GridColumn"/> at the specified index.</returns>
        </member>
        <member name="T:C1.Framework.GridPanel">
            <summary>
            Inherits from BasePanel and provides a grid with rows and columns.
            At each intersection there is a cell object that contains an element.
            Cells may span rows and columns.
            </summary>
        </member>
        <member name="M:C1.Framework.GridPanel.#ctor(C1.Framework.Style,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.GridPanel"/> element with the specified number of rows and columns and style settings.
            </summary>
            <param name="style">The <see cref="T:C1.Framework.Style"/> object to use.</param>
            <param name="rows">The number of rows to create.</param>
            <param name="cols">The number of columns to create.</param>
        </member>
        <member name="M:C1.Framework.GridPanel.#ctor(C1.Framework.Style)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.GridPanel"/> element with the specified style.
            </summary>
            <param name="style">The <see cref="T:C1.Framework.Style"/> object to use.</param>
        </member>
        <member name="M:C1.Framework.GridPanel.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.GridPanel"/> element with the specified number of rows and columns.
            </summary>
            <param name="rows">The number of rows to create.</param>
            <param name="columns">The number of columns to create.</param>
        </member>
        <member name="M:C1.Framework.GridPanel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.GridPanel"/> element.
            </summary>
        </member>
        <member name="P:C1.Framework.GridPanel.Item(System.Int32,System.Int32)">
            <summary>
            Returns the <see cref="T:C1.Framework.GridCell"/> object displayed in the specified row and column.
            </summary>
            <param name="row">The row number.</param>
            <param name="col">The column number.</param>
            <returns>The <see cref="T:C1.Framework.GridCell"/> object.</returns>
            <remarks>If the <see cref="T:C1.Framework.GridCell"/> object with specified row and column numbers doesn't exist when this property is called, it is created. 
            Also this property call migh create missing rows and columns if required.</remarks>
        </member>
        <member name="P:C1.Framework.GridPanel.Rows">
            <summary>
            Returns the <see cref="T:C1.Framework.GridRowCollection"/>.
            </summary>
        </member>
        <member name="P:C1.Framework.GridPanel.Columns">
            <summary>
            Returns the <see cref="T:C1.Framework.GridColumnCollection"/>.
            </summary>
        </member>
        <member name="P:C1.Framework.GridPanel.CellSpacing">
            <summary>
            Gets or sets the <see cref="T:System.Int32"/> value, specifying size in pixels of empty space between adjucent grid cells.
            </summary>
        </member>
        <member name="P:C1.Framework.GridPanel.UniformColumnWidths">
            <summary>
            Gets or sets the <see cref="T:System.Boolean"/> value determining whether all columns should have the same width.
            </summary>
        </member>
        <member name="P:C1.Framework.GridPanel.UniformRowHeights">
            <summary>
            Gets or sets the <see cref="T:System.Boolean"/> value determining whether all rows should have the same height.
            </summary>
        </member>
        <member name="T:C1.Framework.GridRow">
            <summary>
            Keeps track of row heights and positions, stores cells in Children member.
            </summary>
        </member>
        <member name="P:C1.Framework.GridRow.Grid">
            <summary>
            Returns the reference to the owning <see cref="T:C1.Framework.GridPanel"/> element.
            </summary>
        </member>
        <member name="P:C1.Framework.GridRow.Item(System.Int32)">
            <summary>
            Creates the <see cref="T:C1.Framework.GridCell"/> object with the specified column index.
            </summary>
            <param name="col">The column number.</param>
            <returns></returns>
        </member>
        <member name="P:C1.Framework.GridRow.Index">
            <summary>
            Returns the <see cref="T:System.Int32"/> value specifying the index of this row in the owning grid.
            </summary>
        </member>
        <member name="T:C1.Framework.GridRowCollection">
            <summary>
            GridRow collection. Just an ElementList typed to get and set GridRow objects.
            </summary>
        </member>
        <member name="M:C1.Framework.GridRowCollection.#ctor(C1.Framework.GridPanel)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.GridRowCollection"/> class.
            </summary>
            <param name="grid">The owning <see cref="T:C1.Framework.GridPanel"/> element.</param>
        </member>
        <member name="M:C1.Framework.GridRowCollection.Add(C1.Framework.GridRow)">
            <summary>
            Adds a <see cref="T:C1.Framework.GridRow"/> to the list.
            </summary>
            <param name="value">The <see cref="T:C1.Framework.GridRow"/> to add to the list.</param>
            <returns>The index of the new row in the list.</returns>
        </member>
        <member name="M:C1.Framework.GridRowCollection.Add">
            <summary>
            Adds a new <see cref="T:C1.Framework.GridRow"/> to the list.
            </summary>
            <returns>The index of the new row in the list.</returns>
        </member>
        <member name="P:C1.Framework.GridRowCollection.Grid">
            <summary>
            Returns the reference to the owning <see cref="T:C1.Framework.GridPanel"/> element.
            </summary>
        </member>
        <member name="P:C1.Framework.GridRowCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:C1.Framework.GridRow"/> at a specified index in the list.
            </summary>
            <param name="index">Index of the row to get or set.</param>.
            <returns>The <see cref="T:C1.Framework.GridRow"/> at the specified index.</returns>
        </member>
        <member name="T:C1.Framework.CellSpanInfo">
            <summary>
            
            </summary>
        </member>
        <member name="T:C1.Framework.ParagraphElement">
            <summary>
            <see cref="T:C1.Framework.BasePanel"/> that displays paragraphs.
            </summary>
            <remarks>
            This class is a panel that wraps and aligns its child elements.
            </remarks>
        </member>
        <member name="M:C1.Framework.ParagraphElement.#ctor(C1.Framework.Style,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.ParagraphElement"/> class with the specified text and style settings.
            </summary>
            <param name="style">The <see cref="T:C1.Framework.Style"/> object to use.</param>
            <param name="text">The text to display.</param>
        </member>
        <member name="M:C1.Framework.ParagraphElement.#ctor(C1.Framework.Style)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.ParagraphElement"/> class with the specified style settings.
            </summary>
            <param name="style">The <see cref="T:C1.Framework.Style"/> object to use.</param>
        </member>
        <member name="M:C1.Framework.ParagraphElement.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.ParagraphElement"/> class with the specified text.
            </summary>
            <param name="text">The text to display.</param>
        </member>
        <member name="M:C1.Framework.ParagraphElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.ParagraphElement"/> class.
            </summary>
        </member>
        <member name="M:C1.Framework.ParagraphElement.BreakBefore(C1.Framework.Element,System.Int32,System.Int32)">
            <summary>
            Gets a value that determines whether a line break should be inserted before
            a given element.
            </summary>
            <param name="e">Element to test for a line break.</param>
            <param name="lineEnd">Position of the line end if no breaks are added.</param>
            <param name="width">Width available for rendering the paragraph.</param>
            <returns>True if a line break should be inserted before the given element.</returns>
        </member>
        <member name="M:C1.Framework.ParagraphElement.BreakBeforeRtl(C1.Framework.Element,System.Int32,System.Int32)">
            <summary>
            Gets a value that determines whether a line break should be inserted before
            a given element.
            </summary>
            <param name="e">Element to test for a line break.</param>
            <param name="lineStart">Position of the line start if no breaks are added.</param>
            <param name="start">Text start position.</param>
            <returns>True if a line break should be inserted before the given element.</returns>
        </member>
        <member name="T:C1.Framework.TextElement">
            <summary>
            <para>Element that displays a string.</para>
            
            <para>Alignment and formatting are controlled by the element's <see cref="T:C1.Framework.Style"/>.</para>
            </summary>
        </member>
        <member name="M:C1.Framework.TextElement.#ctor(C1.Framework.Style,System.String)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Framework.TextElement"/> with a given style and contents.
            </summary>
            <param name="style"><see cref="T:C1.Framework.Style"/> used to measure and render the <see cref="T:C1.Framework.TextElement"/>,</param>
            <param name="text">String displayed in the <see cref="T:C1.Framework.TextElement"/>,</param>
        </member>
        <member name="M:C1.Framework.TextElement.#ctor(C1.Framework.Style)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Framework.TextElement"/> with a given style.
            </summary>
            <param name="style"><see cref="T:C1.Framework.Style"/> used to measure and render the <see cref="T:C1.Framework.TextElement"/>,</param>
        </member>
        <member name="M:C1.Framework.TextElement.#ctor(System.String)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Framework.TextElement"/> with a given text.
            </summary>
            <param name="text">String displayed in the <see cref="T:C1.Framework.TextElement"/>,</param>
        </member>
        <member name="M:C1.Framework.TextElement.#ctor">
            <summary>
            Initializes a new instance of an empty <see cref="T:C1.Framework.TextElement"/>.
            </summary>
        </member>
        <member name="M:C1.Framework.TextElement.GetValue">
            <summary>
            Gets the string represented by this <see cref="T:C1.Framework.TextElement"/>.
            </summary>
            <returns>The string represented by this <see cref="T:C1.Framework.TextElement"/>.</returns>
        </member>
        <member name="P:C1.Framework.TextElement.Text">
            <summary>
            Gets or sets the string displayed by this <see cref="T:C1.Framework.TextElement"/>.
            </summary>
        </member>
        <member name="P:C1.Framework.TextElement.ForceLineBreak">
            <summary>
            Gets a <see cref="T:C1.Framework.Element.LineBreak"/> value that determines whether there should be
            line breaks before and/or after this <see cref="T:C1.Framework.TextElement"/> when it occurs in a paragraph.
            </summary>
        </member>
        <member name="T:C1.Framework.RowPanel">
            <summary>
            <para>Panel that stacks children horizontally.</para>
            </summary>
        </member>
        <member name="M:C1.Framework.RowPanel.#ctor(C1.Framework.Style)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.RowPanel"/> element with specified style options.
            </summary>
            <param name="style">The <see cref="T:C1.Framework.Style"/> object to use.</param>
        </member>
        <member name="M:C1.Framework.RowPanel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.RowPanel"/> element.
            </summary>
        </member>
        <member name="T:C1.Framework.ColumnPanel">
            <summary>
            <para>Panel that stacks children vertically.</para>
            </summary>
        </member>
        <member name="M:C1.Framework.ColumnPanel.#ctor(C1.Framework.Style)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.ColumnPanel"/> element with specified style options.
            </summary>
            <param name="style">The <see cref="T:C1.Framework.Style"/> object to use.</param>
        </member>
        <member name="M:C1.Framework.ColumnPanel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.ColumnPanel"/> element.
            </summary>
        </member>
        <member name="T:C1.Framework.IBrushProvider">
            <summary>
            Encapsulates a Brush for painting background.
            </summary>
        </member>
        <member name="M:C1.Framework.IBrushProvider.GetBrush(System.Drawing.Rectangle)">
            <summary>
            Returns a brush for the specified rectangle.
            </summary>
        </member>
        <member name="M:C1.Framework.IBrushProvider.GetBrushColor">
            <summary>
            Returns a background color for hosted controls that don't support gradients.
            </summary>
        </member>
        <member name="P:C1.Framework.IBrushProvider.DisposeBrushAfterUse">
            <summary>
            Gets a value indicating if the brush obtained from the <see cref="M:C1.Framework.IBrushProvider.GetBrush(System.Drawing.Rectangle)"/> method should be disposed after use.
            </summary>
        </member>
        <member name="T:C1.Framework.BackgroundBrushProvider">
            <summary>
            Class that encapsulates <see cref="P:C1.Framework.BackgroundBrushProvider.Brush"/> objects used to paint element backgrounds.
            It exposes properties that can be used to create and serialize <see cref="T:System.Drawing.SolidBrush"/>, 
            <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush"/>, and <see cref="T:System.Drawing.Drawing2D.PathGradientBrush"/> objects.
            </summary>
        </member>
        <member name="M:C1.Framework.BackgroundBrushProvider.GetBrush(System.Drawing.Rectangle)">
            <summary>
            Gets an updated <see cref="P:C1.Framework.BackgroundBrushProvider.Brush"/> that can be used to fill a given <see cref="T:System.Drawing.Rectangle"/>.
            </summary>
            <param name="rc">Rectangle used to build the gradient brush if the <see cref="P:C1.Framework.BackgroundBrushProvider.GradientMode"/> 
            property is set to a value other than <b>None</b>.</param>
            <returns>A <see cref="P:C1.Framework.BackgroundBrushProvider.Brush"/> that can be used to paint an element's background.</returns>
        </member>
        <member name="M:C1.Framework.BackgroundBrushProvider.GetBrushColor">
            <summary>
            Returns a background color for hosted controls that don't support gradients.
            </summary>
        </member>
        <member name="M:C1.Framework.BackgroundBrushProvider.Clone">
            <summary>
            Gets a clone of this <see cref="T:C1.Framework.BackgroundBrushProvider"/>.
            </summary>
            <returns>A clone of this <see cref="T:C1.Framework.BackgroundBrushProvider"/>.</returns>
        </member>
        <member name="P:C1.Framework.BackgroundBrushProvider.GradientMode">
            <summary>
            Gets or sets the <see cref="P:C1.Framework.BackgroundBrushProvider.GradientMode"/> for this <see cref="T:C1.Framework.BackgroundBrushProvider"/>.
            </summary>
        </member>
        <member name="P:C1.Framework.BackgroundBrushProvider.GammaCorrection">
            <summary>
            Gets or sets whether gamma correction is applied to the gradient.
            </summary>
        </member>
        <member name="P:C1.Framework.BackgroundBrushProvider.BackColor">
            <summary>
            Gets or sets the main color (used when <see cref="P:C1.Framework.BackgroundBrushProvider.GradientMode"/> is set to <b>None</b>).
            </summary>
        </member>
        <member name="P:C1.Framework.BackgroundBrushProvider.GradientColor">
            <summary>
            Gets or sets the secondary color (used when <see cref="P:C1.Framework.BackgroundBrushProvider.GradientMode"/> is set to a value other than <b>None</b>).
            </summary>
        </member>
        <member name="P:C1.Framework.BackgroundBrushProvider.Blend">
            <summary>
            Gets or sets the <see cref="P:C1.Framework.BackgroundBrushProvider.Blend"/> used to create the gradient.
            </summary>
        </member>
        <member name="P:C1.Framework.BackgroundBrushProvider.InterpolationColors">
            <summary>
            Gets or sets a <see cref="T:System.Drawing.Drawing2D.ColorBlend"/> that defines a multicolor gradient.
            </summary>
        </member>
        <member name="P:C1.Framework.BackgroundBrushProvider.Center">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.PointF"/> that represents the center of a radial gradient.
            </summary>
        </member>
        <member name="P:C1.Framework.BackgroundBrushProvider.Brush">
            <summary>
            Gets or sets a <see cref="P:C1.Framework.BackgroundBrushProvider.Brush"/> object that may be something other than a <see cref="T:System.Drawing.SolidBrush"/>.
            </summary>
        </member>
        <member name="P:C1.Framework.BackgroundBrushProvider.DisposeBrushAfterUse">
            <summary>
            Gets a value indicating if the brush should be disposed after use.
            </summary>
        </member>
        <member name="T:C1.Framework.BlendConverter">
            <summary>
            <see cref="T:System.ComponentModel.TypeConverter"/> that converts <see cref="T:System.Drawing.Drawing2D.Blend"/> objects to and from strings.
            </summary>
            <remarks>
            <para>The <see cref="T:System.Drawing.Drawing2D.Blend"/> object is converted to a string with the following format:</para>
            <para>[p1],[f1];[p2],[f2];...;[pn],[fn]</para>
            <para>Where the 'pi' are positions between 0 and 1 along the blend line and
            'fi' are factors between 0 and 1 that correspond to the amount of the 
            secondary color in the blend.</para>
            <para>The positions must be increasing, and the last one must be 1.</para>
            <para>This converter allows persisting <see cref="T:System.Drawing.Drawing2D.Blend"/> objects to Xml.</para>
            </remarks>
            <example>
            These are some simple blend strings:
            <para>"0,0;1,1": default blend, starting with color1 (0,0) and finishing with color2 (1,1).</para>
            <para>"0,1;1,0": reverse blend, starting with color2 (1,0) and finishing with color1 (0,1).</para>
            <para>"0,0;.5,1;1,0": starts with color1, switches to color2 halfway, then back to color1.</para>
            <para>"0,0;.1,1;.9,1;1,0": starts with color1, switches to color2 at 10%, continues with color2 up to 90%, then switches back to color1.</para>
            </example>
        </member>
        <member name="T:C1.Framework.ColorBlendConverter">
            <summary>
            <see cref="T:System.ComponentModel.TypeConverter"/> that converts <see cref="T:System.Drawing.Drawing2D.ColorBlend"/> objects to and from strings.
            </summary>
        </member>
        <member name="T:C1.Framework.BorderEdges">
            <summary>
            Class that stores colors for individual border edges.
            </summary>
            <remarks>
            <para>In most cases, borders have a single color and this class is not used at all.</para>
            <para>If the members of this class are set to non-transparent colors, then the specified
            colors are used to paint over specific edges.</para>
            <para>This class paints the borders with a bevel so they line up at the corners, but
            it does not handle corners at all, so only rectangular elements can have multi-colored
            borders.</para>
            </remarks>
        </member>
        <member name="M:C1.Framework.BorderEdges.#ctor(C1.Framework.Style)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Framework.BorderEdges"/>.
            </summary>
            <param name="style"><see cref="P:C1.Framework.BorderEdges.Style"/> that owns the new instance.</param>
        </member>
        <member name="M:C1.Framework.BorderEdges.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Framework.BorderEdges"/>.
            </summary>
        </member>
        <member name="M:C1.Framework.BorderEdges.Clone">
            <summary>
            Gets a clone of this <see cref="T:C1.Framework.BorderEdges"/> object.
            </summary>
            <returns>A clone of this <see cref="T:C1.Framework.BorderEdges"/> object.</returns>
        </member>
        <member name="M:C1.Framework.BorderEdges.Equals(System.Object)">
            <summary>
            Returns true if the colors are the same for all edges.
            </summary>
            <remarks>
            This is important when handling persistence and comparing to the default value.
            </remarks>
            <param name="obj"><see cref="T:C1.Framework.BorderEdges"/> to compare to this object.</param>
            <returns>True if the colors are the same for all edges.</returns>
        </member>
        <member name="M:C1.Framework.BorderEdges.GetHashCode">
            <summary>
            Serves as a hash function for a <see cref="T:C1.Framework.BorderEdges"/> object.
            </summary>
            <returns>An integer that serves as a hash function for a <see cref="T:C1.Framework.BorderEdges"/> object.</returns>
        </member>
        <member name="M:C1.Framework.BorderEdges.Render(System.Drawing.Graphics,System.Drawing.Rectangle,C1.Framework.Corners,C1.Framework.Thickness)">
            <summary>
            Renders a border with edges of different colors.
            </summary>
            <param name="g"><see cref="T:System.Drawing.Graphics"/> object where the border will be drawn.</param>
            <param name="r"><see cref="T:System.Drawing.Rectangle"/> within which the border will be drawn.</param>
            <param name="c"><see cref="T:C1.Framework.Corners"/> object that specifies which corners are rounded; 
            edges adjacent to rounded corners are not drawn by the <see cref="T:C1.Framework.BorderEdges"/> class.</param>
            <param name="t"><see cref="T:C1.Framework.Thickness"/> object that specifies the thickness of each edge.</param>
        </member>
        <member name="M:C1.Framework.BorderEdges.Render(System.Drawing.Graphics,System.Drawing.Rectangle,C1.Framework.Corners,C1.Framework.Thickness,System.Boolean)">
            <summary>
            Renders a border with edges of different colors.
            </summary>
            <param name="g"><see cref="T:System.Drawing.Graphics"/> object where the border will be drawn.</param>
            <param name="r"><see cref="T:System.Drawing.Rectangle"/> within which the border will be drawn.</param>
            <param name="c"><see cref="T:C1.Framework.Corners"/> object that specifies which corners are rounded; 
            edges adjacent to rounded corners are not drawn by the <see cref="T:C1.Framework.BorderEdges"/> class.</param>
            <param name="t"><see cref="T:C1.Framework.Thickness"/> object that specifies the thickness of each edge.</param>
            <param name="rtl"><see cref="T:System.Boolean"/> specifies whether to apply RightToLeft layout.</param>
        </member>
        <member name="M:C1.Framework.BorderEdges.Render(System.Drawing.Graphics,System.Drawing.Rectangle,C1.Framework.Corners,C1.Framework.Thickness,System.Drawing.Brush,System.Drawing.Brush,System.Drawing.Brush,System.Drawing.Brush,System.Boolean)">
            <summary>
            Renders a border with edges of different colors.
            </summary>
            <param name="g"><see cref="T:System.Drawing.Graphics"/> object where the border will be drawn.</param>
            <param name="r"><see cref="T:System.Drawing.Rectangle"/> within which the border will be drawn.</param>
            <param name="c"><see cref="T:C1.Framework.Corners"/> object that specifies which corners are rounded; 
            edges adjacent to rounded corners are not drawn by the <see cref="T:C1.Framework.BorderEdges"/> class.</param>
            <param name="t"><see cref="T:C1.Framework.Thickness"/> border thickness.</param>
            <param name="left"><see cref="T:System.Drawing.Brush"/> brush which should be used for left border.</param>
            <param name="right"><see cref="T:System.Drawing.Brush"/> brush which should be used for right border.</param>
            <param name="top"><see cref="T:System.Drawing.Brush"/> brush which should be used for top border.</param>
            <param name="bottom"><see cref="T:System.Drawing.Brush"/> brush which should be used for bottom border.</param>
            <param name="rtl"><see cref="T:System.Boolean"/> specifies whether to apply RightToLeft layout.</param>
        </member>
        <member name="M:C1.Framework.BorderEdges.OnPropertyChanged">
            <summary>
            Notifies the owner <see cref="P:C1.Framework.BorderEdges.Style"/> that this object has changed.
            </summary>
        </member>
        <member name="P:C1.Framework.BorderEdges.Left">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Color"/> used to paint the left edge of the border.
            </summary>
        </member>
        <member name="P:C1.Framework.BorderEdges.Top">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Color"/> used to paint the top edge of the border.
            </summary>
        </member>
        <member name="P:C1.Framework.BorderEdges.Right">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Color"/> used to paint the right edge of the border.
            </summary>
        </member>
        <member name="P:C1.Framework.BorderEdges.Bottom">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Color"/> used to paint the bottom edge of the border.
            </summary>
        </member>
        <member name="P:C1.Framework.BorderEdges.IsEmpty">
            <summary>
            Gets a value that determines if colors have been specified for any of the edges.
            </summary>
        </member>
        <member name="P:C1.Framework.BorderEdges.Style">
            <summary>
            Gets or sets the <see cref="P:C1.Framework.BorderEdges.Style"/> that owns this <see cref="T:C1.Framework.BorderEdges"/> object.
            </summary>
        </member>
        <member name="T:C1.Framework.BorderEdgesConverter">
            <summary>
            <see cref="T:System.ComponentModel.ExpandableObjectConverter"/> that converts <see cref="T:C1.Framework.BorderEdges"/> objects to and from strings.
            </summary>
            <remarks>
            This converter allows persisting <see cref="T:C1.Framework.BorderEdges"/> objects to Xml.
            </remarks>
        </member>
        <member name="T:C1.Framework.Corners">
            <summary>
            Represents corners associated with a user interface (UI) element.
            </summary>
        </member>
        <member name="M:C1.Framework.Corners.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Framework.Corners"/> object. 
            </summary>
            <param name="leftTop">Radius of the left top corner, in pixels.</param>
            <param name="rightTop">Radius of the right top corner, in pixels.</param>
            <param name="leftBottom">Radius of the left bottom corner, in pixels.</param>
            <param name="rightBottom">Radius of the right bottom corner, in pixels.</param>
        </member>
        <member name="M:C1.Framework.Corners.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Framework.Corners"/> object.
            </summary>
            <param name="radius">Radius of all corners, in pixels.</param>
        </member>
        <member name="M:C1.Framework.Corners.op_Implicit(System.Int32)~C1.Framework.Corners">
            <summary>
            Converts an <see cref="T:System.Int32"/> into a <see cref="T:C1.Framework.Corners"/>.
            </summary>
        </member>
        <member name="M:C1.Framework.Corners.SwapLeftRight">
            <summary>
            Swaps corners for RightToLeft layout.
            </summary>
        </member>
        <member name="M:C1.Framework.Corners.GetHashCode">
            <summary>
            Generates a hash code for the current <see cref="T:C1.Framework.Corners"/>. 
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:C1.Framework.Corners.Equals(System.Object)">
            <summary>
            Determines whether the value of the specified object is equivalent 
            to the current <see cref="T:C1.Framework.Corners"/>. 
            </summary>
            <param name="obj">The object to compare to the current <see cref="T:C1.Framework.Corners"/>.</param>
            <returns>true if the two <see cref="T:C1.Framework.Corners"/> objects are equal; 
            otherwise, false. </returns>
        </member>
        <member name="M:C1.Framework.Corners.op_Equality(C1.Framework.Corners,C1.Framework.Corners)">
            <summary>
            Tests whether two specified <see cref="T:C1.Framework.Corners"/> objects are equivalent. 
            </summary>
            <param name="c1">A <see cref="T:C1.Framework.Corners"/> to test.</param>
            <param name="c2">A <see cref="T:C1.Framework.Corners"/> to test.</param>
            <returns>true if the two <see cref="T:C1.Framework.Corners"/> objects are equal; 
            otherwise, false. </returns>
        </member>
        <member name="M:C1.Framework.Corners.op_Inequality(C1.Framework.Corners,C1.Framework.Corners)">
            <summary>
            Tests whether two specified <see cref="T:C1.Framework.Corners"/> objects are not equivalent. 
            </summary>
            <param name="c1">A <see cref="T:C1.Framework.Corners"/> to test.</param>
            <param name="c2">A <see cref="T:C1.Framework.Corners"/> to test.</param>
            <returns>True if the two <see cref="T:C1.Framework.Corners"/> objects are different; 
            otherwise, false. </returns>
        </member>
        <member name="P:C1.Framework.Corners.Empty">
            <summary>
            Provides a <see cref="T:C1.Framework.Corners"/> object with no thickness.
            </summary>
        </member>
        <member name="P:C1.Framework.Corners.LeftTop">
            <summary>
            Gets or sets the radius for the left top corner. 
            </summary>
        </member>
        <member name="P:C1.Framework.Corners.RightTop">
            <summary>
            Gets or sets the radius for the right top corner. 
            </summary>
        </member>
        <member name="P:C1.Framework.Corners.LeftBottom">
            <summary>
            Gets or sets the radius for the left bottom corner. 
            </summary>
        </member>
        <member name="P:C1.Framework.Corners.RightBottom">
            <summary>
            Gets or sets the radius for the right bottom corner. 
            </summary>
        </member>
        <member name="P:C1.Framework.Corners.IsEmpty">
            <summary>
            Returns true if the <see cref="T:C1.Framework.Corners"/> object is empty. 
            </summary>
        </member>
        <member name="T:C1.Framework.CornersConverter">
            <summary>
            Provides a type converter to convert <see cref="T:C1.Framework.Corners"/> values 
            to and from various other representations. 
            </summary>
        </member>
        <member name="M:C1.Framework.CornersConverter.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Framework.CornersConverter"/>.
            </summary>
        </member>
        <member name="M:C1.Framework.CornersConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of one type to the type of this converter.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="sourceType">A <see cref="T:System.Type"/> that represents the type from which to convert.</param>
            <returns>True if the conversion can be performed; false otherwise.</returns>
        </member>
        <member name="M:C1.Framework.CornersConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type, using the specified context. 
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="destinationType">A <see cref="T:System.Type"/> that represents the type to convert to.</param>
            <returns>True if the conversion can be performed; false otherwise.</returns>
        </member>
        <member name="M:C1.Framework.CornersConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given value to the type of this converter. 
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <returns>An <see cref="T:System.Object"/> that represents the converted value. </returns>
        </member>
        <member name="M:C1.Framework.CornersConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> into which <paramref name="value"/> will be converted.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"/> to convert the <paramref name="value"/> to.</param>
            <returns>An <see cref="T:System.Object"/> that represents the converted value. </returns>
        </member>
        <member name="M:C1.Framework.CornersConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <summary>
            Creates a <see cref="T:C1.Framework.Corners"/> object given a set of property values for the object. 
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="propertyValues">A contains a series of name-value pairs with the new property values.</param>
            <returns>The newly created object, or null if the object could not be created.</returns>
        </member>
        <member name="M:C1.Framework.CornersConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns whether changing a value on this object requires a call to 
            the <see cref="M:C1.Framework.CornersConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)"/> method to create a new value.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <returns>True if the <see cref="M:C1.Framework.CornersConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)"/> method should be called when a change is made to one or more properties of this object.</returns>
        </member>
        <member name="M:C1.Framework.CornersConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            Returns a collection of properties for the type of array specified by the value parameter.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="value">An <see cref="T:System.Object"/> that specifies the type of array for which to get properties.</param>
            <param name="attributes">An array of type <see cref="T:System.Attribute"/> that is used as a filter.</param>
            <returns>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/> with the properties that are exposed for this data type.</returns>
        </member>
        <member name="M:C1.Framework.CornersConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns whether this object supports properties.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <returns>Always returns true.</returns>
        </member>
        <member name="T:C1.Framework.Alignment">
            <summary>
            Specifies the text alignment.
            </summary>
        </member>
        <member name="F:C1.Framework.Alignment.NotSet">
            <summary>
            Default value.
            </summary>
        </member>
        <member name="F:C1.Framework.Alignment.Near">
            <summary>
            Near.
            </summary>
        </member>
        <member name="F:C1.Framework.Alignment.Far">
            <summary>
            Far.
            </summary>
        </member>
        <member name="F:C1.Framework.Alignment.Center">
            <summary>
            Center.
            </summary>
        </member>
        <member name="F:C1.Framework.Alignment.Spread">
            <summary>
            Spread.
            </summary>
        </member>
        <member name="T:C1.Framework.ImageAlignment">
            <summary>
            Specifies the image alignment.
            </summary>
        </member>
        <member name="F:C1.Framework.ImageAlignment.LeftTop">
            <summary>
            Image is vertically aligned at the top, 
            and horizontally aligned on the left. 
            </summary>
        </member>
        <member name="F:C1.Framework.ImageAlignment.CenterTop">
            <summary>
            Image is vertically aligned at the top, 
            and horizontally aligned at the center.
            </summary>
        </member>
        <member name="F:C1.Framework.ImageAlignment.RightTop">
            <summary>
            Image is vertically aligned at the top, 
            and horizontally aligned on the right. 
            </summary>
        </member>
        <member name="F:C1.Framework.ImageAlignment.LeftCenter">
            <summary>
            Image is vertically aligned in the middle, 
            and horizontally aligned on the left. 
            </summary>
        </member>
        <member name="F:C1.Framework.ImageAlignment.CenterCenter">
            <summary>
            Image is vertically aligned in the middle, 
            and horizontally aligned at the center. 
            </summary>
        </member>
        <member name="F:C1.Framework.ImageAlignment.RightCenter">
            <summary>
            Image is vertically aligned in the middle, 
            and horizontally aligned on the right. 
            </summary>
        </member>
        <member name="F:C1.Framework.ImageAlignment.LeftBottom">
            <summary>
            Image is vertically aligned at the bottom, 
            and horizontally aligned on the left. 		
            </summary>
        </member>
        <member name="F:C1.Framework.ImageAlignment.CenterBottom">
            <summary>
            Image is vertically aligned at the bottom, 
            and horizontally aligned at the center.
            </summary>
        </member>
        <member name="F:C1.Framework.ImageAlignment.RightBottom">
            <summary>
            Image is vertically aligned at the bottom, 
            and horizontally aligned on the right. 
            </summary>
        </member>
        <member name="T:C1.Framework.ImageScaling">
            <summary>
            Specifies the image scaling.
            </summary>
        </member>
        <member name="F:C1.Framework.ImageScaling.Clip">
            <summary>
            Use the image's original size, clipping it to the display area if necessary.
            </summary>
        </member>
        <member name="F:C1.Framework.ImageScaling.Stretch">
            <summary>
            Stretch the image to fill the display area. 
            This mode will usually change the image's aspect ratio.
            </summary>
        </member>
        <member name="F:C1.Framework.ImageScaling.Scale">
            <summary>
            Scale the image to fit the display area. 
            This mode may increase or reduce the size of the image 
            while maintaining its aspect ratio.
            </summary>
        </member>
        <member name="F:C1.Framework.ImageScaling.Tile">
            <summary>
            Tile the image to fill the display area.
            </summary>
        </member>
        <member name="F:C1.Framework.ImageScaling.TileStretch">
            <summary>
            Tile the image into the 3x3 matrix and stretch it to fill the display area.
            </summary>
        </member>
        <member name="F:C1.Framework.ImageScaling.TileStretchHorizontal">
            <summary>
            Tile the image into the row of 3 images and stretch it to fill the display area.
            </summary>
        </member>
        <member name="F:C1.Framework.ImageScaling.TileStretchVertical">
            <summary>
            Tile the image into the column of 3 images and stretch it to fill the display area.
            </summary>
        </member>
        <member name="F:C1.Framework.ImageScaling.Hide">
            <summary>
            Hide the image.
            </summary>
        </member>
        <member name="T:C1.Framework.GradientMode">
            <summary>
            Specifies the background gradient mode.
            </summary>
        </member>
        <member name="F:C1.Framework.GradientMode.None">
            <summary>
            No gradient.
            </summary>
        </member>
        <member name="F:C1.Framework.GradientMode.Horizontal">
            <summary>
            Horizontal gradient (left to right).
            </summary>
        </member>
        <member name="F:C1.Framework.GradientMode.Vertical">
            <summary>
            Vertical gradient (top to bottom).
            </summary>
        </member>
        <member name="F:C1.Framework.GradientMode.DiagonalDown">
            <summary>
            Diagonal gradient (left-top to right-bottom).
            </summary>
        </member>
        <member name="F:C1.Framework.GradientMode.DiagonalUp">
            <summary>
            Diagonal gradient (left-bottom to right-top).
            </summary>
        </member>
        <member name="F:C1.Framework.GradientMode.Radial">
            <summary>
            Radial gradient.
            </summary>
        </member>
        <member name="T:C1.Framework.TextDirection">
            <summary>
            Specifies the text direction (horizontal or vertical).
            </summary>
        </member>
        <member name="F:C1.Framework.TextDirection.Normal">
            <summary>
            Text is drawn in the horizontal direction, left to right.
            </summary>
        </member>
        <member name="F:C1.Framework.TextDirection.Up">
            <summary>
            Text is draw vertically, from the bottom up.
            </summary>
        </member>
        <member name="F:C1.Framework.TextDirection.Down">
            <summary>
            Text is draw vertically, from the top down.
            </summary>
        </member>
        <member name="T:C1.Framework.StyleFlags">
            <summary>
            Specifies flags for the style.
            </summary>
        </member>
        <member name="F:C1.Framework.StyleFlags.None">
            <summary>
            No special flags.
            </summary>
        </member>
        <member name="F:C1.Framework.StyleFlags.PageBreakBefore">
            <summary>
            Add a page break before this element.
            </summary>
        </member>
        <member name="F:C1.Framework.StyleFlags.PageBreakAfter">
            <summary>
            Add a page break after this element.
            </summary>
        </member>
        <member name="T:C1.Framework.TextDecoration">
            <summary>
            Enables or disables the text font decorations, such as Underline or Strikeout.
            </summary>
        </member>
        <member name="F:C1.Framework.TextDecoration.Default">
            <summary>
            No changes to font style.
            </summary>
        </member>
        <member name="F:C1.Framework.TextDecoration.Strikeout">
            <summary>
            Enables the Strikeout effect.
            </summary>
        </member>
        <member name="F:C1.Framework.TextDecoration.NoStrikeout">
            <summary>
            Disables the Strikeout effect.
            </summary>
        </member>
        <member name="F:C1.Framework.TextDecoration.Underline">
            <summary>
            Enables the Underline effect.
            </summary>
        </member>
        <member name="F:C1.Framework.TextDecoration.NoUnderline">
            <summary>
            Disables the Underline effect.
            </summary>
        </member>
        <member name="T:C1.Framework.DynamicStyle">
            <summary>
            Provides data for a dynamic style.
            </summary>
        </member>
        <member name="F:C1.Framework.DynamicStyle.Empty">
            <summary>
            The default empty dynamic style.
            </summary>
        </member>
        <member name="M:C1.Framework.DynamicStyle.#ctor(C1.Framework.Style)">
            <summary>
            Initializes a new <see cref="T:C1.Framework.DynamicStyle"/> object.
            </summary>
            <param name="style">The parent style object.</param>
        </member>
        <member name="P:C1.Framework.DynamicStyle.Name">
            <summary>
            Gets the name of the style.
            </summary>
        </member>
        <member name="P:C1.Framework.DynamicStyle.Owner">
            <summary>
            Gets the style owner object, such as XStyleSet.
            </summary>
        </member>
        <member name="P:C1.Framework.DynamicStyle.RightToLeft">
            <summary>
            Gets a value indicating whether the right-to-left mode is on.
            </summary>
        </member>
        <member name="P:C1.Framework.DynamicStyle.TextDecoration">
            <summary>
            Gets or sets whether the Underline or Strikeout effects should be used or not used when drawing the text.
            </summary>
        </member>
        <member name="P:C1.Framework.DynamicStyle.ForeColor">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Color"/> used to draw the text.
            </summary>
        </member>
        <member name="P:C1.Framework.DynamicStyle.BackBrushProvider">
            <summary>
            Gets or sets the brush provider used to render the element background.
            </summary>
        </member>
        <member name="P:C1.Framework.DynamicStyle.BorderBrush">
            <summary>
            Gets or sets the brush used to paint the borders around the element.
            </summary>
        </member>
        <member name="P:C1.Framework.DynamicStyle.BorderLeft">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Brush"/> used to paint the left edge of the border.
            </summary>
        </member>
        <member name="P:C1.Framework.DynamicStyle.BorderTop">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Brush"/> used to paint the top edge of the border.
            </summary>
        </member>
        <member name="P:C1.Framework.DynamicStyle.BorderRight">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Brush"/> used to paint the right edge of the border.
            </summary>
        </member>
        <member name="P:C1.Framework.DynamicStyle.BorderBottom">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Brush"/> used to paint the bottom edge of the border.
            </summary>
        </member>
        <member name="P:C1.Framework.DynamicStyle.Border">
            <summary>
            Gets or sets the thickness of the border around the element.
            </summary>
        </member>
        <member name="P:C1.Framework.DynamicStyle.BackImage">
            <summary>
            Gets or sets the background image for the element.
            </summary>
        </member>
        <member name="T:C1.Framework.Style">
            <summary>
            <para>The <see cref="T:C1.Framework.Style"/> class contains display attributes that 
            determine the appearance of content on the screen/printer. 
            It includes most elements found in Css styles.</para>
            <para>The <see cref="T:C1.Framework.Style"/> class also contains methods for rendering 
            and measuring content (strings and images) based on the style settings 
            (fonts, margins, etc).</para>
            <para>The <see cref="T:C1.Framework.Style"/> objects are not hierarchical in the sense 
            that they don't have parent styles and don't inherit attributes 
            from the parent style. To create a new style based on an existing one, 
            you would clone the original style, then apply whatever attributes 
            you want to the new style.</para>
            <para>The <see cref="T:C1.Framework.Style"/> objects are hierarchical in the sense that 
            two style attributes (<see cref="P:C1.Framework.Style.Font"/> and <see cref="P:C1.Framework.Style.ForeBrush"/>) don't 
            need to be set. If these attributes are not set, they are inherited, 
            but not from a parent <see cref="T:C1.Framework.Style"/> object. Rather, these attributes 
            are inherited from the parent UI object.</para>
            <para>This type of inheritance make it easy to define a font on 
            a <see cref="T:C1.Framework.Style"/> associated with a parent UI object and have that 
            font be automatically applied to all UI objects contained in the parent. 
            By contrast, a <see cref="P:C1.Framework.Style.BackBrush"/> attribute is not explicitly inherited. 
            Instead, the parent UI object paints its client area with a brush, 
            and child UI objects have a transparent background by default,
            so the parent background shows through by default. Other attributes such
            as alignment, margins, padding, etc are also not inherited.</para>
            </summary>
        </member>
        <member name="F:C1.Framework.Style.SHADOW_SIZE">
            <summary>
            The size of shadow.
            </summary>
        </member>
        <member name="M:C1.Framework.Style.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Framework.Style"/>.
            </summary>
        </member>
        <member name="M:C1.Framework.Style.#ctor(System.String)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Framework.Style"/>.
            </summary>
            <param name="name">The name of the new <see cref="T:C1.Framework.Style"/> object.</param>
        </member>
        <member name="M:C1.Framework.Style.#ctor(System.Object)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Framework.Style"/>.
            </summary>
            <param name="owner">The owner object for the new <see cref="T:C1.Framework.Style"/>.</param>
        </member>
        <member name="M:C1.Framework.Style.Freeze(C1.Framework.DynamicStyle)">
            <summary>
            Forces the dynamic style to freeze.
            </summary>
        </member>
        <member name="M:C1.Framework.Style.Inflate(System.Drawing.Rectangle)">
            <summary>
            Inflates the specified <see cref="T:System.Drawing.Rectangle"/> by the values of
            the current <see cref="T:C1.Framework.Style"/> margins, padding and border.
            </summary>
            <param name="r">A <see cref="T:System.Drawing.Rectangle"/> to inflate.</param>
            <returns>The resulting <see cref="T:System.Drawing.Rectangle"/>.</returns>
        </member>
        <member name="M:C1.Framework.Style.Inflate(System.Drawing.Size)">
            <summary>
            Inflates the specified <see cref="T:System.Drawing.Size"/> by the values of
            the current <see cref="T:C1.Framework.Style"/> margins, padding and border.
            </summary>
            <param name="size">A <see cref="T:System.Drawing.Size"/> to inflate.</param>
            <returns>The resulting <see cref="T:System.Drawing.Size"/>.</returns>
        </member>
        <member name="M:C1.Framework.Style.Inflate(System.Int32,System.Int32)">
            <summary>
            Inflates the specified width and height by the values of
            the current <see cref="T:C1.Framework.Style"/> margins, padding and border.
            </summary>
            <param name="width">A width to inflate.</param>
            <param name="height">A height to inflate.</param>
            <returns>The resulting <see cref="T:System.Drawing.Size"/>.</returns>
        </member>
        <member name="M:C1.Framework.Style.InflateWidth(System.Int32)">
            <summary>
            Inflates the specified width by the values of the current <see cref="T:C1.Framework.Style"/> margins, padding and border.
            </summary>
            <param name="width">A width to inflate.</param>
            <returns>The resulting width.</returns>
        </member>
        <member name="M:C1.Framework.Style.InflateHeight(System.Int32)">
            <summary>
            Inflates the specified height by the values of the current <see cref="T:C1.Framework.Style"/> margins, padding and border.
            </summary>
            <param name="height">A height to inflate.</param>
            <returns>The resulting height.</returns>
        </member>
        <member name="M:C1.Framework.Style.Deflate(System.Drawing.Rectangle)">
            <summary>
            Deflates the specified <see cref="T:System.Drawing.Rectangle"/> by the values of
            the current <see cref="T:C1.Framework.Style"/> margins, padding and border.
            </summary>
            <param name="r">A <see cref="T:System.Drawing.Rectangle"/> to deflate.</param>
            <returns>The resulting <see cref="T:System.Drawing.Rectangle"/>.</returns>
        </member>
        <member name="M:C1.Framework.Style.Deflate(System.Drawing.Size)">
            <summary>
            Deflates the specified <see cref="T:System.Drawing.Size"/> by the values of
            the current <see cref="T:C1.Framework.Style"/> margins, padding and border.
            </summary>
            <param name="size">A <see cref="T:System.Drawing.Size"/> to deflate.</param>
            <returns>The resulting <see cref="T:System.Drawing.Size"/>.</returns>
        </member>
        <member name="M:C1.Framework.Style.Deflate(System.Int32,System.Int32)">
            <summary>
            Deflates the specified width and height by the values of
            the current <see cref="T:C1.Framework.Style"/> margins, padding and border.
            </summary>
            <param name="width">A width to deflate.</param>
            <param name="height">A height to deflate.</param>
            <returns>The resulting <see cref="T:System.Drawing.Size"/>.</returns>
        </member>
        <member name="M:C1.Framework.Style.DeflateWidth(System.Int32)">
            <summary>
            Deflates the specified width by the values of the current <see cref="T:C1.Framework.Style"/> margins, padding and border.
            </summary>
            <param name="width">A width to deflate.</param>
            <returns>The resulting width.</returns>
        </member>
        <member name="M:C1.Framework.Style.DeflateHeight(System.Int32)">
            <summary>
            Deflates the specified height by the values of the current <see cref="T:C1.Framework.Style"/> margins, padding and border.
            </summary>
            <param name="height">A height to deflate.</param>
            <returns>The resulting height.</returns>
        </member>
        <member name="M:C1.Framework.Style.Clone">
            <summary>
            Creates an instance of the <see cref="T:C1.Framework.Style"/> class that is identical 
            to the current <see cref="T:C1.Framework.Style"/> (except for the <see cref="P:C1.Framework.Style.Locked"/> property,
            which is always false for clones).
            </summary>
            <returns>The copy of the current <see cref="T:C1.Framework.Style"/>.</returns>
        </member>
        <member name="M:C1.Framework.Style.Copy(C1.Framework.Style)">
            <summary>
            Copies all attributes from another <see cref="T:C1.Framework.Style"/> object.
            </summary>
            <param name="source"><see cref="T:C1.Framework.Style"/> object that contains the attributes to copy.</param>
            <remarks>
            The difference between this method and <see cref="M:C1.Framework.Style.Clone"/> is that <b>Clone</b> returns a new
            object, while <b>Copy</b> modifies the attributes in an existing style.
            </remarks>
        </member>
        <member name="M:C1.Framework.Style.Merge(C1.Framework.Style)">
            <summary>
            Copies attributes set to non-default values from another <see cref="T:C1.Framework.Style"/> object.
            </summary>
            <param name="source"><see cref="T:C1.Framework.Style"/> object that contains the attributes to copy.</param>
            <remarks>
            The difference between <see cref="M:C1.Framework.Style.Copy(C1.Framework.Style)"/> and <b>Merge</b> is that <b>Merge</b> will not copy
            attributes that are set to their default values in the <paramref name="source"/> <see cref="T:C1.Framework.Style"/>.
            </remarks>
        </member>
        <member name="M:C1.Framework.Style.FormatValue(System.Object)">
            <summary>
            Converts value to string according to <see cref="P:C1.Framework.Style.Format"/> property value.
            </summary>
            <param name="value">A value to convert.</param>
            <returns>The string value of the current instance.</returns>
        </member>
        <member name="M:C1.Framework.Style.OnStyleChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:C1.Framework.Style.StyleChanged"/> event.
            </summary>
            <param name="e"><see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.Style.HasShadow">
            <summary>
            Gets whether this style or any of its sub-styles has a shadow.
            </summary>
            <returns>True if style or its sub-styles have shadow; False otherwise.</returns>
        </member>
        <member name="M:C1.Framework.Style.ColorFromBrush(System.Drawing.Brush)">
            <summary>
            Returns <see cref="P:System.Drawing.SolidBrush.Color"/> if specified brush is a <see cref="T:System.Drawing.SolidBrush"/> or <see cref="P:System.Drawing.Color.Transparent"/> otherwise.
            </summary>
            <param name="brush"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Framework.Style.BrushFromColor(System.Drawing.Color)">
            <summary>
            Returns new <see cref="T:System.Drawing.SolidBrush"/> if specified color is not <see cref="P:System.Drawing.Color.Transparent"/> or null otherwise.
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="P:C1.Framework.Style.Name">
            <summary>
            Gets or sets the style name.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.Locked">
            <summary>
            Gets or sets whether the style is locked and cannot be modified.
            </summary>
            <remarks>
            This property is useful when you want to prevent code from accidentally 
            modifying 'stock' styles.
            </remarks>
        </member>
        <member name="P:C1.Framework.Style.Font">
            <summary>
            Gets or sets the font used to paint text within the element.
            </summary>
            <remarks>
            If this property is set to null, the text will be painted using the font
            specified by the parent element's font.
            </remarks>
        </member>
        <member name="P:C1.Framework.Style.FontDescent">
            <summary>
            Gets the part of the font below the baseline.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.BackBrush">
            <summary>
            Gets or sets the brush used to render the element background.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.BackImage">
            <summary>
            Gets or sets the background image for the element.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.BackImageAlignment">
            <summary>
            Gets or sets the alignment used to render the background image.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.BackImageScaling">
            <summary>
            Gets or sets the scaling used to render the background image.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.ForeBrush">
            <summary>
            Gets or sets the brush used to paint the text within the element.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.BorderBrush">
            <summary>
            Gets or sets the brush used to paint the borders around the element.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.Padding">
            <summary>
            Gets or sets the thickness of the padding between the element edges and its content.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.PaddingRtl">
            <summary>
            Returns padding which honors current RightToLeft settings.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.Border">
            <summary>
            Gets or sets the thickness of the border around the element.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.BorderRtl">
            <summary>
            Returns padding which honors current RightToLeft settings.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.BorderColor">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Color"/> used to draw the border around the element.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.BorderEdges">
            <summary>
            Gets <see cref="P:C1.Framework.Style.BorderEdges"/> object that defines the colors used to paint each edge of the borders.
            </summary>
            <remarks>
            <para>Normally, this property is empty, and the border is drawn using the color specified by the <see cref="P:C1.Framework.Style.BorderColor"/>
            property.</para>
            <para>If any of the members of this property are set to non-transparent colors, then the specified color
            is used to paint the specific border.</para>
            <para>This property is only applicable if the <see cref="P:C1.Framework.Style.Corners"/> are set to zero.</para>
            </remarks>
        </member>
        <member name="P:C1.Framework.Style.Corners">
            <summary>
            Gets or sets the radii of the element corners.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.Margins">
            <summary>
            Gets or sets the thickness of the margins around the element.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.MarginsRtl">
            <summary>
            Returns margins which honor current RightToLeft settings.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.Clip">
            <summary>
            Gets or sets whether text content should be clipped to the element area.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.FontPadding">
            <summary>
            Gets or sets whether text bounding rectangle should include padding.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.HorizontalAlignment">
            <summary>
            Gets or sets how elements should be aligned in the horizontal direction.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.VerticalAlignment">
            <summary>
            Gets or sets how elements should be aligned in the vertical direction.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.ImageAlignment">
            <summary>
            Gets or sets how images should be aligned within the element.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.ImageScaling">
            <summary>
            Gets or sets how images should be scaled within the element.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.WordWrap">
            <summary>
            Gets or sets whether text should be allowed to wrap within the element.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.Trimming">
            <summary>
            Gets or sets how to trim characters that do not fit in the space available.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.Format">
            <summary>
            Gets or sets the format string used to convert the element value into a string.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.Indent">
            <summary>
            Gets or sets the indentation for the first text element.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.ChildSpacing">
            <summary>
            Gets or sets the amount of space between child elements.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.Width">
            <summary>
            Gets or sets the style width (set to -1 to use the default width).
            </summary>
        </member>
        <member name="P:C1.Framework.Style.Height">
            <summary>
            Gets or sets the style height (set to -1 to use the default height).
            </summary>
        </member>
        <member name="P:C1.Framework.Style.Cursor">
            <summary>
            Gets or sets the cursor that should be displayed when the mouse is over elements with this style.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.HotkeyPrefix">
            <summary>
            Gets or sets the <see cref="P:C1.Framework.Style.HotkeyPrefix"/> value determining how to display hot keys. 
            </summary>
        </member>
        <member name="P:C1.Framework.Style.TextDirection">
            <summary>
            Gets or sets the direction in which text is rendered.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.RightToLeft">
            <summary>
            Gets or sets whether text should be rendered from right to left, such as in Arabic or Hebrew.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.EnforceRtl">
            <summary>
            Gets or sets a value indicating if the value of Style.RightToLeft property must be applied to Element.
            </summary>
            <remarks>This property can be set when reading css styles from dir attribute.</remarks>
        </member>
        <member name="P:C1.Framework.Style.Hot">
            <summary>
            Gets or sets the style to be used when the element is hot.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.Pressed">
            <summary>
            Gets or sets the style to be used when the element is pressed.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.HotPressed">
            <summary>
            Gets or sets the style to be used when the element is hot and pressed.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.Disabled">
            <summary>
            Gets or sets the style to be used when the element is disabled.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.Shadow">
            <summary>
            Gets or sets whether the style includes a shadow.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.DefaultStyle">
            <summary>
            Gets a reference to the default style.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.ForeColor">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Color"/> used to paint the text.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.BackColor">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Color"/> used to paint the background.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.GradientMode">
            <summary>
            Gets or sets the <see cref="P:C1.Framework.Style.GradientMode"/> used to paint the background.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.GradientBlend">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Drawing2D.Blend"/> used to paint the background gradient.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.GradientInterpolationColors">
            <summary>
            Gets or sets a <see cref="T:System.Drawing.Drawing2D.ColorBlend"/> that defines a multicolor gradient.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.GradientCenter">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.PointF"/> that represents the center of a radial gradient background in percentage units.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.BackColor2">
            <summary>
            Gets or sets the secondary color used to build the background gradient.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.GammaCorrection">
            <summary>
            Gets or sets whether to apply gamma correction to the background gradient.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.Flags">
            <summary>
            Gets or sets the style flags.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.SFormatFlags">
            <summary>
            Gets or sets string rendering options (DrawString).
            </summary>
        </member>
        <member name="P:C1.Framework.Style.TFormatFlags">
            <summary>
            Gets or sets string rendering options (TextRenderer).
            </summary>
        </member>
        <member name="P:C1.Framework.Style.FrozenDS">
            <summary>
            "Frozen" dynamic style.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.Owner">
            <summary>
            Gets the owner object, such an XStyleSet.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.BackImageAllowFlip">
            <summary>
            Gets or sets whether the background image can be flipped for RTL mode.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.ImageAllowFlip">
            <summary>
            Gets or sets whether the image should be flipped horizontally for RTL mode.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.BackImagePadding">
            <summary>
            Gets or sets the thickness of the padding between the element edges and its content.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.BackImagePaddingRtl">
            <summary>
            Returns back image padding which honors current RightToLeft settings.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.Ellipse">
            <summary>
            Gets or sets whether the element border is an ellipse (for the dynamic styles only).
            </summary>
        </member>
        <member name="E:C1.Framework.Style.StyleChanged">
            <summary>
            Fires when any elements of the <see cref="T:C1.Framework.Style"/> change.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.BackBrushProvider">
            <summary>
            Gets or sets the brush provider used to render the element background.
            </summary>
        </member>
        <member name="T:C1.Framework.Theme">
            <summary>
            Class that contains a keyed collection of <see cref="T:C1.Framework.Style"/> objects and methods 
            to serialize the styles into Xml files and streams.
            </summary>
            <remarks>
            <para>The Theme class is a named/keyed collection of <see cref="T:C1.Framework.Style"/> objects.</para>
            <para>The class is designed to be used as a base class for components that need
            to add custom elements to themes in addition to a style collection.</para>
            <para>Inheritors should override the following methods:</para>
            <code>
            // specify the name of the component that will use this theme
            protected virtual string ComponentType
            
            // save component-specific elements to xml
            protected virtual void WriteCustomData(XmlWriter writer)
            
            // load component-specific elements from xml
            protected virtual void ReadCustomData(XmlNode node)
            </code>
            </remarks>
        </member>
        <member name="M:C1.Framework.Theme.#ctor(System.String)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Framework.Theme"/>.
            </summary>
            <param name="name">Name of the new theme.</param>
        </member>
        <member name="M:C1.Framework.Theme.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Framework.Theme"/>.
            </summary>
        </member>
        <member name="M:C1.Framework.Theme.SaveThemes(C1.Framework.Theme[],System.String)">
            <summary>
            Saves a collection of themes into an Xml file.
            </summary>
            <param name="themes">Array containing <see cref="T:C1.Framework.Theme"/> objects.</param>
            <param name="fileName">Name of the Xml file where the themes will be saved.</param>
            <remarks>
            Use the <see cref="M:C1.Framework.Theme.LoadThemes(System.String)"/> method to load the saved themes.
            </remarks>
        </member>
        <member name="M:C1.Framework.Theme.LoadThemes(System.String)">
            <summary>
            Loads a collection of themes from an Xml file.
            </summary>
            <param name="fileName">Name of the Xml file that contains the themes.</param>
            <returns>An array containing the themes loaded from the file.</returns>
            <remarks>
            Use this method to load themes saved with the <see cref="M:C1.Framework.Theme.SaveThemes(C1.Framework.Theme[],System.String)"/> method.
            </remarks>
        </member>
        <member name="M:C1.Framework.Theme.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Writes this <see cref="T:C1.Framework.Theme"/> into an <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <param name="writer"><see cref="T:System.Xml.XmlWriter"/> that will receive the theme definition.</param>
        </member>
        <member name="M:C1.Framework.Theme.ReadXml(System.Xml.XmlReader)">
            <summary>
            Reads this <see cref="T:C1.Framework.Theme"/> from an <see cref="T:System.Xml.XmlReader"/>.
            </summary>
            <param name="reader"><see cref="T:System.Xml.XmlReader"/> that contains the theme definition.</param>
        </member>
        <member name="M:C1.Framework.Theme.WriteXml(System.String)">
            <summary>
            Writes this <see cref="T:C1.Framework.Theme"/> into an Xml file.
            </summary>
            <param name="fileName">Name of the file where the theme will be saved.</param>
        </member>
        <member name="M:C1.Framework.Theme.WriteXml(System.IO.Stream)">
            <summary>
            Writes this <see cref="T:C1.Framework.Theme"/> into an Xml <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream"><see cref="T:System.IO.Stream"/> where the theme will be saved.</param>
        </member>
        <member name="M:C1.Framework.Theme.ReadXml(System.String)">
            <summary>
            Reads this <see cref="T:C1.Framework.Theme"/> from an Xml file.
            </summary>
            <param name="fileName">File that contains the theme data.</param>
        </member>
        <member name="M:C1.Framework.Theme.ReadXml(System.IO.Stream)">
            <summary>
            Reads this <see cref="T:C1.Framework.Theme"/> from an Xml <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream"><see cref="T:System.IO.Stream"/> that contains the theme data in Xml format.</param>
        </member>
        <member name="M:C1.Framework.Theme.ReadXml(System.Xml.XmlNode)">
            <summary>
            Reads this <see cref="T:C1.Framework.Theme"/> from an <see cref="T:System.Xml.XmlNode"/>.
            </summary>
            <param name="node"><see cref="T:System.Xml.XmlNode"/> that contains the theme data.</param>
        </member>
        <member name="M:C1.Framework.Theme.ReadXmlString(System.String)">
            <summary>
            Reads this <see cref="T:C1.Framework.Theme"/> from an Xml string.
            </summary>
            <param name="xmlString">String that contains the theme data in Xml format.</param>
        </member>
        <member name="M:C1.Framework.Theme.WriteCustomData(System.Xml.XmlWriter)">
            <summary>
            Writes component-specific data into the theme.
            </summary>
            <param name="writer"><see cref="T:System.Xml.XmlWriter"/> where custom theme data is saved.</param>
            <remarks>
            Derived classes should override this method to save any custom data their themes may need 
            (anything other than the <see cref="T:C1.Framework.Style"/> collection).
            </remarks>
        </member>
        <member name="M:C1.Framework.Theme.ReadCustomData(System.Xml.XmlNode)">
            <summary>
            Reads component-specific theme data.
            </summary>
            <param name="node"><see cref="T:System.Xml.XmlNode"/> that contains the theme data.</param>
            <remarks>
            Derived classes should override this method to read any custom data their themes may need 
            (anything other than the <see cref="T:C1.Framework.Style"/> collection).
            </remarks>
        </member>
        <member name="M:C1.Framework.Theme.SaveImage(System.Xml.XmlWriter,System.String,System.Drawing.Image)">
            <summary>
            Saves an image into the Xml output stream.
            </summary>
            <param name="writer"><see cref="T:System.Xml.XmlWriter"/> that contains the theme definition.</param>
            <param name="propertyName">Name of the node where the image will be stored.</param>
            <param name="image"><see cref="T:System.Drawing.Image"/> that will be saved in the stream.</param>
            <remarks>
            <para>The default implementation keeps a list of the images that have been saved. If any
            images are saved more than once, only the index is stored for the repeated instances.</para>
            <para>For example:</para>
            <code>
            SaveImage(writer, "MyImageProperty", img);
            SaveImage(writer, "MyImagePropertyAgain", img);
            SaveImage(writer, "MyImagePropertyAndAgain", img);
            
            [MyImageProperty]base64data[/MyImageProperty]
            [MyImagePropertyAgain index="0"/]
            [MyImagePropertyAndAgain index="0"/]
            </code>
            </remarks>
        </member>
        <member name="M:C1.Framework.Theme.LoadImage(System.Xml.XmlNode)">
            <summary>
            Loads an image from the Xml stream.
            </summary>
            <param name="node"><see cref="T:System.Xml.XmlNode"/> that contains the image information.</param>
            <returns>An <see cref="T:System.Drawing.Image"/> object.</returns>
            <remarks>
            <para>The first instance of each image is stored as node data (base 64-encoded). When this
            instance is loaded for the first time, the image is stored in an internal image list.</para>
            <para>Subsequent instances of the same image are not stored in the node as binary data;
            an "index" attribute is used instead that specifies the index of the image in the
            internal image collection.</para>
            </remarks>
        </member>
        <member name="M:C1.Framework.Theme.GetKeyForItem(C1.Framework.Style)">
            <summary>
            Styles are indexed by style name.
            </summary>
            <param name="style">Collection member.</param>
            <returns>Style name (must be unique within collection).</returns>
        </member>
        <member name="M:C1.Framework.Theme.WriteStyle(System.Xml.XmlWriter,C1.Framework.Style,System.Collections.Generic.List{System.Drawing.Image},C1.Framework.Style)">
            <summary>
            Saves a <see cref="T:C1.Framework.Style"/> into an <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <param name="writer"><see cref="T:System.Xml.XmlWriter"/> that will receive the style data.</param>
            <param name="style"><see cref="T:C1.Framework.Style"/> that will be saved.</param>
            <param name="images">List of images whose indices will be saved.</param>
            <param name="parentStyle">Base <see cref="T:C1.Framework.Style"/> that 'owns' the style being saved.</param>
            <remarks>
            <para>To save space, the following rules apply:</para>
            <para>Properties of the main style are saved only if they are set to values different from the default.</para>
            <para>Properties of substyles (hot, pressed, etc) are saved only if they are different from the main style.</para>
            <para>Images are saved in a separate list, and only references are saved in the styles.</para>
            </remarks>
        </member>
        <member name="M:C1.Framework.Theme.ReadStyle(System.Xml.XmlNode,System.Collections.Generic.List{System.Drawing.Image},C1.Framework.Style)">
            <summary>
            Loads a <see cref="T:C1.Framework.Style"/> from an <see cref="T:System.Xml.XmlNode"/>.
            </summary>
            <param name="node"><see cref="T:System.Xml.XmlNode"/> that contains the style data.</param>
            <param name="images">List of images whose indices were saved.</param>
            <param name="parentStyle">Base <see cref="T:C1.Framework.Style"/> that 'owns' the style being loaded.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Framework.Theme.SaveBinaryObject(System.Xml.XmlWriter,System.Object)">
            <summary>
            Saves a binary object into  the specified <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <param name="writer"><see cref="T:System.Xml.XmlWriter"/> that will receive the object data.</param>
            <param name="obj">An object to write.</param>
        </member>
        <member name="M:C1.Framework.Theme.LoadBinaryObject(System.Xml.XmlNode)">
            <summary>
            Loads a binary object from the specified <see cref="T:System.Xml.XmlNode"/>.
            </summary>
            <param name="node">A <see cref="T:System.Xml.XmlNode"/> which contains the object data.</param>
            <returns>The binary object.</returns>
        </member>
        <member name="P:C1.Framework.Theme.Name">
            <summary>
            Gets or sets the theme name (e.g. "RedMoon");
            </summary>
        </member>
        <member name="P:C1.Framework.Theme.ComponentType">
            <summary>
            Gets or sets the name of the component that owns the theme
            (e.g., "C1Schedule", "C1Calendar" or "C1Ribbon"). 
            </summary>
        </member>
        <member name="T:C1.Framework.Thickness">
            <summary>
            Represents padding, border or margin information associated with a 
            user interface (UI) element.
            </summary>
        </member>
        <member name="M:C1.Framework.Thickness.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Framework.Thickness"/>. 
            </summary>
            <param name="left">Thickness of the left edge, in pixels.</param>
            <param name="top">Thickness of the top edge, in pixels.</param>
            <param name="right">Thickness of the right edge, in pixels.</param>
            <param name="bottom">Thickness of the bottom edge, in pixels.</param>
        </member>
        <member name="M:C1.Framework.Thickness.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Framework.Thickness"/>.
            </summary>
            <param name="leftRight">Thickness of the left and right edges, in pixels.</param>
            <param name="topBottom">Thickness of the top and bottom edges, in pixels.</param>
        </member>
        <member name="M:C1.Framework.Thickness.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Framework.Thickness"/>.
            </summary>
            <param name="width">Thickness of all edges, in pixels.</param>
        </member>
        <member name="M:C1.Framework.Thickness.Inflate(System.Int32,System.Int32)">
            <summary>
            Inflates the current <see cref="T:C1.Framework.Thickness"/> by the specified values.
            </summary>
            <param name="width">The inflate size for vertical edges.</param>
            <param name="height">The inflate size for horizontal edges.</param>
            <returns>The new <see cref="T:C1.Framework.Thickness"/>.</returns>
        </member>
        <member name="M:C1.Framework.Thickness.Inflate(System.Int32)">
            <summary>
            Inflates the current <see cref="T:C1.Framework.Thickness"/> by the specified size.
            </summary>
            <param name="size">The size.</param>
            <returns>The new <see cref="T:C1.Framework.Thickness"/>.</returns>
        </member>
        <member name="M:C1.Framework.Thickness.Inflate(System.Drawing.Rectangle)">
            <summary>
            Inflates the specified <see cref="T:System.Drawing.Rectangle"/> by the current <see cref="T:C1.Framework.Thickness"/>.
            </summary>
            <param name="r">A <see cref="T:System.Drawing.Rectangle"/> to deflate.</param>
            <returns>The inflated <see cref="T:System.Drawing.Rectangle"/>.</returns>
        </member>
        <member name="M:C1.Framework.Thickness.InflateRtl(System.Drawing.Rectangle)">
            <summary>
            Inflates the specified <see cref="T:System.Drawing.Rectangle"/> by the current <see cref="T:C1.Framework.Thickness"/> with RightToLeft layout.
            </summary>
            <param name="r">A <see cref="T:System.Drawing.Rectangle"/> to deflate.</param>
            <returns>The inflated <see cref="T:System.Drawing.Rectangle"/>.</returns>
        </member>
        <member name="M:C1.Framework.Thickness.Deflate(System.Drawing.Rectangle)">
            <summary>
            Deflates the specified <see cref="T:System.Drawing.Rectangle"/> by the current <see cref="T:C1.Framework.Thickness"/>.
            </summary>
            <param name="r">A <see cref="T:System.Drawing.Rectangle"/> to deflate.</param>
            <returns>The deflated <see cref="T:System.Drawing.Rectangle"/>.</returns>
        </member>
        <member name="M:C1.Framework.Thickness.DeflateRtl(System.Drawing.Rectangle)">
            <summary>
            Deflates the specified <see cref="T:System.Drawing.Rectangle"/> by the current <see cref="T:C1.Framework.Thickness"/> with RightToLeft layout.
            </summary>
            <param name="r">A <see cref="T:System.Drawing.Rectangle"/> to deflate.</param>
            <returns>The deflated <see cref="T:System.Drawing.Rectangle"/>.</returns>
        </member>
        <member name="M:C1.Framework.Thickness.SwapLeftRight">
            <summary>
            Swaps the values of the Left and Right properties.
            </summary>
        </member>
        <member name="M:C1.Framework.Thickness.op_Implicit(System.Int32)~C1.Framework.Thickness">
            <summary>
            Converts an <see cref="T:System.Int32"/> into a <see cref="T:C1.Framework.Thickness"/>.
            </summary>
        </member>
        <member name="M:C1.Framework.Thickness.GetHashCode">
            <summary>
            Generates a hash code for the current <see cref="T:C1.Framework.Thickness"/>. 
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:C1.Framework.Thickness.Equals(System.Object)">
            <summary>
            Determines whether the value of the specified object is equivalent 
            to the current <see cref="T:C1.Framework.Thickness"/>. 
            </summary>
            <param name="obj">The object to compare to the current <see cref="T:C1.Framework.Thickness"/>.</param>
            <returns>true if the two <see cref="T:C1.Framework.Thickness"/> objects are equal; 
            otherwise, false. </returns>
        </member>
        <member name="M:C1.Framework.Thickness.op_Equality(C1.Framework.Thickness,C1.Framework.Thickness)">
            <summary>
            Tests whether two specified <see cref="T:C1.Framework.Thickness"/> objects are equivalent. 
            </summary>
            <param name="t1">A <see cref="T:C1.Framework.Thickness"/> to test.</param>
            <param name="t2">A <see cref="T:C1.Framework.Thickness"/> to test.</param>
            <returns>true if the two <see cref="T:C1.Framework.Thickness"/> objects are equal; 
            otherwise, false. </returns>
        </member>
        <member name="M:C1.Framework.Thickness.op_Inequality(C1.Framework.Thickness,C1.Framework.Thickness)">
            <summary>
            Tests whether two specified <see cref="T:C1.Framework.Thickness"/> objects are not equivalent. 
            </summary>
            <param name="t1">A <see cref="T:C1.Framework.Thickness"/> to test.</param>
            <param name="t2">A <see cref="T:C1.Framework.Thickness"/> to test.</param>
            <returns>True if the two <see cref="T:C1.Framework.Thickness"/> objects are different; 
            otherwise, false. </returns>
        </member>
        <member name="P:C1.Framework.Thickness.Empty">
            <summary>
            Provides a <see cref="T:C1.Framework.Thickness"/> object with no thickness.
            </summary>
        </member>
        <member name="P:C1.Framework.Thickness.Left">
            <summary>
            Gets or sets the thickness value for the left edge. 
            </summary>
        </member>
        <member name="P:C1.Framework.Thickness.Top">
            <summary>
            Gets or sets the thickness value for the top edge. 
            </summary>
        </member>
        <member name="P:C1.Framework.Thickness.Right">
            <summary>
            Gets or sets the thickness value for the right edge. 
            </summary>
        </member>
        <member name="P:C1.Framework.Thickness.Bottom">
            <summary>
            Gets or sets the thickness value for the bottom edge. 
            </summary>
        </member>
        <member name="P:C1.Framework.Thickness.IsEmpty">
            <summary>
            Returns true if the <see cref="T:C1.Framework.Thickness"/> object is empty. 
            </summary>
        </member>
        <member name="P:C1.Framework.Thickness.Height">
            <summary>
            Gets the combined thickness for the top and bottom edges. 
            </summary>
        </member>
        <member name="P:C1.Framework.Thickness.Width">
            <summary>
            Gets the combined thickness for the right and left edges. 
            </summary>
        </member>
        <member name="T:C1.Framework.ThicknessConverter">
            <summary>
            Provides a type converter to convert <see cref="T:C1.Framework.Thickness"/> values 
            to and from various other representations. 
            </summary>
        </member>
        <member name="M:C1.Framework.ThicknessConverter.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Framework.ThicknessConverter"/>.
            </summary>
        </member>
        <member name="M:C1.Framework.ThicknessConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of one type to the type of this converter.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="sourceType">A <see cref="T:System.Type"/> that represents the type from which to convert.</param>
            <returns>True if the conversion can be performed; false otherwise.</returns>
        </member>
        <member name="M:C1.Framework.ThicknessConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type, using the specified context. 
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="destinationType">A <see cref="T:System.Type"/> that represents the type to convert to.</param>
            <returns>True if the conversion can be performed; false otherwise.</returns>
        </member>
        <member name="M:C1.Framework.ThicknessConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given value to the type of this converter. 
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <returns>An <see cref="T:System.Object"/> that represents the converted value. </returns>
        </member>
        <member name="M:C1.Framework.ThicknessConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> into which <paramref name="value"/> will be converted.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"/> to convert the <paramref name="value"/> to.</param>
            <returns>An <see cref="T:System.Object"/> that represents the converted value. </returns>
        </member>
        <member name="M:C1.Framework.ThicknessConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <summary>
            Creates a <see cref="T:C1.Framework.Thickness"/> object given a set of property values for the object. 
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="propertyValues">A contains a series of name-value pairs with the new property values.</param>
            <returns>The newly created object, or null if the object could not be created.</returns>
        </member>
        <member name="M:C1.Framework.ThicknessConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns whether changing a value on this object requires a call to 
            the <see cref="M:C1.Framework.ThicknessConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)"/> method to create a new value.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <returns>True if the <see cref="M:C1.Framework.ThicknessConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)"/> method should be called when a change is made to one or more properties of this object.</returns>
        </member>
        <member name="M:C1.Framework.ThicknessConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            Returns a collection of properties for the type of array specified by the value parameter.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="value">An <see cref="T:System.Object"/> that specifies the type of array for which to get properties.</param>
            <param name="attributes">An array of type <see cref="T:System.Attribute"/> that is used as a filter.</param>
            <returns>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/> with the properties that are exposed for this data type.</returns>
        </member>
        <member name="M:C1.Framework.ThicknessConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns whether this object supports properties.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <returns>Always returns true.</returns>
        </member>
        <member name="T:C1.Framework.ResourceLoader">
            <summary>
            Class with static methods used for enumerating and retrieving application
            resources.
            </summary>
        </member>
        <member name="M:C1.Framework.ResourceLoader.GetImages">
            <summary>
            Returns all images from the entry assembly. 
            </summary>
            <returns>A collection of name/image pairs.</returns>
        </member>
        <member name="M:C1.Framework.ResourceLoader.GetImages(System.Reflection.Assembly)">
            <summary>
            Returns all images from the specified assembly. 
            </summary>
            <param name="a">An <see cref="T:System.Reflection.Assembly"/> to load images from.</param>
            <returns>A collection of name/image pairs.</returns>
        </member>
        <member name="M:C1.Framework.ResourceLoader.GetImage(System.String)">
            <summary>
            Loads an image from the entry assembly. 
            </summary>
            <param name="name">The case-insensitive name of the requested image.</param>
            <returns>The <see cref="T:System.Drawing.Image"/> if it is found; null otherwise.</returns>
        </member>
        <member name="M:C1.Framework.ResourceLoader.GetImage(System.Reflection.Assembly,System.String)">
            <summary>
            Loads an image from the specified assembly. 
            </summary>
            <param name="a">An <see cref="T:System.Reflection.Assembly"/> to load image from.</param>
            <param name="name">The case-insensitive name of the requested image.</param>
            <returns>The <see cref="T:System.Drawing.Image"/> if it is found; null otherwise.</returns>
        </member>
        <member name="M:C1.Framework.ResourceLoader.GetStream(System.String)">
            <summary>
            Loads the specified manifest resource from the entry assembly. 
            </summary>
            <param name="name">The case-insensitive name of the manifest resource being requested.</param>
            <returns>A <see cref="T:System.IO.Stream"/> representing this manifest resource.</returns>
        </member>
        <member name="M:C1.Framework.ResourceLoader.GetStream(System.Reflection.Assembly,System.String)">
            <summary>
            Loads the specified manifest resource from the specified assembly. 
            </summary>
            <param name="a">An <see cref="T:System.Reflection.Assembly"/> to load resource from.</param>
            <param name="name">The case-insensitive name of the manifest resource being requested.</param>
            <returns>A <see cref="T:System.IO.Stream"/> representing this manifest resource.</returns>
        </member>
        <member name="M:C1.Framework.ResourceLoader.DecodeImage(System.String)">
            <summary>
            Decodes an image from a base-64-encoded string.
            </summary>
            <param name="data">String that contains the encoded image data.</param>
            <returns>The <see cref="T:System.Drawing.Image"/> encoded in the string.</returns>
        </member>
        <member name="T:C1.Framework.ScaleMode">
            <summary>
            Specifies how to scale (or flow) the element to fit the pages.
            </summary>
        </member>
        <member name="F:C1.Framework.ScaleMode.ActualSize">
            <summary>
            Render element as it appears on the screen.
            </summary>
        </member>
        <member name="F:C1.Framework.ScaleMode.ScaleToPageWidth">
            <summary>
            Scale element so its width fits on a page.
            </summary>
        </member>
        <member name="F:C1.Framework.ScaleMode.ScaleToPageSize">
            <summary>
            Scale element to fit on a single page.
            </summary>
        </member>
        <member name="F:C1.Framework.ScaleMode.FlowToPageWidth">
            <summary>
            Flow element to fit the available page width.
            </summary>
        </member>
        <member name="T:C1.Framework.ElementPrintDocument">
            <summary>
            Class that extends <see cref="T:System.Drawing.Printing.PrintDocument"/> to print <see cref="T:C1.Framework.Element"/> objects.
            </summary>
        </member>
        <member name="T:C1.Framework.ScrollableControl">
            <summary>
            Defines an abstract base class for controls that support auto-scrolling behavior. 
            </summary>
        </member>
        <member name="M:C1.Framework.ScrollableControl.#ctor">
            <summary>
            Initializes the <see cref="T:C1.Framework.ScrollableControl"/> properties.
            </summary>
        </member>
        <member name="M:C1.Framework.ScrollableControl.OnScroll(System.Windows.Forms.ScrollBars)">
            <summary>
            Override this method to get notifications when the control scrolls.
            </summary>
            <param name="sb"></param>
        </member>
        <member name="M:C1.Framework.ScrollableControl.BuildScrollableRectangle(System.Int32,System.Int32)">
            <summary>
            This method is used to set the scroll rectangle.
            Override it to customize the scrolling behavior.
            </summary>
            <param name="dx"></param>
            <param name="dy"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Framework.ScrollableControl.HandleScrollMessage(System.Windows.Forms.Message)">
            <summary>
            Handles scroll messages.
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:C1.Framework.ScrollableControl.SetClientSizeCore(System.Int32,System.Int32)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.SetClientSizeCore(System.Int32,System.Int32)"/>.
            Override this method to account for scrollbars size.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:C1.Framework.ScrollableControl.OnInvalidated(System.Windows.Forms.InvalidateEventArgs)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.OnInvalidated(System.Windows.Forms.InvalidateEventArgs)"/>.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Framework.ScrollableControl.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.OnPaint(System.Windows.Forms.PaintEventArgs)"/>.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Framework.ScrollableControl.OnSizeChanged(System.EventArgs)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.OnSizeChanged(System.EventArgs)"/>.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Framework.ScrollableControl.OnMouseWheel(System.Windows.Forms.MouseEventArgs)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.OnMouseWheel(System.Windows.Forms.MouseEventArgs)"/>.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Framework.ScrollableControl.WndProc(System.Windows.Forms.Message@)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.WndProc(System.Windows.Forms.Message@)"/>.
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:C1.Framework.ScrollableControl.GetScrollSize(System.Int32)">
            <summary>
            Retrieves the specified scroll bar range.
            </summary>
            <param name="nBar"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Framework.ScrollableControl.GetScrollPos(System.Int32)">
            <summary>
            Gets the scroll position of the specified scroll bar.
            </summary>
            <param name="nBar"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Framework.ScrollableControl.GetTrackPos(System.Int32)">
            <summary>
            Gets the immediate position of the specified scroll box that the user is dragging.
            </summary>
            <param name="nBar"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Framework.ScrollableControl.SetScrollPos(System.Int32,System.Int32)">
            <summary>
            Sets the position of the specified scroll bar.
            </summary>
            <param name="nBar"></param>
            <param name="pos">Specifies the new position of the scroll box. 
            The position must be within the scrolling range. </param>
            <returns>The previous position of the scroll box indicates success. 
            Zero indicates failure</returns>
        </member>
        <member name="P:C1.Framework.ScrollableControl.Text">
            <summary>
            Gets or sets the text associated with the control.
            </summary>
        </member>
        <member name="P:C1.Framework.ScrollableControl.ScrollBars">
            <summary>
            Gets or sets which scroll bars should appear on the control.
            </summary>
        </member>
        <member name="P:C1.Framework.ScrollableControl.ScrollPosition">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Point"/> value determining the current scroll position.
            </summary>
        </member>
        <member name="P:C1.Framework.ScrollableControl.ScrollSize">
            <summary>
            Gets or sets the size of the document.
            </summary>
        </member>
        <member name="P:C1.Framework.ScrollableControl.ScrollTrack">
            <summary>
            Gets or sets whether the control should scroll as the user drags the scrollbar thumb.
            </summary>
        </member>
        <member name="P:C1.Framework.ScrollableControl.BorderStyle">
            <summary>
            Gets or sets the <see cref="P:C1.Framework.ScrollableControl.BorderStyle"/> value determining 
            the type of border around the control.
            </summary>
        </member>
        <member name="P:C1.Framework.ScrollableControl.Cursor">
            <summary>
            Gets or sets the <see cref="P:C1.Framework.ScrollableControl.Cursor"/> that appears when 
            the mouse moves over the control.
            </summary>
        </member>
        <member name="P:C1.Framework.ScrollableControl.ScrollableRectangle">
            <summary>
            This property is used to set the scroll page size.
            Override it to customize the scrolling behavior.
            </summary>
        </member>
        <member name="P:C1.Framework.ScrollableControl.CreateParams">
            <summary>
            This member overrides <see cref="P:System.Windows.Forms.Control.CreateParams"/>.
            </summary>
        </member>
        <member name="P:C1.Framework.ScrollableControl.SmallChange">
            <summary>
            Gets or sets the distance to move a scroll bar in response to 
            a small scroll command.
            </summary>
        </member>
        <member name="P:C1.Framework.ScrollableControl.UseScrollWindow">
            <summary>
            Gets or sets a <see cref="T:System.Boolean"/> value determining whether control shows scroll bars.
            </summary>
        </member>
        <member name="T:C1.Framework.AutoSizeElement">
            <summary>
            Specifies how the XView control should size the element it contains.
            </summary>
        </member>
        <member name="F:C1.Framework.AutoSizeElement.None">
            <summary>
            No autosizing.
            </summary>
        </member>
        <member name="F:C1.Framework.AutoSizeElement.Width">
            <summary>
            Auto size element by client area width.
            </summary>
        </member>
        <member name="F:C1.Framework.AutoSizeElement.Height">
            <summary>
            Auto size element by client area height.
            </summary>
        </member>
        <member name="F:C1.Framework.AutoSizeElement.Both">
            <summary>
            Auto size element by client area size.
            </summary>
        </member>
        <member name="T:C1.Framework.XView">
            <summary>
            <para>Control that hosts X elements.</para>
            
            <para>The control has an <see cref="P:C1.Framework.XView.Element"/> property that gets or
            sets the element to be displayed.</para>
            
            <para>The control is responsible for displaying the element, providing
            scrolling, and routing mouse and keyboard events to the hosted element.</para>
            </summary>
        </member>
        <member name="M:C1.Framework.XView.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.XView"/> control.
            </summary>
        </member>
        <member name="M:C1.Framework.XView.CreateGraphics">
            <summary>
            Creates a <see cref="T:System.Drawing.Graphics"/> object for the control.
            </summary>
            <returns>A <see cref="T:System.Drawing.Graphics"/> object for the control.</returns>
            <remarks>
            The <see cref="T:System.Drawing.Graphics"/> object returned by this method reflects the current
            settings for the <see cref="P:C1.Framework.XView.SmoothingMode"/> and <see cref="P:C1.Framework.XView.TextRenderingHint"/>
            properties.
            </remarks>
        </member>
        <member name="M:C1.Framework.XView.Invalidate(C1.Framework.Element)">
            <summary>
            Invalidates the contained element.
            </summary>
        </member>
        <member name="M:C1.Framework.XView.BeginUpdate">
            <summary>
            Suspends painting during long update operations.
            </summary>
        </member>
        <member name="M:C1.Framework.XView.EndUpdate">
            <summary>
            Restores painting after long update operations.
            </summary>
        </member>
        <member name="M:C1.Framework.XView.GetBounds(C1.Framework.Element)">
            <summary>
            Gets the rectangle that contains a given element.
            </summary>
            <param name="e"><see cref="P:C1.Framework.XView.Element"/> to locate.</param>
            <returns>Bounds of element <paramref name="e"/>, in client coordinates.</returns>
        </member>
        <member name="M:C1.Framework.XView.GetBounds(C1.Framework.Element,System.Boolean,System.Boolean)">
            <summary>
            Gets the rectangle that contains a given element.
            </summary>
            <param name="e"><see cref="P:C1.Framework.XView.Element"/> to locate.</param>
            <param name="contentArea">Whether to get the bounds of the whole element or just the content area.</param>
            <param name="clip">Whether to clip the rectangle based on ancestor elements.</param>
            <returns>Bounds of element <paramref name="e"/>, in client coordinates.</returns>
            <remarks>This method is similar to the <see cref="M:C1.Framework.Element.GetBounds(C1.Framework.Element)"/> method in the
            <see cref="P:C1.Framework.XView.Element"/> class, except this one takes the current <see cref="P:C1.Framework.ScrollableControl.ScrollPosition"/>
            into account.
            </remarks>
        </member>
        <member name="M:C1.Framework.XView.GetIsScrollable(C1.Framework.Element)">
            <summary>
            Checks whether a given element is in the main element's scrolling area.
            </summary>
            <param name="e"><see cref="P:C1.Framework.XView.Element"/> to check.</param>
            <returns>True if the whole element is within the main element's scrolling area.</returns>
            <remarks>
            The main element's scrolling area is the area below and to the right of the point
            returned by the <see cref="M:C1.Framework.Element.GetScrollOrigin"/> method.</remarks>
        </member>
        <member name="M:C1.Framework.XView.Focus(C1.Framework.Element)">
            <summary>
            Set the focus to a given element.
            </summary>
            <param name="e">Element to receive the focus.</param>
            <returns>True if the focus was set to the given element.</returns>
        </member>
        <member name="M:C1.Framework.XView.HitTest">
            <summary>
            Gets the hit-testable element under the mouse.
            </summary>
            <returns>Element under the mouse.</returns>
        </member>
        <member name="M:C1.Framework.XView.HitTest(System.Drawing.Point)">
            <summary>
            Gets the hit-testable element at a given position.
            </summary>
            <param name="pt">Position to test.</param>
            <returns>Element at the given position.</returns>
        </member>
        <member name="M:C1.Framework.XView.ScrollIntoView(C1.Framework.Element)">
            <summary>
            Scrolls a given element into view.
            </summary>
            <param name="e">Element to scroll into view.</param>
        </member>
        <member name="M:C1.Framework.XView.ScrollIntoView(System.Drawing.Point)">
            <summary>
            Scrolls a given point into view.
            </summary>
            <param name="pt">Point to scroll into view.</param>
        </member>
        <member name="M:C1.Framework.XView.ScrollIntoView(System.Drawing.Rectangle)">
            <summary>
            Scrolls a given rectangle into view.
            </summary>
            <param name="r">Rectangle to scroll into view.</param>
        </member>
        <member name="M:C1.Framework.XView.ResubscribeTooltip(C1.Win.C1SuperTooltip.C1SuperTooltipBase,C1.Win.C1SuperTooltip.C1SuperTooltipBase)">
            <summary>
            Occurs when an external C1SuperTooltip is attached or detached.
            </summary>
        </member>
        <member name="M:C1.Framework.XView.SetToolTip(System.Windows.Forms.Control,System.String)">
            <summary>
            Associates a rich tooltip with a control.
            </summary>
            <param name="control"><b>Control</b> that will be associated with the rich tooltip.</param>
            <param name="text">String containing Html text to be displayed in the tooltip.</param>
            <remarks>
            Use the <see cref="T:C1.Framework.XView"/> built-in tooltip instead of the regular <see cref="T:System.Windows.Forms.ToolTip"/>
            component in order to provide a consistent look between the tooltips associated with XView
            elements and other controls on your form.
            </remarks>
        </member>
        <member name="M:C1.Framework.XView.GetToolTip(System.Windows.Forms.Control)">
            <summary>
            Retrieves the rich tooltip text associated with the specified control.
            </summary>
            <param name="control">The <b>Control</b> for which to retrieve the tooltip text.</param>
            <returns>The tooltip text for the specified control.</returns>
        </member>
        <member name="M:C1.Framework.XView.UpdateToolTip">
            <summary>
            Updates the tooltip for the hovered element.
            </summary>
        </member>
        <member name="M:C1.Framework.XView.HideToolTip">
            <summary>
            Hides tooltip if it is currently visible.
            </summary>
        </member>
        <member name="M:C1.Framework.XView.Dispose(System.Boolean)">
            <summary>
            Releases all resources used by the control. 
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:C1.Framework.XView.IsInputKey(System.Windows.Forms.Keys)">
            <summary>
            Determines whether the specified key is a regular input key or 
            a special key that requires preprocessing.
            </summary>
            <param name="keyData">One of the <see cref="T:System.Windows.Forms.Keys"/> values.</param>
            <returns>True if the specified key is a regular input key; otherwise, false.</returns>
        </member>
        <member name="M:C1.Framework.XView.GetNextElement(C1.Framework.Element,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets the next <see cref="P:C1.Framework.XView.Element"/> given a start <see cref="P:C1.Framework.XView.Element"/>.
            </summary>
            <param name="e"><see cref="P:C1.Framework.XView.Element"/> where to start.</param>
            <param name="forward"><b>true</b> to move forward in the tab order; <b>false</b> to move backward in the tab order.</param>
            <param name="tabStopOnly"><b>true</b> to ignore elements with the TabStop property set to <b>false</b>; otherwise, <b>false</b>.</param>
            <param name="nested"><b>true</b> to include nested (children of child elements) child elements; otherwise, <b>false.</b></param>
            <param name="wrap"><b>true</b> to continue searching from the first element in the tab order after the last element has been reached; otherwise, <b>false</b>.</param>
            <returns>The next (or previous) <see cref="P:C1.Framework.XView.Element"/> in the tab order, or null if no element was found.</returns>
        </member>
        <member name="M:C1.Framework.XView.IsInputKey(System.Windows.Forms.Control,System.Windows.Forms.Keys)">
            <summary>
            Internal version of IsInputKey that should be called by hosted controls in order to
            allow the view to handle tab keys, arrows, etc.
            </summary>
            <param name="ctl">Control that received the key.</param>
            <param name="keyData">One of the <see cref="T:System.Windows.Forms.Keys"/> values.</param>
            <returns>True if the specified key is a regular input key; otherwise, false.</returns>
        </member>
        <member name="M:C1.Framework.XView.OnGotFocus(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.GotFocus"/> event. 
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.XView.OnLeave(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.Leave"/> event. 
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.XView.OnValidating(System.ComponentModel.CancelEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.Validating"/> event.
            </summary>
            <param name="e">A <see cref="T:System.ComponentModel.CancelEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.XView.OnValidated(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.Validated"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.XView.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.KeyDown"/> event. 
            </summary>
            <param name="e">An <see cref="T:System.Windows.Forms.KeyEventArgs"/> 
            that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.XView.OnKeyUp(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.KeyUp"/> event. 
            </summary>
            <param name="e">An <see cref="T:System.Windows.Forms.KeyEventArgs"/> 
            that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.XView.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.KeyPress"/> event. 
            </summary>
            <param name="e">An <see cref="T:System.Windows.Forms.KeyPressEventArgs"/> 
            that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.XView.OnMouseWheel(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.MouseWheel"/> event. 
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Framework.XView.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.MouseMove"/> event. 
            </summary>
            <param name="e">An <see cref="T:System.Windows.Forms.MouseEventArgs"/> 
            that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.XView.OnClick(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.Click"/> event. 
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.XView.OnDoubleClick(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.DoubleClick"/> event. 
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.XView.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.MouseDown"/> event. 
            </summary>
            <param name="e">An <see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.XView.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.MouseUp"/> event. 
            </summary>
            <param name="e">An <see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.XView.OnMouseEnter(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.MouseEnter"/> event. 
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.XView.OnMouseLeave(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.MouseLeave"/> event. 
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.XView.IsMouseInsideXView">
            <summary>
            Returns True if the mouse pointer is inside the XView control.
            </summary>
        </member>
        <member name="M:C1.Framework.XView.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.Paint"/> event. 
            </summary>
            <param name="e">An <see cref="T:System.Windows.Forms.PaintEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.XView.OnInvalidated(System.Windows.Forms.InvalidateEventArgs)">
            <summary>
            Remove hosted controls that belong to elements which became invisible or
            belong to a different control now.
            </summary>
            <remarks>
            <para>The host element is responsible for restoring the control's Parent property
            when it updates its position.</para>
            <para>Note: <see cref="T:C1.Framework.XView"/> determines that a <see cref="T:System.Windows.Forms.Control"/>belongs to an 
            <see cref="P:C1.Framework.XView.Element"/> if the control's <see cref="P:System.Windows.Forms.Control.Tag"/> property contains 
            a reference to a <see cref="T:System.Windows.Forms.Control"/> object.</para>
            </remarks>
            <param name="e"><see cref="T:System.Windows.Forms.InvalidateEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.XView.OnHandleDestroyed(System.EventArgs)">
            <summary>
            Remove hosted controls before disposing of the parent control.
            </summary>
            <remarks>
            <para>This allows the host element to remain valid even if their parent view is disposed.
            To dispose of the hosted control, call Dispose on the hosted control directly.</para>
            <para>Note: <see cref="T:C1.Framework.XView"/> determines that a <see cref="T:System.Windows.Forms.Control"/>belongs to an 
            <see cref="P:C1.Framework.XView.Element"/> if the control's <see cref="P:System.Windows.Forms.Control.Tag"/> property contains 
            a reference to a <see cref="T:System.Windows.Forms.Control"/> object.</para>
            </remarks>
            <param name="e"><see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.XView.BuildScrollableRectangle(System.Int32,System.Int32)">
            <summary>
             Sets the scroll rectangle.
            </summary>
            <param name="dx">Amount to scroll in the x direction, in pixels.</param>
            <param name="dy">Amount to scroll in the y direction, in pixels.</param>
            <returns></returns>
        </member>
        <member name="P:C1.Framework.XView.Element">
            <summary>
            Element hosted by this <see cref="T:C1.Framework.XView"/>.
            </summary>
        </member>
        <member name="P:C1.Framework.XView.AutoSizeElement">
            <summary>
            Gets or sets how the <see cref="T:C1.Framework.XView"/> should resize the hosted element to match its size.
            </summary>
        </member>
        <member name="P:C1.Framework.XView.ShowFocusRectangle">
            <summary>
            Gets or sets whether the <see cref="T:C1.Framework.XView"/> should show draw a focus rectangle around 
            the element with focus.
            </summary>
        </member>
        <member name="P:C1.Framework.XView.SmoothingMode">
            <summary>
            Gets or sets the <see cref="P:C1.Framework.XView.SmoothingMode"/> value that controls anti-aliasing.
            </summary>
        </member>
        <member name="P:C1.Framework.XView.TextRenderingHint">
            <summary>
            Gets or sets the <see cref="P:C1.Framework.XView.TextRenderingHint"/> that controls text rendering quality.
            </summary>
        </member>
        <member name="P:C1.Framework.XView.FocusedElement">
            <summary>
            Gets the element that has the focus.
            </summary>
        </member>
        <member name="P:C1.Framework.XView.SuperTooltip">
            <summary>
            Gets or sets the external instance of C1SuperTooltip class used to display tooltips for inner elements.
            </summary>
        </member>
        <member name="P:C1.Framework.XView.InnerTooltip">
            <summary>
            Gets the internal instance of the <see cref="T:C1.Win.C1SuperTooltip.C1SuperTooltipBase"/> component.
            </summary>
        </member>
        <member name="P:C1.Framework.XView.EffectiveTooltip">
            <summary>
            Gets the <see cref="T:C1.Win.C1SuperTooltip.C1SuperTooltipBase"/> component used to display tooltips for hovered elements.
            </summary>
        </member>
        <member name="P:C1.Framework.XView.ShowToolTips">
            <summary>
            Gets or sets whether the <see cref="T:C1.Framework.XView"/> should display tooltips for elements that 
            implement the <see cref="T:C1.Framework.IToolTipElement"/> interface.
            </summary>
        </member>
        <member name="P:C1.Framework.XView.Components">
            <summary>
            Gets a collection of public components contained in this control.
            This is used by the XViewDesigner designer.
            </summary>
        </member>
        <member name="P:C1.Framework.XView.HandleElementFocus">
            <summary>
            Gets or sets whether the control should handle the focus within contained elements.
            </summary>
        </member>
        <member name="P:C1.Framework.XView.CapturedElement">
            <summary>
            Gets or sets the element that receives all mouse events.
            </summary>
        </member>
        <member name="P:C1.Framework.XView.HoveredElement">
            <summary>
            Gets the element currently under the mouse.
            </summary>
        </member>
        <member name="T:C1.Framework.XView.HostedElement">
            <summary>
            Element that serves as an interface between the host XView control
            and the content elements.
            </summary>
        </member>
        <member name="T:C1.Framework.XViewPopup">
            <summary>
            
            </summary>
        </member>
        <member name="T:C1.Framework.XViewPopup.XViewPopupMessageFilter">
            <summary>
            Message filter to detect mouse events while the popUp is shown and 
            close the form when a mouse click outside the popUp occurs.
            </summary>
        </member>
        <member name="M:C1.Framework.XViewPopup.XViewPopupMessageFilter.PreFilterMessage(System.Windows.Forms.Message@)">
            <summary>
            Checks the message loop for mouse messages while the popUp is displayed.
            If one is detected the position is checked to see if it is outside the form, 
            in which case the owner is notified.
            </summary>
        </member>
        <member name="M:C1.Framework.Html.Css.ParseAttribute(System.Collections.Hashtable,System.String,System.String)">
            <summary>
            Adds a StyleAttribute to a table based on a name and value.
            </summary>
        </member>
        <member name="T:C1.Framework.Html.HtmlDiv">
            <summary>
            Class that represents Html DIV tags.
            </summary>
        </member>
        <member name="M:C1.Framework.Html.HtmlDiv.BreakBefore(C1.Framework.Element,System.Int32,System.Int32)">
            <summary>
            Gets a value that determines whether a line break should be inserted before
            a given element.
            </summary>
            <param name="e">Element to test for a line break.</param>
            <param name="lineEnd">Position of the line end if no breaks are added.</param>
            <param name="width">Width available for rendering the paragraph.</param>
            <returns>True if a line break should be inserted before the given element.</returns>
        </member>
        <member name="M:C1.Framework.Html.HtmlDiv.BreakBeforeRtl(C1.Framework.Element,System.Int32,System.Int32)">
            <summary>
            Gets a value that determines whether a line break should be inserted before
            a given element.
            </summary>
            <param name="e">Element to test for a line break.</param>
            <param name="lineStart">Position of the line start if no breaks are added.</param>
            <param name="start">Text start position.</param>
            <returns>True if a line break should be inserted before the given element.</returns>
        </member>
        <member name="M:C1.Framework.Html.HtmlDiv.BreakAfter(C1.Framework.Element)">
            <summary>
            Gets a value that determines whether a line break should be inserted after
            a given element.
            </summary>
            <param name="e">Element to test for a line break.</param>
            <returns>True if a line break should be inserted after the given element.</returns>
        </member>
        <member name="M:C1.Framework.Html.HtmlDiv.GetExtraSpacing(C1.Framework.Element,C1.Framework.Element)">
            <summary>
            Gets the amount of space, in pixels, to be added between two elements.
            </summary>
            <param name="above">Element above the space.</param>
            <param name="below">Element below the space.</param>
            <returns>Amount of space, in pixels, to be added between the two elements.</returns>
        </member>
        <member name="M:C1.Framework.Html.HtmlDiv.AddTextElement(C1.Framework.Style,System.String,System.Boolean)">
            <summary>
            Adds a string with a given style to this paragraph.
            </summary>
            <param name="s"><see cref="T:C1.Framework.Style"/> used to render the new string.</param>
            <param name="text">String to add to this paragraph.</param>
            <param name="wrappable">Indicates if the text element can be wrapped to new line.</param>
        </member>
        <member name="M:C1.Framework.Html.HtmlDiv.Render(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Renders the element into a given rectangle. 
            </summary>
            <param name="g">Graphics object where the element will be rendered.</param>
            <param name="r">Rectangle where the element will be rendered.</param>
        </member>
        <member name="M:C1.Framework.Html.HtmlDiv.RenderChildren(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Renders the child elements into a given rectangle. 
            </summary>
            <param name="g">Graphics object where the element will be rendered.</param>
            <param name="r">Rectangle where the child elements will be rendered.</param>
            <remarks>
            Derived elements may override this method in order to draw into the <see cref="T:System.Drawing.Graphics"/>
            after the background and borders have been rendered but before the child elements are 
            rendered.
            </remarks>
        </member>
        <member name="P:C1.Framework.Html.HtmlDiv.GeneratePdfTags">
            <summary>
            Gets or sets a <see cref="T:System.Boolean"/> value specifying whether element should generate pdf tags.
            </summary>
        </member>
        <member name="T:C1.Framework.Html.HtmlDiv.BaseLineTextElement">
            <summary>
            Like a <see cref="T:C1.Framework.TextElement"/>, but with an adjustable base line offset 
            (for implementing sub/super scripts)
            </summary>
        </member>
        <member name="T:C1.Framework.Html.HtmlElement">
            <summary>
            Class that represents a generic Html <see cref="T:C1.Framework.Element"/>.
            </summary>
        </member>
        <member name="M:C1.Framework.Html.HtmlElement.#ctor(C1.Framework.Style,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.Html.HtmlElement"/> class with the specified htm content and style options.
            </summary>
            <param name="style">The <see cref="T:C1.Framework.Style"/> object to use.</param>
            <param name="html">The <see cref="T:System.String"/> value with html content.</param>
            <param name="rtl">True to use right-to-left flow direction.</param>
        </member>
        <member name="M:C1.Framework.Html.HtmlElement.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.Html.HtmlElement"/> class with the specified htm content.
            </summary>
            <param name="html">The <see cref="T:System.String"/> value with html content.</param>
            <param name="rtl">True to use right-to-left flow direction.</param>
        </member>
        <member name="M:C1.Framework.Html.HtmlElement.#ctor(C1.Framework.Style,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.Html.HtmlElement"/> class with the specified style options.
            </summary>
            <param name="style">The <see cref="T:C1.Framework.Style"/> object to use.</param>
            <param name="rtl">True to use right-to-left flow direction.</param>
        </member>
        <member name="M:C1.Framework.Html.HtmlElement.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.Html.HtmlElement"/> class.
            </summary>
            <param name="rtl">True to use right-to-left flow direction.</param>
        </member>
        <member name="M:C1.Framework.Html.HtmlElement.Clear">
            <summary>
            Clears all content.
            </summary>
        </member>
        <member name="M:C1.Framework.Html.HtmlElement.AnimateImages(System.Int32)">
            <summary>
            Selects the image frame with the specified index.
            </summary>
            <param name="frameIndex">The frame index.</param>
        </member>
        <member name="P:C1.Framework.Html.HtmlElement.Url">
            <summary>
            Gets or sets the <see cref="T:System.String"/> value determining location of the html content to show.
            </summary>
        </member>
        <member name="P:C1.Framework.Html.HtmlElement.Html">
            <summary>
            Gets or sets the html content to display.
            </summary>
        </member>
        <member name="P:C1.Framework.Html.HtmlElement.ShowHotKeys">
            <summary>
            Gets or sets the <see cref="T:System.Boolean"/> value determining whether to show hotkey prefix.
            </summary>
        </member>
        <member name="P:C1.Framework.Html.HtmlElement.Connected">
            <summary>
            Gets or sets the <see cref="T:System.Boolean"/> value determining whether content should be downloaded at runtime.
            </summary>
        </member>
        <member name="P:C1.Framework.Html.HtmlElement.ImageDictionary">
            <summary>
            Gets or sets the <see cref="T:System.Collections.IDictionary"/> containing image cache.
            </summary>
        </member>
        <member name="P:C1.Framework.Html.HtmlElement.HasAnimatedImages">
            <summary>
            Get the <see cref="T:System.Boolean"/> value specifying whether the current element contains animated images.
            </summary>
        </member>
        <member name="T:C1.Framework.Html.HtmlFont">
            <summary>
            Class that represents HTML 'FONT' tags.
            </summary>
        </member>
        <member name="T:C1.Framework.Html.HtmlSpan">
            <summary>
            Represents an HTML span.
            </summary>
        </member>
        <member name="T:C1.Framework.Html.HtmlHr">
            <summary>
            Extends Element to provide a horizontal rule across the document.
            </summary>
        </member>
        <member name="T:C1.Framework.Html.HtmlHyperlink">
            <summary>
            Class that represents HTML 'A' tags.
            </summary>
        </member>
        <member name="T:C1.Framework.Html.HyperlinkElement">
            <summary>
            Invisible elements inserted in the HTML stream to delimit hyperlinks.
            To use this, the viewer should handle the MouseDown event, use HitTest to 
            find the element clicked, then scan the Children collection to determine
            whether the click was on a link and what the link parameters are.
            </summary>
        </member>
        <member name="T:C1.Framework.Html.HtmlImage">
            <summary>
            Represents an HTML 'img' tag.
            </summary>
        </member>
        <member name="T:C1.Framework.Html.HtmlList">
            <summary>
            REVIEW: Replace with 2-column table?
            The current setup works but makes the document dirty when it renders...
            </summary>
        </member>
        <member name="T:C1.Framework.Html.HtmlListItem">
            <summary>
            Class that represents an item in an ordered or unordered list.
            </summary>
        </member>
        <member name="T:C1.Framework.Html.HtmlLoader">
            <summary>
            Utility class with static methods used for loading (and caching)
            text and images from the web, from disk, or from app resources.
            </summary>
        </member>
        <member name="T:C1.Framework.Html.HtmlParagraph">
            <summary>
            Class that represents an HTML paragraph.
            </summary>
        </member>
        <member name="T:C1.Framework.Html.HtmlParser">
            <summary>
            Class used to parse that HTML into tags and text.
            </summary>
            <remarks>
            The main method in this class is <see cref="M:C1.Framework.Html.HtmlParser.Read"/>, which advances a pointer and 
            sets the <see cref="P:C1.Framework.Html.HtmlParser.Tag"/> and <see cref="P:C1.Framework.Html.HtmlParser.Text"/> properties.
            </remarks>
        </member>
        <member name="T:C1.Framework.Html.HtmlReader">
            <summary>
            <para>Class used to parse that HTML into tags and text.</para>
            
            <para>The main method is <see cref="M:C1.Framework.Html.HtmlReader.Read"/>, which advances a pointer and 
            sets the <see cref="P:C1.Framework.Html.HtmlReader.Tag"/> and <see cref="P:C1.Framework.Html.HtmlReader.Text"/> properties.</para>
            </summary>
        </member>
        <member name="T:C1.Framework.Html.HtmlRenderer">
            <summary>
            Helper class used for measuring and rendering HTML.
            </summary>
        </member>
        <member name="P:C1.Framework.Html.HtmlRenderer.GeneratePdfTags">
            <summary>
            Gets or sets a <see cref="T:System.Boolean"/> value specifying whether element should generate pdf tags.
            </summary>
        </member>
        <member name="T:C1.Framework.Html.HtmlTable">
            <summary>
            <para>HtmlTable derives from HtmlDiv and contains a single GridPanel, exposed by
            the <see cref="P:C1.Framework.Html.HtmlTable.Table"/> property.</para>
            <para>HtmlTable does not derive directly from GridPanel for two reasons:</para>
            <para>1) To allow horizontal alignment of the table within the paragraph, and</para>
            <para>2) Because this is simpler than using an interface and different parent classes.</para>
            </summary>
        </member>
        <member name="T:C1.Framework.Html.HtmlCell">
            <summary>
            Represents a cell in a table.
            </summary>
        </member>
        <member name="T:C1.Win.Interop.Matrix">
            <summary>
            Represents transformation matrix.
            </summary>
        </member>
        <member name="F:C1.Win.Interop.Matrix.Identity">
            <summary>
            Gets the identity matrix.
            </summary>
            <value>The identity matrix.</value>
        </member>
        <member name="F:C1.Win.Interop.Matrix.M11">
            <summary>
            Element (1,1)
            </summary>
        </member>
        <member name="F:C1.Win.Interop.Matrix.M12">
            <summary>
            Element (1,2)
            </summary>
        </member>
        <member name="F:C1.Win.Interop.Matrix.M21">
            <summary>
            Element (2,1)
            </summary>
        </member>
        <member name="F:C1.Win.Interop.Matrix.M22">
            <summary>
            Element (2,2)
            </summary>
        </member>
        <member name="F:C1.Win.Interop.Matrix.OffsetX">
            <summary>
            Element (3,1)
            </summary>
        </member>
        <member name="F:C1.Win.Interop.Matrix.OffsetY">
            <summary>
            Element (3,2)
            </summary>
        </member>
        <member name="M:C1.Win.Interop.Matrix.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.Interop.Matrix"/> struct.
            </summary>
            <param name="M11">The value to assign at row 1 column 1 of the matrix.</param>
            <param name="M12">The value to assign at row 1 column 2 of the matrix.</param>
            <param name="M21">The value to assign at row 2 column 1 of the matrix.</param>
            <param name="M22">The value to assign at row 2 column 2 of the matrix.</param>
            <param name="offsetX">The value to assign at row 3 column 1 of the matrix.</param>
            <param name="offsetY">The value to assign at row 3 column 2 of the matrix.</param>
        </member>
        <member name="M:C1.Win.Interop.Matrix.Transform(C1.Win.Interop.Point)">
            <summary>
            Transforms a point by this matrix.
            </summary>
            <param name="point">The original point to apply the transformation.</param>
            <returns>The result of the transformation for the input point.</returns>
        </member>
        <member name="M:C1.Win.Interop.Matrix.Transform(System.Double,System.Double)">
            <summary>
            Transforms a point by this matrix.
            </summary>
            <param name="x">The x coordinate of the point.</param>
            <param name="y">The y coordinate of the point.</param>
            <returns>The result of the transformation for the point.</returns>
        </member>
        <member name="M:C1.Win.Interop.Matrix.Multiply(C1.Win.Interop.Matrix@,C1.Win.Interop.Matrix@)">
            <summary>
            Multiplies the current matrix by another matrix passed as parameter,
            returns the resulting matrix in the output parameter.
            </summary>
            <param name="right">The matrix to multiply the current by (the right matrix in the multiplication).</param>
            <param name="result">The product of multiplying the two matrices.</param>
        </member>
        <member name="M:C1.Win.Interop.Matrix.Multiply(C1.Win.Interop.Matrix)">
            <summary>
            Multiplies the current matrix by another matrix passed as parameter.
            </summary>
            <param name="right">The matrix to multiply the current by (the right matrix in the multiplication).</param>
            <returns>The product of multiplying the two matrices.</returns>
        </member>
        <member name="P:C1.Win.Interop.Matrix.IsIdentity">
            <summary>
            Gets a value indicating whether this instance is an identity matrix.
            </summary>
            <value>
            <c>true</c> if this instance is an identity matrix; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:C1.Win.LongOperationEventArgs">
            <summary>
            Describes arguments for the event fired periodically by a potentially
            long operation. Allows to provide feedback to the user and may also
            allow to cancel the operation.
            </summary>
        </member>
        <member name="M:C1.Win.LongOperationEventArgs.#ctor">
            <summary>
            Creates a new instance of LongOperationEventArgs with default
            properties (Complete=0, CanCancel=false).
            </summary>
        </member>
        <member name="M:C1.Win.LongOperationEventArgs.#ctor(System.Double)">
            <summary>
            Creates a new instance of LongOperationEventArgs with the
            specified complete value and CanCancel=false.
            </summary>
            <param name="complete">How much is complete (from 0 to 1).</param>
        </member>
        <member name="M:C1.Win.LongOperationEventArgs.#ctor(System.Double,System.Boolean)">
            <summary>
            Creates a new instance of LongOperationEventArgs with the
            specified complete and CanCancel values.
            </summary>
            <param name="complete">How much is complete (from 0 to 1).</param>
            <param name="canCancel">Whether the operation can be cancelled.</param>
        </member>
        <member name="M:C1.Win.LongOperationEventArgs.#ctor(System.Boolean)">
            <summary>
            Creates a new instance of LongOperationEventArgs with the
            specified CanCancel value and Complete=0.
            </summary>
            <param name="canCancel">Whether the operation can be cancelled.</param>
        </member>
        <member name="P:C1.Win.LongOperationEventArgs.Complete">
            <summary>
            Gets the approximate completed ratio, from 0 (0% complete) to 1 (100% complete).
            </summary>
        </member>
        <member name="P:C1.Win.LongOperationEventArgs.CanCancel">
            <summary>
            Gets the value indicating whether the event handler can cancel the current long operation
            by setting the <see cref="P:C1.Win.LongOperationEventArgs.Cancel"/> property to <b>true</b>.
            </summary>
        </member>
        <member name="P:C1.Win.LongOperationEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether the current long operation
            should be cancelled. (This property is ignored if <see cref="P:C1.Win.LongOperationEventArgs.CanCancel"/> is <b>false</b>.)
            </summary>
        </member>
        <member name="T:C1.Win.LongOperationEventHandler">
            <summary>
            Represents a method that can handle a long operation event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:C1.Win.LongOperationEventArgs"/> that contains event data.</param>
        </member>
        <member name="T:C1.Util.Licensing.AssemblyNames">
            <summary>
            Specifies assembly name parts, used by AssemblyCommonInfo to generate actual assembly names.
            </summary>
        </member>
        <member name="M:C1.Win.Interop.C1Colors.IsVisible(System.Drawing.Color)">
            <summary>
            Returns a value indicating whether specified Color value represents
            some "visible" value, for example, this function returns <b>false</b> for
            transparent color.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.Interop.C1Colors.AreColorsEqual(System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Returns true if two colors are equal.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.Interop.C1Colors.FromOle(System.Int32)">
            <summary>
            Creates a new Color structure from specified integer.
            NOTE, this function assumes that integer has BBGGRR format.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.Interop.C1Colors.FromOleAlpha(System.Int32)">
            <summary>
            Creates a new Color structure from specified integer.
            NOTE, this function assumes that integer has AABBGGRR format.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="T:C1.Win.Interop.Point">
            <summary>
            Represents an ordered pair of <b>double</b> X and Y coordinates that defines a point 
            in a two-dimensional plane.
            </summary>
        </member>
        <member name="M:C1.Win.Interop.Point.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.Interop.Point"/> structure.
            </summary>
            <param name="x">The horizontal position of the point.</param>
            <param name="y">The vertical position of the point.</param>
        </member>
        <member name="M:C1.Win.Interop.Point.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
        </member>
        <member name="M:C1.Win.Interop.Point.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
        </member>
        <member name="M:C1.Win.Interop.Point.ToString">
            <summary>
            Converts the current <see cref="T:C1.Win.Interop.Point"/> to a human readable string. 
            </summary>
            <returns>A string that represents the current <see cref="T:C1.Win.Interop.Point"/> structure.</returns>
        </member>
        <member name="M:C1.Win.Interop.Point.Ceiling">
            <summary>
            Converts the current <see cref="T:C1.Win.Interop.Point"/> structure to a <see cref="T:System.Drawing.Point"/> by rounding the 
            <b>double</b> coordinates to the next higher integer values. 
            </summary>
            <returns>The <see cref="T:C1.Win.Interop.Point"/> structure this method converts to.</returns>
        </member>
        <member name="M:C1.Win.Interop.Point.Truncate">
            <summary>
            Converts the current <see cref="T:C1.Win.Interop.Point"/> structure to a <see cref="T:System.Drawing.Point"/> by truncating
            the values of the Point object. 
            </summary>
            <returns>The <see cref="T:C1.Win.Interop.Point"/> structure this method converts to.</returns>
        </member>
        <member name="M:C1.Win.Interop.Point.Offset(System.Double,System.Double)">
            <summary>
            Offsets the current <see cref="T:C1.Win.Interop.Point"/> structure by the specified values.
            </summary>
            <param name="dx">The horizontal offset.</param>
            <param name="dy">The vertical offset.</param>
        </member>
        <member name="M:C1.Win.Interop.Point.ToPointF">
            <summary>
            Converts the current <see cref="T:C1.Win.Interop.Point"/> structure to a <see cref="T:System.Drawing.PointF"/>.
            </summary>
            <returns>The <see cref="T:System.Drawing.PointF"/> structure this method converts to.</returns>
        </member>
        <member name="M:C1.Win.Interop.Point.Add(C1.Win.Interop.Point,C1.Win.Interop.Size)">
            <summary>
            Adds a <see cref="T:C1.Win.Interop.Size"/> to a <see cref="T:C1.Win.Interop.Point"/>.
            </summary>
            <param name="pt">The <see cref="T:C1.Win.Interop.Point"/> that is added.</param>
            <param name="sz">The <see cref="T:C1.Win.Interop.Size"/> that is added.</param>
            <returns>A <see cref="T:C1.Win.Interop.Point"/> representing the result of the addition.</returns>
        </member>
        <member name="M:C1.Win.Interop.Point.Substract(C1.Win.Interop.Point,C1.Win.Interop.Size)">
            <summary>
            Subtracts a <see cref="T:C1.Win.Interop.Size"/> from a <see cref="T:C1.Win.Interop.Point"/>.
            </summary>
            <param name="pt">The <see cref="T:C1.Win.Interop.Point"/> that is subtracted from.</param>
            <param name="sz">The <see cref="T:C1.Win.Interop.Size"/> that is subtracted.</param>
            <returns>A <see cref="T:C1.Win.Interop.Point"/> representing the result of the subtraction.</returns>
        </member>
        <member name="M:C1.Win.Interop.Point.op_Implicit(System.Drawing.Point)~C1.Win.Interop.Point">
            <summary>
            Converts a <see cref="T:System.Drawing.Point"/> to a <see cref="T:C1.Win.Interop.Point"/>.
            </summary>
            <param name="value">The <see cref="T:C1.Win.Interop.Point"/> to convert.</param>
            <returns>The converted <see cref="T:C1.Win.Interop.Point"/>.</returns>
        </member>
        <member name="M:C1.Win.Interop.Point.op_Implicit(System.Drawing.PointF)~C1.Win.Interop.Point">
            <summary>
            Converts a <see cref="T:System.Drawing.PointF"/> to a <see cref="T:C1.Win.Interop.Point"/>.
            </summary>
            <param name="value">The <see cref="T:System.Drawing.PointF"/> to convert.</param>
            <returns>The converted <see cref="T:C1.Win.Interop.Point"/>.</returns>
        </member>
        <member name="M:C1.Win.Interop.Point.op_Explicit(C1.Win.Interop.Point)~C1.Win.Interop.Size">
            <summary>
            Converts a <see cref="T:C1.Win.Interop.Point"/> to a <see cref="T:C1.Win.Interop.Size"/>.
            </summary>
            <param name="value">The <see cref="T:C1.Win.Interop.Point"/> to convert.</param>
            <returns>The converted <see cref="T:C1.Win.Interop.Size"/>.</returns>
        </member>
        <member name="M:C1.Win.Interop.Point.op_Addition(C1.Win.Interop.Point,C1.Win.Interop.Size)">
            <summary>
            Adds a <see cref="T:C1.Win.Interop.Size"/> to a <see cref="T:C1.Win.Interop.Point"/>.
            </summary>
            <param name="pt">The <see cref="T:C1.Win.Interop.Point"/> that is added.</param>
            <param name="sz">The <see cref="T:C1.Win.Interop.Size"/> that is added.</param>
            <returns>A <see cref="T:C1.Win.Interop.Point"/> representing the result of the addition.</returns>
        </member>
        <member name="M:C1.Win.Interop.Point.op_Subtraction(C1.Win.Interop.Point,C1.Win.Interop.Size)">
            <summary>
            Subtracts a <see cref="T:C1.Win.Interop.Size"/> from a <see cref="T:C1.Win.Interop.Point"/>.
            </summary>
            <param name="pt">The <see cref="T:C1.Win.Interop.Point"/> that is subtracted from.</param>
            <param name="sz">The <see cref="T:C1.Win.Interop.Size"/> that is subtracted.</param>
            <returns>A <see cref="T:C1.Win.Interop.Point"/> representing the result of the subtraction.</returns>
        </member>
        <member name="M:C1.Win.Interop.Point.op_Equality(C1.Win.Interop.Point,C1.Win.Interop.Point)">
            <summary>
            Indicates whether two <see cref="T:C1.Win.Interop.Point"/> structures are equal.
            </summary>
        </member>
        <member name="M:C1.Win.Interop.Point.op_Inequality(C1.Win.Interop.Point,C1.Win.Interop.Point)">
            <summary>
            Indicates whether two <see cref="T:C1.Win.Interop.Point"/> structures are not equal.
            </summary>
        </member>
        <member name="P:C1.Win.Interop.Point.X">
            <summary>
            Gets or sets the X coordinate of the current <see cref="T:C1.Win.Interop.Point"/>.
            </summary>
        </member>
        <member name="P:C1.Win.Interop.Point.Y">
            <summary>
            Gets or sets the Y coordinate of the current <see cref="T:C1.Win.Interop.Point"/>.
            </summary>
        </member>
        <member name="P:C1.Win.Interop.Point.IsEmpty">
            <summary>
            Gets a value indicating whether the current <see cref="T:C1.Win.Interop.Point"/> is empty.
            </summary>
        </member>
        <member name="P:C1.Win.Interop.Point.Empty">
            <summary>
            Represents an empty instance of the <see cref="T:C1.Win.Interop.Point"/> structure.
            </summary>
        </member>
        <member name="T:C1.Win.Interop.Rect">
            <summary>
            Stores a set of four <b>double</b> values that represent the location and size of a rectangle.
            </summary>
        </member>
        <member name="M:C1.Win.Interop.Rect.#ctor(C1.Win.Interop.Point,C1.Win.Interop.Size)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.Interop.Rect"/> structure.
            </summary>
            <param name="location">The location (coordinates of the top left corner) of the rectangle.</param>
            <param name="size">The size of the rectangle.</param>
        </member>
        <member name="M:C1.Win.Interop.Rect.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.Interop.Rect"/> structure.
            </summary>
            <param name="x">The X coordinate of the left side of the rectangle.</param>
            <param name="y">The Y coordinate of the top side of the rectangle.</param>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
        </member>
        <member name="M:C1.Win.Interop.Rect.#ctor(C1.Win.Interop.Point,C1.Win.Interop.Point)">
            Initializes a new instance of the <see cref="T:C1.Win.Interop.Rect"/> structure that is exactly
            large enough to contain the two specified points.
            <summary>
            
            </summary>
            <param name="point1">The first point that the new rectangle must contain.</param>
            <param name="point2">The second point that the new rectangle must contain.</param>
        </member>
        <member name="M:C1.Win.Interop.Rect.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
        </member>
        <member name="M:C1.Win.Interop.Rect.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
        </member>
        <member name="M:C1.Win.Interop.Rect.Deflate(C1.Win.Interop.Thickness)">
            <summary>
            Deflates the current <see cref="T:C1.Win.Interop.Rect"/> by the specified amounts provided as <see cref="T:C1.Win.Interop.Thickness"/>.
            </summary>
        </member>
        <member name="M:C1.Win.Interop.Rect.ToString">
            <summary>
            Converts the current <see cref="T:C1.Win.Interop.Rect"/> structure to a human-readable string representing it.
            </summary>
            <returns>The string representing the current <see cref="T:C1.Win.Interop.Rect"/>.</returns>
        </member>
        <member name="M:C1.Win.Interop.Rect.Contains(C1.Win.Interop.Point)">
            <summary>
            Tests whether the specified point is contained within the current <see cref="T:C1.Win.Interop.Rect"/>.
            </summary>
            <param name="pt">The <see cref="T:C1.Win.Interop.Point"/> to test.</param>
            <returns><b>true</b> if <paramref name="pt"/> is contained within the current <see cref="T:C1.Win.Interop.Rect"/> structure,
            <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.Win.Interop.Rect.Contains(C1.Win.Interop.Rect)">
            <summary>
            Tests whether the specified rectangle is entirely contained within the current <see cref="T:C1.Win.Interop.Rect"/>.
            </summary>
            <param name="rc">The <see cref="T:C1.Win.Interop.Rect"/> to test.</param>
            <returns><b>true</b> if <paramref name="rc"/> is completely contained within the current <see cref="T:C1.Win.Interop.Rect"/> structure,
            <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.Win.Interop.Rect.Contains(System.Double,System.Double)">
            <summary>
            Tests whether a point specified by its coordinates is contained within the current <see cref="T:C1.Win.Interop.Rect"/>.
            </summary>
            <param name="x">The X coordinate of the point to test.</param>
            <param name="y">The Y coordinate of the point to test.</param>
            <returns><b>true</b> if the specified point is contained within the current <see cref="T:C1.Win.Interop.Rect"/> structure,
            <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.Win.Interop.Rect.Inflate(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Inflates the current <see cref="T:C1.Win.Interop.Rect"/> by the specified amounts on four sides.
            </summary>
            <param name="left">The amount to add on the left.</param>
            <param name="top">The amount to add at the top.</param>
            <param name="right">The amount to add on the right.</param>
            <param name="bottom">The amount to add on the bottom.</param>
        </member>
        <member name="M:C1.Win.Interop.Rect.Inflate(C1.Win.Interop.Size)">
            <summary>
            Inflates the current <see cref="T:C1.Win.Interop.Rect"/> by a specified <see cref="P:C1.Win.Interop.Rect.Size"/>.
            </summary>
            <param name="size">The <see cref="P:C1.Win.Interop.Rect.Size"/> to inflate the current rectangle by.</param>
        </member>
        <member name="M:C1.Win.Interop.Rect.Inflate(System.Double,System.Double)">
            <summary>
            Inflates the current <see cref="T:C1.Win.Interop.Rect"/> by specified horizontal and vertical amounts.
            </summary>
            <param name="x">The amount to add on the left and right of the current <see cref="T:C1.Win.Interop.Rect"/>.</param>
            <param name="y">The amount to add at the top and bottom of the current <see cref="T:C1.Win.Interop.Rect"/>.</param>
        </member>
        <member name="M:C1.Win.Interop.Rect.Intersect(C1.Win.Interop.Rect)">
            <summary>
            Replaces the current <see cref="T:C1.Win.Interop.Rect"/> structure with the intersection
            of itself and another <see cref="T:C1.Win.Interop.Rect"/>.
            </summary>
            <param name="rect">The <see cref="T:C1.Win.Interop.Rect"/> to intersect the current one with.</param>
        </member>
        <member name="M:C1.Win.Interop.Rect.IntersectsWith(C1.Win.Interop.Rect)">
            <summary>
            Tests whether the current <see cref="T:C1.Win.Interop.Rect"/> intersects with another.
            </summary>
            <param name="rc">The <see cref="T:C1.Win.Interop.Rect"/> to test.</param>
            <returns><b>true</b> if the current <see cref="T:C1.Win.Interop.Rect"/> intersects with <paramref name="rc"/>, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.Win.Interop.Rect.Offset(System.Double,System.Double)">
            <summary>
            Offsets the location of the current <see cref="T:C1.Win.Interop.Rect"/> by specified horizontal and vertical amounts.
            </summary>
            <param name="x">The horizontal offset to apply.</param>
            <param name="y">The vertical offset to apply.</param>
        </member>
        <member name="M:C1.Win.Interop.Rect.Offset(C1.Win.Interop.Point)">
            <summary>
            Offsets the location of the current <see cref="T:C1.Win.Interop.Rect"/> by horizontal and vertical amounts specified by a <see cref="T:C1.Win.Interop.Point"/>.
            </summary>
            <param name="pt">The <see cref="T:C1.Win.Interop.Point"/> specifying the horizontal and vertical offsets to apply.</param>
        </member>
        <member name="M:C1.Win.Interop.Rect.ToRectangleF">
            <summary>
            Converts the current <see cref="T:C1.Win.Interop.Rect"/> to a <see cref="T:System.Drawing.RectangleF"/>.
            </summary>
            <returns>The converted <see cref="T:System.Drawing.RectangleF"/> structure.</returns>
        </member>
        <member name="M:C1.Win.Interop.Rect.ToRectangle">
            <summary>
            Converts the current <see cref="T:C1.Win.Interop.Rect"/> to a <see cref="T:System.Drawing.Rectangle"/>.
            </summary>
            <returns>The converted <see cref="T:System.Drawing.Rectangle"/> structure.</returns>
        </member>
        <member name="M:C1.Win.Interop.Rect.op_Equality(C1.Win.Interop.Rect,C1.Win.Interop.Rect)">
            <summary>
            Indicates whether two <see cref="T:C1.Win.Interop.Rect"/> structures are equal.
            </summary>
        </member>
        <member name="M:C1.Win.Interop.Rect.op_Inequality(C1.Win.Interop.Rect,C1.Win.Interop.Rect)">
            <summary>
            Indicates whether two <see cref="T:C1.Win.Interop.Rect"/> structures are not equal.
            </summary>
        </member>
        <member name="M:C1.Win.Interop.Rect.op_Implicit(System.Drawing.Rectangle)~C1.Win.Interop.Rect">
            <summary>
            Converts a <see cref="T:System.Drawing.Rectangle"/> to a <see cref="T:C1.Win.Interop.Rect"/>.
            </summary>
            <param name="value">The <see cref="T:System.Drawing.Rectangle"/> to convert.</param>
            <returns>The converted <see cref="T:C1.Win.Interop.Rect"/> structure.</returns>
        </member>
        <member name="M:C1.Win.Interop.Rect.op_Implicit(System.Drawing.RectangleF)~C1.Win.Interop.Rect">
            <summary>
            Converts a <see cref="T:System.Drawing.RectangleF"/> to a <see cref="T:C1.Win.Interop.Rect"/>.
            </summary>
            <param name="value">The <see cref="T:System.Drawing.RectangleF"/> to convert.</param>
            <returns>The converted <see cref="T:C1.Win.Interop.Rect"/> structure.</returns>
        </member>
        <member name="M:C1.Win.Interop.Rect.Parse(System.String,C1.Win.Interop.Rect@,System.Boolean)">
            <summary>
            Converts a string to a <see cref="T:C1.Win.Interop.Rect"/> structure.
            </summary>
            <param name="s">The string to convert.</param>
            <param name="result">OUT: the created <see cref="T:C1.Win.Interop.Rect"/> structure.</param>
            <param name="throwException">Indicates whether an exception should be thrown if the string cannot be converted.</param>
            <returns><b>true</b> if no error occurred, <b>false</b> otherwise (if <paramref name="throwException"/> is <b>false</b>).</returns>
        </member>
        <member name="M:C1.Win.Interop.Rect.FromLTRB(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a <see cref="T:C1.Win.Interop.Rect"/> structure based on the coordinates
            of its top-left and bottom-right corners.
            </summary>
            <param name="left">The X coordinate of the upper-left corner of the rectangular region.</param>
            <param name="top">The Y coordinate of the upper-left corner of the rectangular region.</param>
            <param name="right">The X coordinate of the lower-right corner of the rectangular region.</param>
            <param name="bottom">The Y coordinate of the lower-right corner of the rectangular region.</param>
            <returns>The newly created <see cref="T:C1.Win.Interop.Rect"/> structure.</returns>
        </member>
        <member name="M:C1.Win.Interop.Rect.Inflate(C1.Win.Interop.Rect,System.Double,System.Double)">
            <summary>
            Creates a new <see cref="T:C1.Win.Interop.Rect"/> structure from another <b>RectangleD</b>,
            inflated by the specified amounts vertically and horizontally.
            </summary>
            <param name="rc">The <see cref="T:C1.Win.Interop.Rect"/> a copy of which is created and inflated.</param>
            <param name="x">The amount by which to inflate the resulting rectangle horizontally.</param>
            <param name="y">The amount by which to inflate the resulting rectangle vertically.</param>
            <returns>The newly created <see cref="T:C1.Win.Interop.Rect"/> structure.</returns>
        </member>
        <member name="M:C1.Win.Interop.Rect.Intersect(C1.Win.Interop.Rect,C1.Win.Interop.Rect)">
            <summary>
            Creates a new <see cref="T:C1.Win.Interop.Rect"/> structure representing the intersection
            of two <b>RectangleD</b> structures.
            (The intersection may be empty, in which case <see cref="P:C1.Win.Interop.Rect.Empty"/> is returned.)
            </summary>
            <param name="a">The first <see cref="T:C1.Win.Interop.Rect"/> to intersect.</param>
            <param name="b">The second <see cref="T:C1.Win.Interop.Rect"/> to intersect.</param>
            <returns>The newly created <see cref="T:C1.Win.Interop.Rect"/> structure.</returns>
        </member>
        <member name="M:C1.Win.Interop.Rect.Offset(C1.Win.Interop.Rect,C1.Win.Interop.Point)">
            <summary>
            Adjusts the location of this rectangle by the specified amount.
            </summary>
            <param name="r">The rectangle to adjust.</param>
            <param name="offset">Amount to offset the location.</param>
            <returns>The adjusted rectangle.</returns>
        </member>
        <member name="M:C1.Win.Interop.Rect.Union(C1.Win.Interop.Rect,C1.Win.Interop.Rect)">
            <summary>
            Creates a new <see cref="T:C1.Win.Interop.Rect"/> structure representing the smallest possible
            rectangle containing the two specified rectangles.
            </summary>
            <param name="a">The first <see cref="T:C1.Win.Interop.Rect"/> to combine.</param>
            <param name="b">The second <see cref="T:C1.Win.Interop.Rect"/> to combine.</param>
            <returns>The newly created <see cref="T:C1.Win.Interop.Rect"/> structure.</returns>
        </member>
        <member name="P:C1.Win.Interop.Rect.X">
            <summary>
            Gets or sets the X coordinate of the top left corner of the current <see cref="T:C1.Win.Interop.Rect"/> structure.
            </summary>
        </member>
        <member name="P:C1.Win.Interop.Rect.Y">
            <summary>
            Gets or sets the Y coordinate of the top left corner of the current <see cref="T:C1.Win.Interop.Rect"/> structure.
            </summary>
        </member>
        <member name="P:C1.Win.Interop.Rect.Width">
            <summary>
            Gets or sets the width of the current <see cref="T:C1.Win.Interop.Rect"/> structure.
            </summary>
        </member>
        <member name="P:C1.Win.Interop.Rect.Height">
            <summary>
            Gets or sets the height of the current <see cref="T:C1.Win.Interop.Rect"/> structure.
            </summary>
        </member>
        <member name="P:C1.Win.Interop.Rect.Left">
            <summary>
            Gets the X coordinate of the left edge of the current <see cref="T:C1.Win.Interop.Rect"/> structure.
            </summary>
        </member>
        <member name="P:C1.Win.Interop.Rect.Top">
            <summary>
            Gets the Y coordinate of the top edge of the current <see cref="T:C1.Win.Interop.Rect"/> structure.
            </summary>
        </member>
        <member name="P:C1.Win.Interop.Rect.Right">
            <summary>
            Gets the X coordinate of the right edge of the current <see cref="T:C1.Win.Interop.Rect"/> structure.
            </summary>
        </member>
        <member name="P:C1.Win.Interop.Rect.Bottom">
            <summary>
            Gets the Y coordinate of the bottom edge of the current <see cref="T:C1.Win.Interop.Rect"/> structure.
            </summary>
        </member>
        <member name="P:C1.Win.Interop.Rect.Location">
            <summary>
            Gets or sets the coordinates of the top left corner of the current <see cref="T:C1.Win.Interop.Rect"/> structure.
            </summary>
        </member>
        <member name="P:C1.Win.Interop.Rect.Size">
            <summary>
            Gets or sets the size of the current <see cref="T:C1.Win.Interop.Rect"/> structure.
            </summary>
        </member>
        <member name="P:C1.Win.Interop.Rect.IsEmpty">
            <summary>
            Gets a value indicating whether the <see cref="P:C1.Win.Interop.Rect.Width"/> and <see cref="P:C1.Win.Interop.Rect.Height"/>
            properties of the current <see cref="T:C1.Win.Interop.Rect"/> structure have zero values.
            </summary>
        </member>
        <member name="P:C1.Win.Interop.Rect.TopLeft">
            <summary>
            Gets the coordinates of the top left corner of the current <see cref="T:C1.Win.Interop.Rect"/> structure.
            </summary>
        </member>
        <member name="P:C1.Win.Interop.Rect.TopRight">
            <summary>
            Gets the coordinates of the top right corner of the current <see cref="T:C1.Win.Interop.Rect"/> structure.
            </summary>
        </member>
        <member name="P:C1.Win.Interop.Rect.BottomRight">
            <summary>
            Gets the coordinates of the bottom right corner of the current <see cref="T:C1.Win.Interop.Rect"/> structure.
            </summary>
        </member>
        <member name="P:C1.Win.Interop.Rect.BottomLeft">
            <summary>
            Gets the coordinates of the bottom left corner of the current <see cref="T:C1.Win.Interop.Rect"/> structure.
            </summary>
        </member>
        <member name="P:C1.Win.Interop.Rect.Empty">
            <summary>
            Represents an empty instance of the <see cref="T:C1.Win.Interop.Rect"/> structure.
            </summary>
        </member>
        <member name="T:C1.Win.Interop.Size">
            <summary>
            Stores an ordered pair of <b>double</b> values, typically the width and height of a rectangle.
            </summary>
        </member>
        <member name="M:C1.Win.Interop.Size.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.Interop.Size"/> structure.
            </summary>
            <param name="width">The horizontal component of the <see cref="T:C1.Win.Interop.Size"/>.</param>
            <param name="height">The vertical component of the <see cref="T:C1.Win.Interop.Size"/>.</param>
        </member>
        <member name="M:C1.Win.Interop.Size.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
        </member>
        <member name="M:C1.Win.Interop.Size.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
        </member>
        <member name="M:C1.Win.Interop.Size.ToString">
            <summary>
            Converts the current <see cref="T:C1.Win.Interop.Size"/> structure to a human-readable string representing it.
            </summary>
            <returns>The string representing the current <see cref="T:C1.Win.Interop.Size"/>.</returns>
        </member>
        <member name="M:C1.Win.Interop.Size.Ceiling">
            <summary>
            Converts the current <see cref="T:C1.Win.Interop.Size"/> structure to a <see cref="T:C1.Win.Interop.Point"/> by rounding the 
            width and height to the next higher integer values. 
            </summary>
            <returns>The <see cref="T:C1.Win.Interop.Size"/> structure this method converts to.</returns>
        </member>
        <member name="M:C1.Win.Interop.Size.Truncate">
            <summary>
            Converts the current <see cref="T:C1.Win.Interop.Size"/> structure to a <see cref="T:C1.Win.Interop.Point"/> by truncating the 
            width and height to integer values. 
            </summary>
            <returns>The <see cref="T:C1.Win.Interop.Size"/> structure this method converts to.</returns>
        </member>
        <member name="M:C1.Win.Interop.Size.op_Implicit(System.Drawing.Size)~C1.Win.Interop.Size">
            <summary>
            Converts a <see cref="T:System.Drawing.Size"/> to a <see cref="T:C1.Win.Interop.Size"/>.
            </summary>
            <param name="value">The <see cref="T:C1.Win.Interop.Size"/> to convert.</param>
            <returns>The converted <see cref="T:C1.Win.Interop.Size"/>.</returns>
        </member>
        <member name="M:C1.Win.Interop.Size.op_Implicit(System.Drawing.SizeF)~C1.Win.Interop.Size">
            <summary>
            Converts a <see cref="T:System.Drawing.SizeF"/> to a <see cref="T:C1.Win.Interop.Size"/>.
            </summary>
            <param name="value">The <see cref="T:System.Drawing.SizeF"/> to convert.</param>
            <returns>The converted <see cref="T:C1.Win.Interop.Size"/>.</returns>
        </member>
        <member name="M:C1.Win.Interop.Size.op_Explicit(C1.Win.Interop.Size)~C1.Win.Interop.Point">
            <summary>
            Converts a <see cref="T:C1.Win.Interop.Size"/> to a <see cref="T:C1.Win.Interop.Point"/>.
            </summary>
            <param name="value">The <see cref="T:C1.Win.Interop.Size"/> to convert.</param>
            <returns>The converted <see cref="T:C1.Win.Interop.Point"/>.</returns>
        </member>
        <member name="M:C1.Win.Interop.Size.Parse(System.String,C1.Win.Interop.Size@,System.Boolean)">
            <summary>
            Converts a string to a <see cref="T:C1.Win.Interop.Size"/> structure.
            </summary>
            <param name="s">The string to convert.</param>
            <param name="result">OUT: the created <see cref="T:C1.Win.Interop.Size"/> structure.</param>
            <param name="throwException">Indicates whether an exception should be thrown if the string cannot be converted.</param>
            <returns><b>true</b> if no error occurred, <b>false</b> otherwise (if <paramref name="throwException"/> is <b>false</b>).</returns>
        </member>
        <member name="M:C1.Win.Interop.Size.Add(C1.Win.Interop.Size,C1.Win.Interop.Size)">
            <summary>
            Adds two <see cref="T:C1.Win.Interop.Size"/> structures.
            </summary>
            <param name="sz1">The first <see cref="T:C1.Win.Interop.Size"/> that is added.</param>
            <param name="sz2">The second <see cref="T:C1.Win.Interop.Size"/> that is added.</param>
            <returns>A <see cref="T:C1.Win.Interop.Size"/> representing the result of the addition.</returns>
        </member>
        <member name="M:C1.Win.Interop.Size.Substract(C1.Win.Interop.Size,C1.Win.Interop.Size)">
            <summary>
            Subtracts one <see cref="T:C1.Win.Interop.Size"/> structure from another.
            </summary>
            <param name="sz1">The <see cref="T:C1.Win.Interop.Size"/> that is subtracted from.</param>
            <param name="sz2">The <see cref="T:C1.Win.Interop.Size"/> that is subtracted.</param>
            <returns>A <see cref="T:C1.Win.Interop.Size"/> representing the result of the subtraction.</returns>
        </member>
        <member name="M:C1.Win.Interop.Size.op_Subtraction(C1.Win.Interop.Size,C1.Win.Interop.Size)">
            <summary>
            Subtracts one <see cref="T:C1.Win.Interop.Size"/> structure from another.
            </summary>
            <param name="sz1">The <see cref="T:C1.Win.Interop.Size"/> that is subtracted from.</param>
            <param name="sz2">The <see cref="T:C1.Win.Interop.Size"/> that is subtracted.</param>
            <returns>A <see cref="T:C1.Win.Interop.Size"/> representing the result of the subtraction.</returns>
        </member>
        <member name="M:C1.Win.Interop.Size.op_Addition(C1.Win.Interop.Size,C1.Win.Interop.Size)">
            <summary>
            Adds two <see cref="T:C1.Win.Interop.Size"/> structures.
            </summary>
            <param name="sz1">The first <see cref="T:C1.Win.Interop.Size"/> that is added.</param>
            <param name="sz2">The second <see cref="T:C1.Win.Interop.Size"/> that is added.</param>
            <returns>A <see cref="T:C1.Win.Interop.Size"/> representing the result of the addition.</returns>
        </member>
        <member name="M:C1.Win.Interop.Size.op_Equality(C1.Win.Interop.Size,C1.Win.Interop.Size)">
            <summary>
            Indicates whether two <see cref="T:C1.Win.Interop.Size"/> structures are equal.
            </summary>
        </member>
        <member name="M:C1.Win.Interop.Size.op_Inequality(C1.Win.Interop.Size,C1.Win.Interop.Size)">
            <summary>
            Indicates whether two <see cref="T:C1.Win.Interop.Size"/> structures are not equal.
            </summary>
        </member>
        <member name="P:C1.Win.Interop.Size.Width">
            <summary>
            Gets or sets the horizontal component of the current <see cref="T:C1.Win.Interop.Size"/>.
            </summary>
        </member>
        <member name="P:C1.Win.Interop.Size.Height">
            <summary>
            Gets or sets the vertical component of the current <see cref="T:C1.Win.Interop.Size"/>.
            </summary>
        </member>
        <member name="P:C1.Win.Interop.Size.IsEmpty">
            <summary>
            Gets a value indicating whether of the current <see cref="T:C1.Win.Interop.Size"/> has zero <see cref="P:C1.Win.Interop.Size.Width"/> and <see cref="P:C1.Win.Interop.Size.Height"/>.
            </summary>
        </member>
        <member name="P:C1.Win.Interop.Size.Empty">
            <summary>
            Represents an empty instance of the <see cref="T:C1.Win.Interop.Size"/> structure.
            </summary>
        </member>
        <member name="T:C1.Win.Interop.Thickness">
            <summary>
            Describes the thickness of a frame around a rectangle. Four double
            values describe the <see cref="P:C1.Win.Interop.Thickness.Left"/>, <see cref="P:C1.Win.Interop.Thickness.Top"/>,
            <see cref="P:C1.Win.Interop.Thickness.Right"/>, and <see cref="P:C1.Win.Interop.Thickness.Bottom"/> sides
            of the rectangle, respectively.
            </summary>
        </member>
        <member name="F:C1.Win.Interop.Thickness.Empty">
            <summary>
            Represents an empty instance of the <see cref="T:C1.Win.Interop.Thickness"/> structure.
            </summary>
        </member>
        <member name="M:C1.Win.Interop.Thickness.#ctor(System.Double)">
            <summary>
            Initializes a <see cref="T:C1.Win.Interop.Thickness"/> structure that has the specified
            uniform length on each side.
            </summary>
            <param name="uniformLength">The uniform length applied to all four sides of the bounding rectangle.</param>
        </member>
        <member name="M:C1.Win.Interop.Thickness.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a Windows.UI.Xaml.Thickness structure that has specific lengths
            (supplied as a System.Double) applied to each side of the rectangle.
            </summary>
            <param name="left">The thickness for the left side of the rectangle.</param>
            <param name="top">The thickness for the upper side of the rectangle.</param>
            <param name="right">The thickness for the right side of the rectangle.</param>
            <param name="bottom">The thickness for the lower side of the rectangle.</param>
        </member>
        <member name="M:C1.Win.Interop.Thickness.op_Inequality(C1.Win.Interop.Thickness,C1.Win.Interop.Thickness)">
            <summary>
            Compares two <see cref="T:C1.Win.Interop.Thickness"/> structures for inequality.
            </summary>
            <param name="t1">The first structure to compare.</param>
            <param name="t2">The other structure to compare.</param>
            <returns>true if the two instances of Windows.UI.Xaml.Thickness are not equal; otherwise, false.</returns>
        </member>
        <member name="M:C1.Win.Interop.Thickness.op_Equality(C1.Win.Interop.Thickness,C1.Win.Interop.Thickness)">
            <summary>
            Compares the value of two <see cref="T:C1.Win.Interop.Thickness"/> structures for equality.
            </summary>
            <param name="t1">The first structure to compare.</param>
            <param name="t2">The other structure to compare.</param>
            <returns>true if the two instances of Windows.UI.Xaml.Thickness are equal; otherwise, false.</returns>
        </member>
        <member name="M:C1.Win.Interop.Thickness.Equals(System.Object)">
            <summary>
            Compares this Windows.UI.Xaml.Thickness structure to another System.Object
            for equality.
            </summary>
            <param name="obj">The object to compare.</param>
            <returns>true if the two objects are equal; otherwise, false.</returns>
        </member>
        <member name="M:C1.Win.Interop.Thickness.Equals(C1.Win.Interop.Thickness)">
            <summary>
            Compares this Windows.UI.Xaml.Thickness structure to another <see cref="T:C1.Win.Interop.Thickness"/>
            structure for equality.
            </summary>
            <param name="thickness">An instance of <see cref="T:C1.Win.Interop.Thickness"/> to compare for equality.</param>
            <returns>true if the two instances of Windows.UI.Xaml.Thickness are equal; otherwise, false.</returns>
        </member>
        <member name="M:C1.Win.Interop.Thickness.GetHashCode">
            <summary>
            Returns the hash code of the structure.
            </summary>
            <returns>A hash code for this instance of <see cref="T:C1.Win.Interop.Thickness"/>.</returns>
        </member>
        <member name="M:C1.Win.Interop.Thickness.ToString">
            <summary>
            Returns the string representation of the <see cref="T:C1.Win.Interop.Thickness"/> structure.
            </summary>
            <returns>A string that represents the <see cref="T:C1.Win.Interop.Thickness"/> value.</returns>
        </member>
        <member name="P:C1.Win.Interop.Thickness.Bottom">
            <summary>
            Gets or sets the width, of the lower side of the bounding rectangle.
            </summary>
        </member>
        <member name="P:C1.Win.Interop.Thickness.Left">
            <summary>
            Gets or sets the width, of the left side of the bounding rectangle.
            </summary>
        </member>
        <member name="P:C1.Win.Interop.Thickness.Right">
            <summary>
            Gets or sets the width, of the right side of the bounding rectangle.
            </summary>
        </member>
        <member name="P:C1.Win.Interop.Thickness.Top">
            <summary>
            Gets or sets the width, of the upper side of the bounding rectangle.
            </summary>
        </member>
        <member name="T:C1.Win.C1ScrollBar.C1HScrollBar">
            <summary>
            A control that mimics the horizontal scrollbar with additional theming support.
            </summary>
        </member>
        <member name="T:C1.Win.C1ScrollBar.C1ScrollBar">
            <summary>
            A control that mimics the standard scrollbar with additional theming support.
            </summary>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.IC1ThemeControl.ThemeChanged(System.Object)">
            <summary>
            For internal use.
            </summary>
            <param name="theme"></param>
        </member>
        <member name="M:C1.Win.C1ScrollBar.C1ScrollBar.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of a C1ScrollBar.
            </summary>
        </member>
        <member name="M:C1.Win.C1ScrollBar.C1ScrollBar.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:C1.Win.C1ScrollBar.C1ScrollBar.OnScroll(System.Windows.Forms.ScrollEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1ScrollBar.C1ScrollBar.Scroll"/> event.
            </summary>
        </member>
        <member name="M:C1.Win.C1ScrollBar.C1ScrollBar.OnValueChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1ScrollBar.C1ScrollBar.ValueChanged"/> event.
            </summary>
        </member>
        <member name="M:C1.Win.C1ScrollBar.C1ScrollBar.ResetThickness">
            <summary>
            Resets the width or height of a C1ScrollBar to its default value.
            </summary>
        </member>
        <member name="M:C1.Win.C1ScrollBar.C1ScrollBar.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paints the scrollbar.
            </summary>
        </member>
        <member name="M:C1.Win.C1ScrollBar.C1ScrollBar.OnVisibleChanged(System.EventArgs)">
            <summary>
            Raises the VisibleChanged event.
            </summary>
        </member>
        <member name="M:C1.Win.C1ScrollBar.C1ScrollBar.OnSizeChanged(System.EventArgs)">
            <summary>
            Handles the size of scrollbar is changed.
            </summary>
        </member>
        <member name="M:C1.Win.C1ScrollBar.C1ScrollBar.OnEnabledChanged(System.EventArgs)">
            <summary>
            Raises the EnabledChanged event.
            </summary>
        </member>
        <member name="M:C1.Win.C1ScrollBar.C1ScrollBar.OnRightToLeftChanged(System.EventArgs)">
            <summary>
            Raises the RightToLeftChanged event.
            </summary>
        </member>
        <member name="M:C1.Win.C1ScrollBar.C1ScrollBar.GetScaledBounds(System.Drawing.Rectangle,System.Drawing.SizeF,System.Windows.Forms.BoundsSpecified)">
            <summary>
            Returns the bounds to use when the scrollbar is scaled by a specified amount.
            </summary>
        </member>
        <member name="M:C1.Win.C1ScrollBar.C1ScrollBar.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Processes Windows messages.
            </summary>
        </member>
        <member name="M:C1.Win.C1ScrollBar.C1ScrollBar.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the MouseDown event.
            </summary>
        </member>
        <member name="M:C1.Win.C1ScrollBar.C1ScrollBar.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the MouseUp event.
            </summary>
        </member>
        <member name="M:C1.Win.C1ScrollBar.C1ScrollBar.OnMouseEnter(System.EventArgs)">
            <summary>
            Raises the MouseEnter event.
            </summary>
        </member>
        <member name="M:C1.Win.C1ScrollBar.C1ScrollBar.OnMouseLeave(System.EventArgs)">
            <summary>
            Raises the MouseLeave event.
            </summary>
        </member>
        <member name="M:C1.Win.C1ScrollBar.C1ScrollBar.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the MouseMove event.
            </summary>
        </member>
        <member name="M:C1.Win.C1ScrollBar.C1ScrollBar.ThemeChanged(System.Object)">
            <summary>
            Use internal only for theming support.
            </summary>
            <param name="newTheme">The new theme to be applied.</param>
        </member>
        <member name="M:C1.Win.C1ScrollBar.C1ScrollBar.UpdateStyle(C1.Win.C1Themes.Shared.C1ThemeProxy,C1.Win.C1ScrollBar.Style.ScrollBarStyle)">
            <summary>
            Applies a C1Theme to the scrollBar.
            </summary>
        </member>
        <member name="P:C1.Win.C1ScrollBar.C1ScrollBar.Style">
            <summary>
            Gets the style object with constants, brushes, colors, and glyphs.
            </summary>
        </member>
        <member name="P:C1.Win.C1ScrollBar.C1ScrollBar.VerticalScroll">
            <summary>
            Gets a boolean value indicating whether this is a vertical scrollbar.
            </summary>
        </member>
        <member name="P:C1.Win.C1ScrollBar.C1ScrollBar.UseSystemStyle">
            <summary>
            Gets or sets a boolean value indicating whether the scrollbar should be drawn using the system style.
            </summary>
        </member>
        <member name="P:C1.Win.C1ScrollBar.C1ScrollBar.SmoothTransitions">
            <summary>
            Gets or sets a value indicating whether moving from one state to another should be animated.
            </summary>
        </member>
        <member name="P:C1.Win.C1ScrollBar.C1ScrollBar.Value">
            <summary>
            Gets or sets a numeric value that represents the current position of the scroll box.
            </summary>
        </member>
        <member name="P:C1.Win.C1ScrollBar.C1ScrollBar.Minimum">
            <summary>
            Gets or sets the lower limit of values of the scrollable range.
            </summary>
        </member>
        <member name="P:C1.Win.C1ScrollBar.C1ScrollBar.Maximum">
            <summary>
            Gets or sets the upper limit of values of the scrollable range.
            </summary>
        </member>
        <member name="P:C1.Win.C1ScrollBar.C1ScrollBar.SmallChange">
            <summary>
            Gets or sets the value to be added to or subtracted from the Value property when the scroll box is moved a small distance.
            </summary>
        </member>
        <member name="P:C1.Win.C1ScrollBar.C1ScrollBar.LargeChange">
            <summary>
            Gets or sets a value to be added to or subtracted from the Value property when the scroll box is moved a large distance.
            </summary>
        </member>
        <member name="E:C1.Win.C1ScrollBar.C1ScrollBar.Scroll">
            <summary>
            Occurs when the scroll box has been moved by a mouse.
            </summary>
        </member>
        <member name="E:C1.Win.C1ScrollBar.C1ScrollBar.ValueChanged">
            <summary>
            Occurs when the Value property is changed, either by a Scroll event or programmatically.
            </summary>
        </member>
        <member name="M:C1.Win.C1ScrollBar.C1HScrollBar.#ctor">
            <summary>
            Initializes a new instance of a C1HScrollBar.
            </summary>
        </member>
        <member name="P:C1.Win.C1ScrollBar.C1HScrollBar.DefaultSize">
            <summary>
            Gets the default Size of the scrollbar.
            </summary>
        </member>
        <member name="T:C1.Win.C1ScrollBar.C1VScrollBar">
            <summary>
            A control that mimics the vertical scrollbar with additional theming support.
            </summary>
        </member>
        <member name="M:C1.Win.C1ScrollBar.C1VScrollBar.#ctor">
            <summary>
            Initializes a new instance of a C1VScrollBar.
            </summary>
        </member>
        <member name="P:C1.Win.C1ScrollBar.C1VScrollBar.DefaultSize">
            <summary>
            Gets the default Size of the scrollbar.
            </summary>
        </member>
        <member name="T:C1.Win.C1ScrollBar.Style.ScrollBarStyle">
            <summary>
            A customizable set of appearance settings.
            </summary>
        </member>
        <member name="M:C1.Win.C1ScrollBar.Style.ScrollBarStyle.#ctor">
            <summary>
            Creates a new instance of <see cref="T:C1.Win.C1ScrollBar.Style.ScrollBarStyle"/>.
            </summary>
        </member>
        <member name="M:C1.Win.C1ScrollBar.Style.ScrollBarStyle.Dispose">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:C1.Win.C1ScrollBar.Style.ScrollBarStyle.BeginUpdate">
            <summary>
            Maintains performance while <see cref="T:C1.Win.C1ScrollBar.Style.ScrollBarStyle"/> is being changed.
            </summary>
        </member>
        <member name="M:C1.Win.C1ScrollBar.Style.ScrollBarStyle.EndUpdate">
            <summary>
            Resumes processing after it has been suspended by a call to <see cref="M:C1.Win.C1ScrollBar.Style.ScrollBarStyle.BeginUpdate"/>.
            </summary>
        </member>
        <member name="M:C1.Win.C1ScrollBar.Style.ScrollBarStyle.Refresh">
            <summary>
            Loads a predefined theme into the <see cref="T:C1.Win.C1ScrollBar.Style.ScrollBarStyle"/> object.
            </summary>
        </member>
        <member name="P:C1.Win.C1ScrollBar.Style.ScrollBarStyle.ConstSet">
            <summary>
            Gets the set of named integer constants.
            </summary>
        </member>
        <member name="P:C1.Win.C1ScrollBar.Style.ScrollBarStyle.BrushSet">
            <summary>
            Gets the set of named brushes.
            </summary>
        </member>
        <member name="P:C1.Win.C1ScrollBar.Style.ScrollBarStyle.ColorSet">
            <summary>
            Gets the set of named colors.
            </summary>
        </member>
        <member name="P:C1.Win.C1ScrollBar.Style.ScrollBarStyle.GlyphSet">
            <summary>
            Gets the set of named glyphs.
            </summary>
        </member>
        <member name="E:C1.Win.C1ScrollBar.Style.ScrollBarStyle.StyleChanged">
            <summary>
            Occurs when a <see cref="T:C1.Win.C1ScrollBar.Style.ScrollBarStyle"/> is changed. 
            </summary>
        </member>
        <member name="T:C1.Win.C1ScrollBar.Style.StyleConstSet">
            <summary>
            Represents the set of integer constants that can be referenced from style elements.
            </summary>
        </member>
        <member name="P:C1.Win.C1ScrollBar.Style.StyleConstSet.Item(C1.Win.C1ScrollBar.Style.StyleConst)">
            <summary>
            Gets or sets an integer value associated with the specified <see cref="T:C1.Win.C1ScrollBar.Style.StyleConst"/>.
            </summary>
        </member>
        <member name="T:C1.Win.C1ScrollBar.Style.StyleBrushSet">
            <summary>
            Represents the set of known brushes that can be referenced from style elements.
            </summary>
        </member>
        <member name="M:C1.Win.C1ScrollBar.Style.StyleBrushSet.GetColor(C1.Win.C1ScrollBar.Style.StyleBrush)">
            <summary>
            Gets a Color for the case of a solid brush.
            </summary>
        </member>
        <member name="M:C1.Win.C1ScrollBar.Style.StyleBrushSet.SetColor(C1.Win.C1ScrollBar.Style.StyleBrush,System.Drawing.Color)">
            <summary>
            Sets a Color associated with the specified <see cref="T:C1.Win.C1ScrollBar.Style.StyleBrush"/>.
            </summary>
        </member>
        <member name="M:C1.Win.C1ScrollBar.Style.StyleBrushSet.SetBrush(C1.Win.C1ScrollBar.Style.StyleBrush,System.Drawing.Brush)">
            <summary>
            Sets a Brush associated with the specified <see cref="T:C1.Win.C1ScrollBar.Style.StyleBrush"/>.
            </summary>
        </member>
        <member name="M:C1.Win.C1ScrollBar.Style.StyleBrushSet.GetBrush(C1.Win.C1ScrollBar.Style.StyleBrush,System.Drawing.Rectangle)">
            <summary>
            Gets a Brush associated with the specified <see cref="T:C1.Win.C1ScrollBar.Style.StyleBrush"/>.
            </summary>
        </member>
        <member name="T:C1.Win.C1ScrollBar.Style.StyleColorSet">
            <summary>
            Represents the set of known colors that can be referenced from style elements.
            </summary>
        </member>
        <member name="M:C1.Win.C1ScrollBar.Style.StyleColorSet.GetPen(C1.Win.C1ScrollBar.Style.StyleColor)">
            <summary>
            Returns a Pen associated with the specified <see cref="T:C1.Win.C1ScrollBar.Style.StyleColor"/>.
            </summary>
        </member>
        <member name="M:C1.Win.C1ScrollBar.Style.StyleColorSet.GetBrush(C1.Win.C1ScrollBar.Style.StyleColor)">
            <summary>
            Returns a Brush associated with the specified <see cref="T:C1.Win.C1ScrollBar.Style.StyleColor"/>.
            </summary>
        </member>
        <member name="P:C1.Win.C1ScrollBar.Style.StyleColorSet.Item(C1.Win.C1ScrollBar.Style.StyleColor)">
            <summary>
            Gets or sets a Color associated with the specified <see cref="T:C1.Win.C1ScrollBar.Style.StyleColor"/>.
            </summary>
        </member>
        <member name="T:C1.Win.C1ScrollBar.Style.StyleGlyphSet">
            <summary>
            Represents the set of known glyphs that can be referenced from style elements.
            </summary>
        </member>
        <member name="M:C1.Win.C1ScrollBar.Style.StyleGlyphSet.Update(C1.Win.C1ScrollBar.Style.StyleGlyph,System.Drawing.Image,System.Boolean)">
            <summary>
            Updates the image associated with the specified <see cref="T:C1.Win.C1ScrollBar.Style.StyleGlyph"/>
            and determines whether the new image can be disposed from this
            <see cref="T:C1.Win.C1ScrollBar.Style.StyleGlyphSet"/>, i.e. the glyph set owns the image.
            </summary>
        </member>
        <member name="M:C1.Win.C1ScrollBar.Style.StyleGlyphSet.GetColored(C1.Win.C1ScrollBar.Style.StyleGlyph,System.Drawing.Color)">
            <summary>
            Returns a glyph image that is drawn using the specified foreground color.
            </summary>
        </member>
        <member name="M:C1.Win.C1ScrollBar.Style.StyleGlyphSet.GetSize(C1.Win.C1ScrollBar.Style.StyleGlyph)">
            <summary>
            Returns the size of the specified glyph image.
            </summary>
        </member>
        <member name="P:C1.Win.C1ScrollBar.Style.StyleGlyphSet.Item(C1.Win.C1ScrollBar.Style.StyleGlyph)">
            <summary>
            Gets an image associated with the specified <see cref="T:C1.Win.C1ScrollBar.Style.StyleGlyph"/>.
            </summary>
        </member>
        <member name="T:C1.Win.C1ScrollBar.Style.StyleConst">
            <summary>
            Named style constants of System.Int32 type.
            </summary>
        </member>
        <member name="T:C1.Win.C1ScrollBar.Style.StyleBrush">
            <summary>
            Named style brushes.
            </summary>
        </member>
        <member name="T:C1.Win.C1ScrollBar.Style.StyleColor">
            <summary>
            Named style colors.
            </summary>
        </member>
        <member name="T:C1.Win.C1ScrollBar.Style.StyleGlyph">
            <summary>
            Named style glyphs.
            </summary>
        </member>
        <member name="T:C1.Win.C1SuperTooltip.C1SuperLabelBase">
            <summary>
            Represents a label that shows static information on a form.
            </summary>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperLabelBase.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Win.C1SuperTooltip.C1SuperLabelBase"/> control.
            </summary>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperLabelBase.OnLinkClicked(C1.Win.C1SuperTooltip.C1SuperLabelLinkClickedEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1SuperTooltip.C1SuperLabelBase.LinkClicked"/> event.
            </summary>
            <param name="e"><see cref="T:C1.Win.C1SuperTooltip.C1SuperLabelLinkClickedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperLabelBase.Measure">
            <summary>
            Measures the width and height of the control content.
            </summary>
            <returns><see cref="T:System.Drawing.Size"/> object that represents the size of the content, in pixels.</returns>
            <example>
            The code below scans all the rows in a <b>C1FlexGrid</b> and calculates the width needed
            to display the cell with the widest content:
            <code>
            int GetMaximumCellWidth(int col)
            {
              // maximum width is unknown
              int maxWidth = -1;
            
              // scan all rows to find the widest content
              for (int row = 0; row &lt; _flex.Rows.Count; row++)
              {
                // get cell content
                string text = _flex.GetDataDisplay(row, col);
            
                // check that the cell contains html
                if (!string.IsNullOrEmpty(text) &amp;&amp;
                     text.StartsWith("&lt;html&gt;"))
                {
                  // measure width needed to render the Html
                  _superLabel.Text = text;
                  int width = _superLabel.Measure().Width;
            
                  // save maximum width
                  if (width &gt; maxWidth)
                    maxWidth = width;
              }
              return maxWidth;
            }
            </code>
            </example>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperLabelBase.Measure(System.Int32)">
            <summary>
            Measures the height of the control content when rendered with a given width.
            </summary>
            <param name="width">Width used to calculate word-wrapping.</param>
            <returns><see cref="T:System.Drawing.Size"/> object that represents the size of the content, in pixels.</returns>
            <example>
            The code below scans all the columns in a <b>C1FlexGrid</b> and calculates the height needed
            to display the cell with the tallest content:
            <code>
            int GetMaximumCellHeight(int row)
            {
              // maximum height is unknown
              int maxHeight = -1;
            
              // scan all columns to find the tallest content
              for (int col = 0; col &lt; _flex.Cols.Count; col++)
              {
                // get cell content
                string text = _flex.GetDataDisplay(row, col);
            
                // check that the cell contains html
                if (!string.IsNullOrEmpty(text) &amp;&amp;
                     text.StartsWith("&lt;html&gt;"))
                {
                  // measure height needed to render the Html
                  _superLabel.Text = text;
                  int width = _flex.Cols[col].WidthDisplay;
                  int height = _superLabel.Measure(width).Height;
            
                  // save maximum height
                  if (height &gt; maxHeight)
                    maxHeight = height;
              }
              return maxHeight;
            }
            </code>
            </example>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperLabelBase.DrawToGraphics(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws the control content into a given <see cref="T:System.Drawing.Graphics"/> object.
            </summary>
            <param name="g"><see cref="T:System.Drawing.Graphics"/> object where the content will be rendered.</param>
            <param name="bounds"><see cref="T:System.Drawing.Rectangle"/> that specifies the bounds where the content will be rendered.</param>
            <example>
            The example below uses the <b>DrawToGraphics</b> method to render Html in a <b>C1FlexGrid</b> control.
            Grid cells containing text that starts with an &lt;html&gt; tag are rendered as Html. Other cells are
            rendered by the grid as usual.
            <code>
            void _flex_OwnerDrawCell(object sender, OwnerDrawCellEventArgs e)
            {
              // get cell content
              string text = _flex.GetDataDisplay(e.Row, e.Col);
            
              // check that the cell contains html
              if (!string.IsNullOrEmpty(text) &amp;&amp;
                   text.StartsWith("&lt;html&gt;"))
              {
                // set label back color and content
                _superLabel.BackColor = e.Style.BackColor;
                _superLabel.Text = text;
            
                // draw the Html into grid cell
                _superLabel.DrawToGraphics(e.Graphics, e.Bounds);
            
                // cell has been drawn
                e.Handled = true;
              }
            }
            </code>
            </example>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperLabelBase.DrawToGraphics(System.Drawing.Graphics,System.Drawing.RectangleF,System.Int32)">
            <summary>
            Draws an HTML string in the specified rectangle with the specified <see cref="T:System.Drawing.Brush"/> and <see cref="T:System.Drawing.Font"/> objects,
            starting at a given offset within the string.
            </summary>
            <param name="g"><see cref="T:System.Drawing.Graphics"/> object where the content will be rendered.</param>
            <param name="bounds"><see cref="T:System.Drawing.Rectangle"/> that specifies the bounds where the content will be rendered.</param>
            <param name="offset">Offset of the first line to draw (usually the return value of a previous call to <b>DrawStringHtml</b>).</param>
            <returns>The offset of the first line that was not printed because it did not fit in the specified rectangle, or the value of 
            <see cref="F:System.Int32.MaxValue"/> if the entire string was rendered.</returns>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperLabelBase.GetInnerElement">
            <summary>
            This method is intended for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperLabelBase.OnRightToLeftChanged(System.EventArgs)">
            <summary>
            Update internal style when RightToLeft property changes.
            </summary>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperLabelBase.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.Paint"/> event.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperLabelBase.ProcessMnemonic(System.Char)">
            <summary>
            Processes a mnemonic character.
            </summary>
            <param name="charCode">The character to process. </param>
            <returns>True if the character was processed as a mnemonic by the control; otherwise, false.</returns>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperLabelBase.OnTextChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.TextChanged"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperLabelBase.OnBackColorChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.BackColorChanged"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperLabelBase.OnForeColorChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.ForeColorChanged"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperLabelBase.OnFontChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.FontChanged"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperLabelBase.OnSizeChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.SizeChanged"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperLabelBase.OnPaddingChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.PaddingChanged"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperLabelBase.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.MouseDown"/> event.
            </summary>
            <param name="e"><see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperLabelBase.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.MouseMove"/> event.
            </summary>
            <param name="e"><see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperLabelBase.OnCursorChanged(System.EventArgs)">
            <summary>
            Occurs when the value of the <see cref="T:System.Windows.Forms.Cursor"/> property changes. 
            </summary>
            <param name="e"><see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperLabelBase.Dispose(System.Boolean)">
            <summary>
            Releases resources used by the component
            </summary>
            <param name="disposing">True to release all resources; false to release unmanaged resources only.</param>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperLabelBase.GetOrCreateStyle">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperLabelBase.ApplyStyle(C1.Framework.Style)">
            <summary>
            Recreates HTML element using the specified style and UseMnemonic value,
            re-parses the text.
            </summary>
            <param name="style">The style to apply.</param>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperLabelBase.UpdateText">
            <summary>
            Parses the Text property into Html.
            </summary>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperLabelBase.UpdateControlSize">
            <summary>
            Handles auto-sizing when necessary.
            </summary>
        </member>
        <member name="E:C1.Win.C1SuperTooltip.C1SuperLabelBase.LinkClicked">
            <summary>
            Event that fires when the user clicks a hyperlink within a <see cref="T:C1.Win.C1SuperTooltip.C1SuperLabelBase"/> control.
            </summary>
            <remarks>
            Hyperlinks are created using "A" tags in the HTML source text. When hyperlinks are clicked,
            the <b>LinkClicked</b> event fires and provides information about the link. The event handler
            can then take appropriate action.
            </remarks>
            <example>
            The example below creates some hyperlinks using "A" tags. When the user clicks the link, the
            event handler shows a message box.
            <code>
            // configure c1superLabel
            c1superLabel.AutoSize = true;
            c1superLabel.Text =
                "click &lt;a href='about'&gt;&lt;b&gt;HERE&lt;/b&gt;&lt;/a&gt; to see an about box.&lt;br&gt;" +
                "or click &lt;a href='time'&gt;&lt;b&gt;HERE&lt;/b&gt;&lt;/a&gt; to see the current time.";
            
            // attach event handler
            c1superLabel.LinkClicked += new C1SuperLabelLinkClickedEventHandler(c1superLabel_LinkClicked);
            // ...
            
            void c1superLabel_LinkClicked(object sender, C1SuperLabelLinkClickedEventArgs e)
            {
              if (e.HRef == "about")
              {
                MessageBox.Show("About C1SuperLabel!");
              }
              else if (e.HRef == "time")
              {
                MessageBox.Show("The time is " + DateTime.Now.ToShortTimeString());
              }
            }
            </code>
            </example>
        </member>
        <member name="P:C1.Win.C1SuperTooltip.C1SuperLabelBase.BorderStyle">
            <summary>
            Gets or sets the type of border around the control.
            </summary>
        </member>
        <member name="P:C1.Win.C1SuperTooltip.C1SuperLabelBase.Images">
            <summary>
            Gets a collection of images that may be shown in the label.
            </summary>
        </member>
        <member name="P:C1.Win.C1SuperTooltip.C1SuperLabelBase.UseMnemonic">
            <summary>
            Gets or sets whether ampersands (&amp;) are used to indicate the next character is a hot key.
            </summary>
        </member>
        <member name="P:C1.Win.C1SuperTooltip.C1SuperLabelBase.AutoSize">
            <summary>
            Gets or sets a value indicating whether the control is automatically resized to display its entire contents. 
            </summary>
        </member>
        <member name="P:C1.Win.C1SuperTooltip.C1SuperLabelBase.BackgroundImageLayout">
            <summary>
            Gets or sets the background image layout as defined in the <see cref="P:C1.Win.C1SuperTooltip.C1SuperLabelBase.BackgroundImageLayout"/> enumeration. 
            </summary>
        </member>
        <member name="P:C1.Win.C1SuperTooltip.C1SuperLabelBase.BackgroundImage">
            <summary>
            Gets or sets the background image displayed in the control. 
            </summary>
        </member>
        <member name="P:C1.Win.C1SuperTooltip.C1SuperLabelBase.CreateParams">
            <summary>
            Gets the required creation parameters when the control handle is created.
            </summary>
        </member>
        <member name="T:C1.Win.C1SuperTooltip.C1SuperLabelLinkClickedEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:C1.Win.C1SuperTooltip.C1SuperLabelBase.LinkClicked"/> event.
            </summary>
            <param name="sender">Object that fired the event.</param>
            <param name="e"><see cref="T:System.Windows.Forms.LinkClickedEventArgs"/> object that contains the event data.</param>
        </member>
        <member name="T:C1.Win.C1SuperTooltip.C1SuperLabelLinkClickedEventArgs">
            <summary>
            Provides data for the <see cref="E:C1.Win.C1SuperTooltip.C1SuperLabelBase.LinkClicked"/> event.
            </summary>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperLabelLinkClickedEventArgs.#ctor(System.Windows.Forms.MouseButtons,System.String,System.String)">
            <summary>
            Initializes a new instance of a <see cref="T:System.Windows.Forms.LinkClickedEventArgs"/>.
            </summary>
            <param name="button"><see cref="T:System.Windows.Forms.MouseButtons"/> that was pressed on the link.</param>
            <param name="hRef">Value of the link's HREF attribute.</param>
            <param name="target">Value of the link's TARGET attribute.</param>
        </member>
        <member name="P:C1.Win.C1SuperTooltip.C1SuperLabelLinkClickedEventArgs.Button">
            <summary>
            Gets the button that was clicked on the link.
            </summary>
        </member>
        <member name="P:C1.Win.C1SuperTooltip.C1SuperLabelLinkClickedEventArgs.HRef">
            <summary>
            Gets the value of the link's HREF attribute.
            </summary>
        </member>
        <member name="P:C1.Win.C1SuperTooltip.C1SuperLabelLinkClickedEventArgs.Target">
            <summary>
            Gets the value of the link's TARGET attribute.
            </summary>
        </member>
        <member name="T:C1.Win.C1SuperTooltip.BackgroundGradient">
            <summary>
            Specifies a background gradient for the ToolTip.
            </summary>
        </member>
        <member name="F:C1.Win.C1SuperTooltip.BackgroundGradient.None">
            <summary>
            Use no background gradient.
            </summary>
        </member>
        <member name="F:C1.Win.C1SuperTooltip.BackgroundGradient.Automatic">
            <summary>
            Use a gradient that matches the current system Visual Style.
            </summary>
        </member>
        <member name="F:C1.Win.C1SuperTooltip.BackgroundGradient.Silver">
            <summary>
            Use a silver background gradient.
            </summary>
        </member>
        <member name="F:C1.Win.C1SuperTooltip.BackgroundGradient.Blue">
            <summary>
            Use a blue background gradient.
            </summary>
        </member>
        <member name="F:C1.Win.C1SuperTooltip.BackgroundGradient.Gold">
            <summary>
            Use a gold background gradient.
            </summary>
        </member>
        <member name="F:C1.Win.C1SuperTooltip.BackgroundGradient.Olive">
            <summary>
            Use an olive background gradient.
            </summary>
        </member>
        <member name="F:C1.Win.C1SuperTooltip.BackgroundGradient.Vista">
            <summary>
            Use the Vista-style background gradient.
            </summary>
        </member>
        <member name="T:C1.Win.C1SuperTooltip.BackgroundImageLayout">
            <summary>
            Specifies the layout logic used to display the background image.
            </summary>
        </member>
        <member name="F:C1.Win.C1SuperTooltip.BackgroundImageLayout.None">
            <summary>
            The image is left-aligned at the top across the control's client rectangle.
            </summary>
        </member>
        <member name="F:C1.Win.C1SuperTooltip.BackgroundImageLayout.Tile">
            <summary>
            The image is tiled across the control's client rectangle.
            </summary>
        </member>
        <member name="F:C1.Win.C1SuperTooltip.BackgroundImageLayout.Center">
            <summary>
            The image is centered within the control's client rectangle.
            </summary>
        </member>
        <member name="F:C1.Win.C1SuperTooltip.BackgroundImageLayout.Stretch">
            <summary>
            The image is stretched across the control's client rectangle. 
            </summary>
        </member>
        <member name="F:C1.Win.C1SuperTooltip.BackgroundImageLayout.Zoom">
            <summary>
            The image is enlarged within the control's client rectangle.
            </summary>
        </member>
        <member name="F:C1.Win.C1SuperTooltip.BackgroundImageLayout.TileStretch">
            <summary>
            The image is split into nine pieces and tiled within the control's client rectangle.
            Center tiles are stretched, corner tiles are rendered with the original size.
            </summary>
        </member>
        <member name="T:C1.Win.C1SuperTooltip.C1SuperTooltipBase">
            <summary>
            Represents a pop-up window that displays a brief description of a control's purpose 
            when the mouse hovers over the control.
            </summary>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperTooltipBase.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Win.C1SuperTooltip.C1SuperTooltipBase"/> component.
            </summary>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperTooltipBase.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperTooltipBase.ShouldSerializeAutoPopDelay">
            <summary>
            Gets a value that determines whether the <see cref="P:C1.Win.C1SuperTooltip.C1SuperTooltipBase.AutoPopDelay"/> property should be serialized.
            </summary>
            <returns>True if the current value is different from the default (10 * <see cref="P:C1.Win.C1SuperTooltip.C1SuperTooltipBase.AutomaticDelay"/>).</returns>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperTooltipBase.ShouldSerializeInitialDelay">
            <summary>
            Gets a value that determines whether the <see cref="P:C1.Win.C1SuperTooltip.C1SuperTooltipBase.InitialDelay"/> property should be serialized.
            </summary>
            <returns>True if the current value is different from the default (<see cref="P:C1.Win.C1SuperTooltip.C1SuperTooltipBase.AutomaticDelay"/>).</returns>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperTooltipBase.ShouldSerializeReshowDelay">
            <summary>
            Gets a value that determines whether the <see cref="P:C1.Win.C1SuperTooltip.C1SuperTooltipBase.ReshowDelay"/> property should be serialized.
            </summary>
            <returns>True if the current value is different from the default (<see cref="P:C1.Win.C1SuperTooltip.C1SuperTooltipBase.AutomaticDelay"/> / 5).</returns>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperTooltipBase.GetToolTipInt(System.Windows.Forms.Control)">
            <summary>
            Retrieves the <see cref="T:C1.Win.C1SuperTooltip.C1SuperTooltipBase"/> text associated with the specified control.
            </summary>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperTooltipBase.GetToolTipInt(System.Windows.Forms.ToolStripItem)">
            <summary>
            Retrieves the <see cref="T:C1.Win.C1SuperTooltip.C1SuperTooltipBase"/> text associated with the specified <see cref="T:System.Windows.Forms.ToolStripItem"/> component.
            </summary>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperTooltipBase.SetToolTipInt(System.Windows.Forms.Control,System.String)">
            <summary>
            Associates tooltip HTML text with the specified control.
            </summary>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperTooltipBase.SetToolTipInt(System.Windows.Forms.ToolStripItem,System.String)">
            <summary>
            Associates tooltip HTML text with the specified <see cref="T:System.Windows.Forms.ToolStripItem"/>.
            </summary>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperTooltipBase.RemoveAll">
            <summary>
            Removes all tooltip text currently associated with the <see cref="T:C1.Win.C1SuperTooltip.C1SuperTooltipBase"/> component.
            </summary>
            <remarks>
            You can use this method to remove all tooltip text that is associated with the 
            <see cref="T:C1.Win.C1SuperTooltip.C1SuperTooltipBase"/> component. To disable the display of text instead of removing all 
            tooltip text from the <b>C1SuperTooltip</b> control, use the <see cref="P:C1.Win.C1SuperTooltip.C1SuperTooltipBase.Active"/> property.
            </remarks>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperTooltipBase.GetPublicRtl">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperTooltipBase.OnPopup(C1.Win.C1SuperTooltip.PopupEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1SuperTooltip.C1SuperTooltipBase.Popup"/> event.
            </summary>
            <param name="e"><see cref="T:C1.Win.C1SuperTooltip.PopupEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperTooltipBase.OnLinkClicked(C1.Win.C1SuperTooltip.C1SuperLabelLinkClickedEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1SuperTooltip.C1SuperTooltipBase.LinkClicked"/> event.
            </summary>
            <param name="e"><see cref="T:C1.Win.C1SuperTooltip.C1SuperLabelLinkClickedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperTooltipBase.Show(System.String,System.Windows.Forms.Control,System.Drawing.Point,System.Int32)">
            <summary>
            Shows the tooltip with the specified text, for the specified control, at the specified position, for a specified amount of time.
            </summary>
            <param name="text">Text to be displayed in the tooltip.</param>
            <param name="control"><see cref="T:System.Windows.Forms.Control"/> that the tooltip is associated with.</param>
            <param name="pt"><see cref="T:System.Drawing.Point"/> in client coordinates where the tooltip is to be displayed.</param>
            <param name="duration">Duration of the tooltip, in milliseconds.</param>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperTooltipBase.Show(System.String,System.Windows.Forms.Control,System.Int32,System.Int32,System.Int32)">
            <summary>
            Shows the tooltip with the specified text, for the specified control, at the specified position, for a specified amount of time.
            </summary>
            <param name="text">Text to be displayed in the tooltip.</param>
            <param name="control"><see cref="T:System.Windows.Forms.Control"/> that the tooltip is associated with.</param>
            <param name="x">X client coordinate where the tooltip is to be displayed.</param>
            <param name="y">Y client coordinate where the tooltip is to be displayed.</param>
            <param name="duration">Duration of the tooltip, in milliseconds.</param>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperTooltipBase.Show(System.String,System.Windows.Forms.Control,System.Int32)">
            <summary>
            Shows the tooltip with the specified text, for the specified control, for a specified amount of time.
            </summary>
            <param name="text">Text to be displayed in the tooltip.</param>
            <param name="control"><see cref="T:System.Windows.Forms.Control"/> that the tooltip is associated with.</param>
            <param name="duration">Duration of the tooltip, in milliseconds.</param>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperTooltipBase.Show(System.String,System.Windows.Forms.Control,System.Drawing.Point)">
            <summary>
            Shows the tooltip with the specified text, for the specified control, at the specified position.
            </summary>
            <param name="text">Text to be displayed in the tooltip.</param>
            <param name="control"><see cref="T:System.Windows.Forms.Control"/> that the tooltip is associated with.</param>
            <param name="pt"><see cref="T:System.Drawing.Point"/> in client coordinates where the tooltip is to be displayed.</param>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperTooltipBase.Show(System.String,System.Windows.Forms.Control,System.Int32,System.Int32)">
            <summary>
            Shows the tooltip with the specified text, for the specified control, at the specified position.
            </summary>
            <param name="text">Text to be displayed in the tooltip.</param>
            <param name="control"><see cref="T:System.Windows.Forms.Control"/> that the tooltip is associated with.</param>
            <param name="x">X client coordinate where the tooltip is to be displayed.</param>
            <param name="y">Y client coordinate where the tooltip is to be displayed.</param>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperTooltipBase.Show(System.String,System.Windows.Forms.Control)">
            <summary>
            Shows the tooltip with the specified text for the specified control.
            </summary>
            <param name="text">Text to be displayed in the tooltip.</param>
            <param name="control"><see cref="T:System.Windows.Forms.Control"/> that the tooltip is associated with.</param>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperTooltipBase.Hide">
            <summary>
            Hides the <see cref="T:C1.Win.C1SuperTooltip.C1SuperTooltipBase"/> if it is currently visible.
            </summary>
            <remarks>
            This method does not disable or otherwise prevent the tooltip from being displayed in the future.
            To do that, set the <see cref="P:C1.Win.C1SuperTooltip.C1SuperTooltipBase.Active"/> property to false instead.
            </remarks>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperTooltipBase.Hide(System.Windows.Forms.Control)">
            <summary>
            Hides the <see cref="T:C1.Win.C1SuperTooltip.C1SuperTooltipBase"/> if it is currently visible.
            </summary>
            <param name="control">The <see cref="T:System.Windows.Forms.Control"/> that the <see cref="T:C1.Win.C1SuperTooltip.C1SuperTooltipBase"/> is associated with.</param>
            <remarks>
            This method does not disable or otherwise prevent the tooltip from being displayed in the future.
            To do that, set the <see cref="P:C1.Win.C1SuperTooltip.C1SuperTooltipBase.Active"/> property to false instead.
            </remarks>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperTooltipBase.Show(System.String,System.Windows.Forms.ToolStripItem,System.Drawing.Point,System.Int32)">
            <summary>
            Shows the tooltip with the specified text, for the specified <see cref="T:System.Windows.Forms.ToolStripItem"/>, at the specified position, for a specified amount of time.
            </summary>
            <param name="text">Text to be displayed in the tooltip.</param>
            <param name="item"><see cref="T:System.Windows.Forms.ToolStripItem"/> that the tooltip is associated with.</param>
            <param name="pt"><see cref="T:System.Drawing.Point"/> in client coordinates where the tooltip is to be displayed.</param>
            <param name="duration">Duration of the tooltip, in milliseconds.</param>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperTooltipBase.Show(System.String,System.Windows.Forms.ToolStripItem,System.Int32,System.Int32,System.Int32)">
            <summary>
            Shows the tooltip with the specified text, for the specified <see cref="T:System.Windows.Forms.ToolStripItem"/>, at the specified position, for a specified amount of time.
            </summary>
            <param name="text">Text to be displayed in the tooltip.</param>
            <param name="item"><see cref="T:System.Windows.Forms.ToolStripItem"/> that the tooltip is associated with.</param>
            <param name="x">X client coordinate where the tooltip is to be displayed.</param>
            <param name="y">Y client coordinate where the tooltip is to be displayed.</param>
            <param name="duration">Duration of the tooltip, in milliseconds.</param>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperTooltipBase.Show(System.String,System.Windows.Forms.ToolStripItem,System.Int32)">
            <summary>
            Shows the tooltip with the specified text, for the specified <see cref="T:System.Windows.Forms.ToolStripItem"/>, for a specified amount of time.
            </summary>
            <param name="text">Text to be displayed in the tooltip.</param>
            <param name="item"><see cref="T:System.Windows.Forms.ToolStripItem"/> that the tooltip is associated with.</param>
            <param name="duration">Duration of the tooltip, in milliseconds.</param>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperTooltipBase.Show(System.String,System.Windows.Forms.ToolStripItem,System.Drawing.Point)">
            <summary>
            Shows the tooltip with the specified text, for the specified <see cref="T:System.Windows.Forms.ToolStripItem"/>, at the specified position.
            </summary>
            <param name="text">Text to be displayed in the tooltip.</param>
            <param name="item"><see cref="T:System.Windows.Forms.ToolStripItem"/> that the tooltip is associated with.</param>
            <param name="pt"><see cref="T:System.Drawing.Point"/> in client coordinates where the tooltip is to be displayed.</param>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperTooltipBase.Show(System.String,System.Windows.Forms.ToolStripItem,System.Int32,System.Int32)">
            <summary>
            Shows the tooltip with the specified text, for the specified <see cref="T:System.Windows.Forms.ToolStripItem"/>, at the specified position.
            </summary>
            <param name="text">Text to be displayed in the tooltip.</param>
            <param name="item"><see cref="T:System.Windows.Forms.ToolStripItem"/> that the tooltip is associated with.</param>
            <param name="x">X client coordinate where the tooltip is to be displayed.</param>
            <param name="y">Y client coordinate where the tooltip is to be displayed.</param>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperTooltipBase.Show(System.String,System.Windows.Forms.ToolStripItem)">
            <summary>
            Shows the tooltip with the specified text for the specified <see cref="T:System.Windows.Forms.ToolStripItem"/>.
            </summary>
            <param name="text">Text to be displayed in the tooltip.</param>
            <param name="item"><see cref="T:System.Windows.Forms.ToolStripItem"/> that the tooltip is associated with.</param>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperTooltipBase.Hide(System.Windows.Forms.ToolStripItem)">
            <summary>
            Hides the <see cref="T:C1.Win.C1SuperTooltip.C1SuperTooltipBase"/> if it is currently visible.
            </summary>
            <param name="item"><see cref="T:System.Windows.Forms.ToolStripItem"/> that the tooltip is associated with.</param>
            <remarks>
            This method does not disable or otherwise prevent the tooltip from being displayed in the future.
            To do that, set the <see cref="P:C1.Win.C1SuperTooltip.C1SuperTooltipBase.Active"/> property to false instead.
            </remarks>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperTooltipBase.GetOrCreateStyle">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperTooltipBase.ApplyStyle(C1.Framework.Style)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperTooltipBase.GetGradientImage(C1.Win.C1SuperTooltip.BackgroundGradient)">
            <summary>
            This method is intended for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.C1SuperTooltipBase.IsTooltipWindow(System.Windows.Forms.Control)">
            <summary>
            This method is intended for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1SuperTooltip.C1SuperTooltipBase.Active">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:C1.Win.C1SuperTooltip.C1SuperTooltipBase"/> is currently active.
            </summary>
            <remarks>
            <para>This property allows you to enable or disable the display of <see cref="T:C1.Win.C1SuperTooltip.C1SuperTooltipBase"/> 
            text for all controls that have text specified in this particular <b>C1SuperTooltip</b>. 
            More than one <b>C1SuperTooltip</b> can be created and assigned to a form; setting the 
            <b>Active</b> property to false only affects the specified <b>C1SuperTooltip</b>.</para>
            <para>You can allow users to set the value of this property in a form that provides 
            application options to provide the ability for the user to enable or disable the display 
            of <b>C1SuperTooltips</b> in your application.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1SuperTooltip.C1SuperTooltipBase.AutomaticDelay">
            <summary>
            Gets or sets the automatic delay for the <see cref="T:C1.Win.C1SuperTooltip.C1SuperTooltipBase"/>.
            </summary>
            <remarks>
            <para>The <b>AutomaticDelay</b> property enables you to set a single delay value which 
            is then used to set the values of the <see cref="P:C1.Win.C1SuperTooltip.C1SuperTooltipBase.AutoPopDelay"/>, <see cref="P:C1.Win.C1SuperTooltip.C1SuperTooltipBase.InitialDelay"/>, 
            and <see cref="P:C1.Win.C1SuperTooltip.C1SuperTooltipBase.ReshowDelay"/> properties. Each time the <b>AutomaticDelay</b> property is set, 
            the following values are set by default.</para>
            <para><b>AutoPopDelay</b>: 10 times the <b>AutomaticDelay</b> property value.</para>
            <para><b>InitialDelay</b>: Equal to the <b>AutomaticDelay</b> property value.</para>
            <para><b>ReshowDelay</b>: 1/5 of the <b>AutomaticDelay</b> property value.</para>
            <para>These properties can also be set independently once the AutomaticDelay property has been set. 
            For more information, see the <see cref="P:C1.Win.C1SuperTooltip.C1SuperTooltipBase.AutoPopDelay"/>, <see cref="P:C1.Win.C1SuperTooltip.C1SuperTooltipBase.InitialDelay"/>, and 
            <see cref="P:C1.Win.C1SuperTooltip.C1SuperTooltipBase.ReshowDelay"/> properties. This property is typically used to provide a consistent 
            delay pattern for your <see cref="T:C1.Win.C1SuperTooltip.C1SuperTooltipBase"/> windows.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1SuperTooltip.C1SuperTooltipBase.AutoPopDelay">
            <summary>
            Gets or sets the period of time (in milliseconds) the tooltip remains visible if the 
            mouse pointer is stationary within a control.
            </summary>
            <remarks>
            <para>This property enables you to shorten or lengthen the time that the <see cref="T:C1.Win.C1SuperTooltip.C1SuperTooltipBase"/> 
            window is displayed when the mouse pointer is over a control. For example, if you display 
            extensive help in a <b>C1SuperTooltip</b> window, you can increase the value of this property 
            to ensure that the user has sufficient time to read the text.</para>
            <para>If you want to have a consistent delay pattern for your <b>C1SuperTooltip</b> windows, 
            you can set the <see cref="P:C1.Win.C1SuperTooltip.C1SuperTooltipBase.AutomaticDelay"/> property. The <b>AutomaticDelay</b> property 
            sets the <b>AutoPopDelay</b>, <see cref="P:C1.Win.C1SuperTooltip.C1SuperTooltipBase.ReshowDelay"/>, and <see cref="P:C1.Win.C1SuperTooltip.C1SuperTooltipBase.InitialDelay"/> 
            properties to initial values based on a single value. Every time the <see cref="P:C1.Win.C1SuperTooltip.C1SuperTooltipBase.AutomaticDelay"/> 
            property is set, the <b>AutoPopDelay</b> property is set to 10 times the <b>AutomaticDelay</b>
            property value. Once the <b>AutomaticDelay</b> property is set, you can independently 
            set the <b>AutoPopDelay</b> property, overriding the default value.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1SuperTooltip.C1SuperTooltipBase.ShowAlways">
            <summary>
            Gets or sets a value indicating whether a <see cref="T:C1.Win.C1SuperTooltip.C1SuperTooltipBase"/> window is displayed even 
            when its parent control is not active.
            </summary>
            <remarks>
            
            <para>This property enables you to display a <b>C1SuperTooltip</b> window even when the container 
            of the tooltip is not active.</para>
            
            <para>You can use this feature in a modeless window application to enable <b>C1SuperTooltip</b>
            windows to be displayed regardless of which modeless window is active. This feature is also 
            useful when creating a control using the <b>UserControl</b> that contains a number of 
            controls that display tooltips. Since the <b>UserControl</b> is often not the active 
            window on a form, setting this property to true enables the controls within the 
            <b>UserControl</b> to display <see cref="T:C1.Win.C1SuperTooltip.C1SuperTooltipBase"/> windows at any time.</para>
            
            </remarks>
        </member>
        <member name="P:C1.Win.C1SuperTooltip.C1SuperTooltipBase.InitialDelay">
            <summary>
            Gets or sets the time that passes before the tooltip appears.
            </summary>
            <remarks>
            <para>This property enables you to shorten or lengthen the time that the <see cref="T:C1.Win.C1SuperTooltip.C1SuperTooltipBase"/> 
            waits before displaying a tooltip window. If the value of the <see cref="P:C1.Win.C1SuperTooltip.C1SuperTooltipBase.InitialDelay"/> 
            property is set to a value that is too long in duration, the user of your application 
            may not know that your application provides <b>C1SuperTooltip</b> help. You can use this 
            property to ensure that the user has tooltips displayed quickly by shortening the time 
            specified.</para>
            <para>If you want to have a consistent delay pattern for your <see cref="T:C1.Win.C1SuperTooltip.C1SuperTooltipBase"/> windows,
            you can set the <see cref="P:C1.Win.C1SuperTooltip.C1SuperTooltipBase.AutomaticDelay"/> property. The <b>AutomaticDelay</b> property sets the 
            <see cref="P:C1.Win.C1SuperTooltip.C1SuperTooltipBase.AutoPopDelay"/>, <see cref="P:C1.Win.C1SuperTooltip.C1SuperTooltipBase.ReshowDelay"/>, and <b>InitialDelay</b> properties 
            to initial values based on a single time value. Every time the <b>AutomaticDelay</b> property 
            is set, the <b>InitialDelay</b> property is set to the same value as the <b>AutomaticDelay</b>
            property. Once the <b>AutomaticDelay</b> property is set, you can independently set the 
            <b>InitialDelay</b> property, overriding the default value.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1SuperTooltip.C1SuperTooltipBase.ReshowDelay">
            <summary>
            Gets or sets the length of time that must transpire before subsequent <see cref="T:C1.Win.C1SuperTooltip.C1SuperTooltipBase"/> windows appear 
            as the mouse pointer moves from one control to another.
            </summary>
            <remarks>
            <para>This property enables you to shorten or lengthen the time that the <b>C1SuperTooltip</b> 
            waits before displaying a tooltip window after a previous tooltip window is displayed. 
            The first time a tooltip window is displayed the value of the <see cref="P:C1.Win.C1SuperTooltip.C1SuperTooltipBase.InitialDelay"/> 
            property is used to determine the delay to apply before initially showing the tooltip 
            window. When a tooltip window is currently being displayed and the user moves the cursor 
            to another control that displays a tooltip window, the value of the <see cref="P:C1.Win.C1SuperTooltip.C1SuperTooltipBase.ReshowDelay"/> 
            property is used before showing the tooltip for the new control. The tooltip window from 
            the previous control must still be displayed in order for the delay specified in the 
            <b>ReshowDelay</b> property to be used; otherwise the <see cref="P:C1.Win.C1SuperTooltip.C1SuperTooltipBase.InitialDelay"/> property 
            value is used.</para>
            <para>If you want to have a consistent delay pattern for your <see cref="T:C1.Win.C1SuperTooltip.C1SuperTooltipBase"/> windows,
            you can set the <see cref="P:C1.Win.C1SuperTooltip.C1SuperTooltipBase.AutomaticDelay"/> property. The <b>AutomaticDelay</b> property sets the 
            <see cref="P:C1.Win.C1SuperTooltip.C1SuperTooltipBase.AutoPopDelay"/>, <b>ReshowDelay</b>, and <see cref="P:C1.Win.C1SuperTooltip.C1SuperTooltipBase.InitialDelay"/> properties 
            to initial values based on a single time value. Every time the <b>AutomaticDelay</b> property 
            is set, the <b>InitialDelay</b> property is set to the same value as the <b>AutomaticDelay</b>
            property. Once the <b>AutomaticDelay</b> property is set, you can independently set the 
            <b>InitialDelay</b> property, overriding the default value.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1SuperTooltip.C1SuperTooltipBase.BackColor">
            <summary>
            Gets or sets the background color of the tooltip window.
            </summary>
        </member>
        <member name="P:C1.Win.C1SuperTooltip.C1SuperTooltipBase.ForeColor">
            <summary>
            Gets or sets the foreground color of the tooltip window.
            </summary>
        </member>
        <member name="P:C1.Win.C1SuperTooltip.C1SuperTooltipBase.Font">
            <summary>
            Gets or sets the default font used to display the tooltip.
            </summary>
        </member>
        <member name="P:C1.Win.C1SuperTooltip.C1SuperTooltipBase.Shadow">
            <summary>
            Gets or sets whether the tooltip window should display a shadow.
            </summary>
        </member>
        <member name="P:C1.Win.C1SuperTooltip.C1SuperTooltipBase.Border">
            <summary>
            Gets or sets whether the tooltip window should display a solid border.
            </summary>
        </member>
        <member name="P:C1.Win.C1SuperTooltip.C1SuperTooltipBase.BorderColor">
            <summary>
            Gets or sets whether the color of the border drawn around the tooltip when the <see cref="P:C1.Win.C1SuperTooltip.C1SuperTooltipBase.Border"/> property is set to true.
            </summary>
        </member>
        <member name="P:C1.Win.C1SuperTooltip.C1SuperTooltipBase.BackgroundImage">
            <summary>
            Gets or sets the background image displayed in tooltip window.
            </summary>
        </member>
        <member name="P:C1.Win.C1SuperTooltip.C1SuperTooltipBase.BackgroundImageLayout">
            <summary>
            Gets or sets the background image layout as defined in the <see cref="P:C1.Win.C1SuperTooltip.C1SuperTooltipBase.BackgroundImageLayout"/> enumeration.
            </summary>
        </member>
        <member name="P:C1.Win.C1SuperTooltip.C1SuperTooltipBase.IsBalloon">
            <summary>
            Gets or sets whether the tooltip is shown in a balloon shape.
            </summary>
        </member>
        <member name="P:C1.Win.C1SuperTooltip.C1SuperTooltipBase.RoundedCorners">
            <summary>
            Gets or sets whether the tooltip window has rounded corners.
            </summary>
            <remarks>
            This property has no effect if <see cref="P:C1.Win.C1SuperTooltip.C1SuperTooltipBase.IsBalloon"/> is set to true.
            </remarks>
        </member>
        <member name="P:C1.Win.C1SuperTooltip.C1SuperTooltipBase.StripAmpersands">
            <summary>
            Gets or sets whether ampersands in the text should be hidden.
            </summary>
            <remarks>
            Ampersands should be encoded in HTML as '&amp;amp;' or '&amp;#38;'.
            Ampersands that are not properly encoded will not be hidden.
            </remarks>
        </member>
        <member name="P:C1.Win.C1SuperTooltip.C1SuperTooltipBase.UseFading">
            <summary>
            Gets or sets whether a fade effect should be used when displaying the tooltip.
            </summary>
        </member>
        <member name="P:C1.Win.C1SuperTooltip.C1SuperTooltipBase.Images">
            <summary>
            Gets a collection of images that may be shown in tooltips.
            </summary>
        </member>
        <member name="P:C1.Win.C1SuperTooltip.C1SuperTooltipBase.BackgroundGradient">
            <summary>
            Gets or sets the background gradient for the tooltips.
            </summary>
            <remarks>
            <para>When the <b>BackgroundGradient</b> is set to a value other than none, the gradient
            is used instead of the image specified by the <see cref="P:C1.Win.C1SuperTooltip.C1SuperTooltipBase.BackgroundImage"/> property.</para>
            <para>If you want to use a gradient different from the built-in ones, create an image
            and assign it to the <see cref="P:C1.Win.C1SuperTooltip.C1SuperTooltipBase.BackgroundImage"/> property.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1SuperTooltip.C1SuperTooltipBase.MaximumWidth">
            <summary>
            Gets or sets the maximum width of the tooltips.
            </summary>
            <remarks>
            <para>The <see cref="T:C1.Win.C1SuperTooltip.C1SuperTooltipBase"/> displays Html text. If the tip contains a lot
            of text without Html tags that cause line breaks (such as &lt;br&gt; or &lt;p&gt;
            for example), then the text will not wrap and the tooltip window may be too wide.</para>
            <para>Use this property to force text to wrap within the tooltip so it fits in the
            given width, even without Html line break tags.</para>
            <para>Values less than or equal to zero disable the property and cause the tip text 
            to wrap only at the specified Html break tags.</para>
            <example>
            The code below forces all super tooltips to be less than or equal to 200 pixels 
            wide.
            <code>
            c1SuperTooltip1.MaximumWidth = 200;
            </code>
            </example>
            </remarks>
        </member>
        <member name="P:C1.Win.C1SuperTooltip.C1SuperTooltipBase.Opacity">
            <summary>
            Gets or sets the opacity of the tooltips.
            </summary>
            <remarks>
            This property should be set to a value between zero (totally transparent)
            and one (totally opaque).
            </remarks>
        </member>
        <member name="P:C1.Win.C1SuperTooltip.C1SuperTooltipBase.HitTestVisible">
            <summary>
            Gets or sets a value that determines whether the tooltip can be clicked.
            </summary>
            <remarks>
            <para>This property is set to false by default, so the tooltip is invisible to 
            the mouse. All mouse events are passed on to the control under the tooltip.</para>
            <para>Set this property to true if you want to add clickable areas to the tooltip, 
            such as hyperlinks. In this case, the tooltip becomes visible to the mouse handles
            the mouse events itself instead of passing them to the control under the tooltip.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1SuperTooltip.C1SuperTooltipBase.Rtl">
            <summary>
            Gets or sets a value indicating if the tooltip should be displayed in right-to-left mode.
            </summary>
        </member>
        <member name="E:C1.Win.C1SuperTooltip.C1SuperTooltipBase.Popup">
            <summary>
            Fires before the <see cref="T:C1.Win.C1SuperTooltip.C1SuperTooltipBase"/> is displayed.
            </summary>
            <remarks>
            This event allows you to modify the location of the tooltip (by adjusting the <see cref="P:C1.Win.C1SuperTooltip.PopupEventArgs.Location"/> 
            parameter), or to prevent the tooltip from being displayed (by setting the <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> parameter.
            </remarks>
        </member>
        <member name="E:C1.Win.C1SuperTooltip.C1SuperTooltipBase.LinkClicked">
            <summary>
            Event that fires when the user clicks a hyperlink within a <see cref="T:C1.Win.C1SuperTooltip.C1SuperTooltipBase"/>.
            </summary>
            <remarks>
            <para>By default, tooltips are invisible to the mouse and therefore cannot be clicked. 
            You must set the <see cref="P:C1.Win.C1SuperTooltip.C1SuperTooltipBase.HitTestVisible"/> property is to true in order to make the
            tooltip visible to the mouse (and clickable).</para>
            <para>Hyperlinks are created using "A" tags in the HTML source text. When hyperlinks are clicked,
            the <b>LinkClicked</b> event fires and provides information about the link. The event handler
            can then take appropriate action.</para>
            </remarks>
            <example>
            The example below creates some hyperlinks using "A" tags. When the user clicks the link, the
            event handler shows a message box.
            <code>
            // configure c1superTooltip
            c1superTooltip.HitTestVisible = true;
            var tipText =
                "click &lt;a href='about'&gt;&lt;b&gt;HERE&lt;/b&gt;&lt;/a&gt; to see an about box.&lt;br&gt;" +
                "or click &lt;a href='time'&gt;&lt;b&gt;HERE&lt;/b&gt;&lt;/a&gt; to see the current time.";
            c1superTooltip.SetToolTip(someControl, tipText);
            
            // attach event handler
            c1superTooltip.LinkClicked += c1superTooltip_LinkClicked;
            // ...
            
            void c1superTooltip_LinkClicked(object sender, C1SuperLabelLinkClickedEventArgs e)
            {
              if (e.HRef == "about")
              {
                MessageBox.Show("About C1SuperLabel!");
              }
              else if (e.HRef == "time")
              {
                MessageBox.Show("The time is " + DateTime.Now.ToShortTimeString());
              }
            }
            </code>
            </example>
        </member>
        <member name="P:C1.Win.C1SuperTooltip.C1SuperTooltipBase.TrackingMode">
            <summary>
            Returns <see cref="T:System.Boolean"/> value specifying that there is currently opened hit testable tooltip window and Ctrl key is pressed.
            </summary>
            <remarks>If this property returns true, tooltip should not be closed on mouse movements.</remarks>
        </member>
        <member name="T:C1.Win.C1SuperTooltip.C1SuperTooltipBase.ToolStripItemControl">
            <summary>
            Proxy control to allow adding tooltips to ToolStripItems.
            </summary>
        </member>
        <member name="T:C1.Win.C1SuperTooltip.PopupEventHandler">
            <summary>
            Represents the method that handles the <see cref="E:C1.Win.C1SuperTooltip.C1SuperTooltipBase.Popup"/> event.
            </summary>
            <param name="sender"><see cref="T:C1.Win.C1SuperTooltip.C1SuperTooltipBase"/> object that fired the event.</param>
            <param name="e"><see cref="T:C1.Win.C1SuperTooltip.PopupEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:C1.Win.C1SuperTooltip.PopupEventArgs">
            <summary>
            Provides data for the <see cref="E:C1.Win.C1SuperTooltip.C1SuperTooltipBase.Popup"/> event.
            </summary>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.PopupEventArgs.#ctor(System.Windows.Forms.Form,System.Windows.Forms.Control,System.Drawing.Point,System.String)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Win.C1SuperTooltip.PopupEventArgs"/> object.
            </summary>
            <param name="form"><see cref="P:C1.Win.C1SuperTooltip.PopupEventArgs.Form"/> that contains the tooltip.</param>
            <param name="control"><see cref="P:C1.Win.C1SuperTooltip.PopupEventArgs.Control"/> that contains the tooltip text.</param>
            <param name="location"><see cref="T:System.Drawing.Point"/> that specifies the top left corner of the tooltip.</param>
            <param name="text">String that will be displayed in the tooltip.</param>
        </member>
        <member name="P:C1.Win.C1SuperTooltip.PopupEventArgs.Form">
            <summary>
            Gets a reference to the <see cref="P:C1.Win.C1SuperTooltip.PopupEventArgs.Form"/> that contains the tooltip.
            </summary>
        </member>
        <member name="P:C1.Win.C1SuperTooltip.PopupEventArgs.Control">
            <summary>
            Gets a reference to the <see cref="P:C1.Win.C1SuperTooltip.PopupEventArgs.Control"/> that provides the tooltip text and location.
            </summary>
        </member>
        <member name="P:C1.Win.C1SuperTooltip.PopupEventArgs.ToolStripItem">
            <summary>
            Gets a reference to the <see cref="P:C1.Win.C1SuperTooltip.PopupEventArgs.ToolStripItem"/> that provides the tooltip text.
            </summary>
            <remarks>
            The <see cref="T:C1.Win.C1SuperTooltip.C1SuperTooltipBase"/> can be used to display information about controls
            or ToolStrip items. If the tooltip is displaying information about a control, then this property 
            returns null. If it is displaying information about a <see cref="P:C1.Win.C1SuperTooltip.PopupEventArgs.ToolStripItem"/>, then 
            this property returns a reference to that item.
            </remarks>
        </member>
        <member name="P:C1.Win.C1SuperTooltip.PopupEventArgs.Location">
            <summary>
            Gets or sets the location where the tooltip will be displayed.
            </summary>
        </member>
        <member name="P:C1.Win.C1SuperTooltip.PopupEventArgs.Text">
            <summary>
            Gets or sets the text that will be displayed in the tooltip.
            </summary>
        </member>
        <member name="T:C1.Win.C1SuperTooltip.ToolTipWindow">
            <summary>
            Popup control that shows the tooltip content
            </summary>
        </member>
        <member name="T:C1.Win.C1SuperTooltip.ImageCollection">
            <summary>
            Collection of images to be displayed in <see cref="T:C1.Win.C1SuperTooltip.C1SuperLabelBase"/> or 
            <see cref="T:C1.Win.C1SuperTooltip.C1SuperTooltipBase"/> components.
            </summary>
        </member>
        <member name="F:C1.Win.C1SuperTooltip.ImageCollection.IMAGE_FILTER">
            <summary>
            String containing all common image extensions, used as a filter for an open file dialog.
            </summary>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.ImageCollection.#ctor(System.ComponentModel.Component)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Win.C1SuperTooltip.ImageCollection"/>.
            </summary>
            <param name="owner">Component that owns the collection.</param>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.ImageCollection.Add(C1.Win.C1SuperTooltip.ImageEntry)">
            <summary>
            Adds an <see cref="T:C1.Win.C1SuperTooltip.ImageEntry"/> to the collection.
            </summary>
            <param name="entry"><see cref="T:C1.Win.C1SuperTooltip.ImageEntry"/> to add to the collection.</param>
            <returns>The index of the new entry in the collection.</returns>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.ImageCollection.Add(System.String,System.Drawing.Image)">
            <summary>
            Adds an <see cref="T:System.Drawing.Image"/> to the collection.
            </summary>
            <param name="key">String used to retrieve the image from the collection.</param>
            <param name="image"><see cref="T:System.Drawing.Image"/> to add to the collection.</param>
            <returns>The index of the new entry in the collection.</returns>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.ImageCollection.Add(System.Windows.Forms.ImageList)">
            <summary>
            Adds all images in an <see cref="T:System.Windows.Forms.ImageList"/> component to the collection.
            </summary>
            <param name="list"><see cref="T:System.Windows.Forms.ImageList"/> component that contains the images to add to the collection.</param>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.ImageCollection.Insert(System.Int32,C1.Win.C1SuperTooltip.ImageEntry)">
            <summary>
            Inserts an <see cref="T:C1.Win.C1SuperTooltip.ImageEntry"/> at a specified position in the collection.
            </summary>
            <param name="index">Position where the <paramref name="entry"/> will be inserted.</param>
            <param name="entry"><see cref="T:C1.Win.C1SuperTooltip.ImageEntry"/> to add to the collection.</param>
            <returns>The index of the new entry in the collection.</returns>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.ImageCollection.Remove(C1.Win.C1SuperTooltip.ImageEntry)">
            <summary>
            Removes an <see cref="T:C1.Win.C1SuperTooltip.ImageEntry"/> from the collection.
            </summary>
            <param name="entry"><see cref="T:C1.Win.C1SuperTooltip.ImageEntry"/> to remove from the collection.</param>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.ImageCollection.IndexOf(C1.Win.C1SuperTooltip.ImageEntry)">
            <summary>
            Gets the index of a given <see cref="T:C1.Win.C1SuperTooltip.ImageEntry"/> in the collection.
            </summary>
            <param name="entry"><see cref="T:C1.Win.C1SuperTooltip.ImageEntry"/> to locate in th collection.</param>
            <returns>The index of the <see cref="T:C1.Win.C1SuperTooltip.ImageEntry"/> in the collection, or -1 if the 
            collection does not contain the key.</returns>
            <remarks>The <paramref name="entry"/> parameter is not case-sensitive.</remarks>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.ImageCollection.Contains(C1.Win.C1SuperTooltip.ImageEntry)">
            <summary>
            Determines whether the <see cref="T:C1.Win.C1SuperTooltip.ImageCollection"/> contains a given key.
            </summary>
            <param name="entry"><see cref="T:C1.Win.C1SuperTooltip.ImageEntry"/> to locate in the collection.</param>
            <returns>True if the collection contains <paramref name="entry"/>, false otherwise.</returns>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.ImageCollection.Contains(System.String)">
            <summary>
            Determines whether the <see cref="T:C1.Win.C1SuperTooltip.ImageCollection"/> contains a given key.
            </summary>
            <param name="key">String that identifies the <see cref="T:C1.Win.C1SuperTooltip.ImageEntry"/>.</param>
            <returns>True if the collection contains an <see cref="T:C1.Win.C1SuperTooltip.ImageEntry"/> associated with the given key, false otherwise.</returns>
            <remarks>The <paramref name="key"/> parameter is not case-sensitive.</remarks>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.ImageCollection.IndexOf(System.String)">
            <summary>
            Gets the index of the <see cref="T:C1.Win.C1SuperTooltip.ImageEntry"/> with a given key.
            </summary>
            <param name="key">String that identifies the <see cref="T:C1.Win.C1SuperTooltip.ImageEntry"/>.</param>
            <returns>The index of the <see cref="T:C1.Win.C1SuperTooltip.ImageEntry"/> in the collection, or -1 if the 
            collection does not contain the key.</returns>
            <remarks>The <paramref name="key"/> parameter is not case-sensitive.</remarks>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.ImageCollection.OnListChanged(System.ComponentModel.ListChangedEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1SuperTooltip.ImageCollection.ListChanged"/> event. 
            </summary>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.ImageCollection.OnClearComplete">
            <summary>
            Performs additional custom processes after clearing the contents of the <see cref="T:C1.Win.C1SuperTooltip.ImageCollection"/> instance.
            </summary>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.ImageCollection.OnInsertComplete(System.Int32,System.Object)">
            <summary>
            Performs additional custom processes after inserting a new element into the <see cref="T:C1.Win.C1SuperTooltip.ImageCollection"/> instance.
            </summary>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.ImageCollection.OnRemoveComplete(System.Int32,System.Object)">
            <summary>
            Performs additional custom processes after removing an element from the <see cref="T:C1.Win.C1SuperTooltip.ImageCollection"/> instance.
            </summary>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.ImageCollection.OnSetComplete(System.Int32,System.Object,System.Object)">
            <summary>
            Performs additional custom processes after setting a value in the <see cref="T:C1.Win.C1SuperTooltip.ImageCollection"/> instance.
            </summary>
        </member>
        <member name="E:C1.Win.C1SuperTooltip.ImageCollection.ListChanged">
            <summary>
            Occurs when list items are added, removed, or changed.
            </summary>
        </member>
        <member name="P:C1.Win.C1SuperTooltip.ImageCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:C1.Win.C1SuperTooltip.ImageEntry"/> at the specified index in the <see cref="T:C1.Win.C1SuperTooltip.ImageCollection"/>.
            </summary>
            <param name="index">Index of the image to get or set.</param>
            <returns>The <see cref="T:C1.Win.C1SuperTooltip.ImageEntry"/> at the specified index.</returns>
        </member>
        <member name="P:C1.Win.C1SuperTooltip.ImageCollection.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:C1.Win.C1SuperTooltip.ImageEntry"/> with the specified key <see cref="T:C1.Win.C1SuperTooltip.ImageCollection"/>.
            </summary>
            <param name="key">String that identifies the <see cref="T:C1.Win.C1SuperTooltip.ImageEntry"/>.</param>
            <returns>The <see cref="T:C1.Win.C1SuperTooltip.ImageEntry"/> with the specified key.</returns>
            <remarks>The <paramref name="key"/> parameter is not case-sensitive.</remarks>
        </member>
        <member name="T:C1.Win.C1SuperTooltip.ImageEntry">
            <summary>
            Entry in a <see cref="T:C1.Win.C1SuperTooltip.ImageCollection"/>.
            </summary>
            <remarks>
            <para>Each entry contains an <see cref="P:C1.Win.C1SuperTooltip.ImageEntry.Image"/> and its associated <see cref="P:C1.Win.C1SuperTooltip.ImageEntry.Key"/>.</para>
            <para>Entries may be retrieved from the collection by index or by key.</para>
            </remarks>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.ImageEntry.#ctor(System.String,System.Drawing.Image)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Win.C1SuperTooltip.ImageEntry"/>.
            </summary>
            <param name="key">String used as a key to retrieve the image.</param>
            <param name="image">Image associated with the key.</param>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.ImageEntry.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Win.C1SuperTooltip.ImageEntry"/>.
            </summary>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.ImageEntry.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Win.C1SuperTooltip.ImageEntry"/>.
            </summary>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.ImageEntry.NewEntries(System.Boolean)">
            <summary>
            This method is intended for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.ImageEntry.NewEntry">
            <summary>
            This method is intended for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1SuperTooltip.ImageEntry.Key">
            <summary>
            Gets or sets the key used to retrieve the image from the <see cref="T:C1.Win.C1SuperTooltip.ImageCollection"/>.
            </summary>
            <remarks>The key value is not case-sensitive.</remarks>
        </member>
        <member name="P:C1.Win.C1SuperTooltip.ImageEntry.Image">
            <summary>
            <see cref="P:C1.Win.C1SuperTooltip.ImageEntry.Image"/> in the <see cref="T:C1.Win.C1SuperTooltip.ImageCollection"/>.
            </summary>
        </member>
        <member name="T:C1.Win.C1SuperTooltip.ImageEntryTypeConverter">
            <summary>
            <see cref="T:System.ComponentModel.TypeConverter"/> used to persist <see cref="T:C1.Win.C1SuperTooltip.ImageEntry"/> objects.
            </summary>
            <remarks>
            <para>This converter causes Visual Studio to persist the type in code-behind, which is version-neutral.</para>
            <para>Without this, the <see cref="T:C1.Win.C1SuperTooltip.ImageEntry"/> objects would be persisted as binary resources,
            along with their specific version, so upgrading the component version would break projects 
            created with previous versions.</para>
            </remarks>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.ImageEntryTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns a value that indicates whether the object can be converted to a specified data type.
            </summary>
            <param name="context">The context.</param>
            <param name="destType">The data type.</param>
            <returns>True if the conversion is supported, false otherwise.</returns>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.ImageEntryTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the object into the specified data type.
            </summary>
            <param name="context">The context.</param>
            <param name="culture">The culture.</param>
            <param name="value">The object to convert.</param>
            <param name="destType">The type to convert to.</param>
            <returns>The converted object.</returns>
        </member>
        <member name="T:C1.Win.Touch.InertiaProcessor">
            <summary>
            Implements the extrapolation of a manipulation's position and orientation.
            </summary>
        </member>
        <member name="T:C1.Win.Touch.Manipulator">
            <summary>
            Represents a 2D manipulator at an instant in time.
            </summary>
        </member>
        <member name="F:C1.Win.Touch.Manipulator.ID">
            <summary>
            The unique ID for this manipulator.
            </summary>
        </member>
        <member name="F:C1.Win.Touch.Manipulator.X">
            <summary>
            The x-coordinate of the manipulator.
            </summary>
        </member>
        <member name="F:C1.Win.Touch.Manipulator.Y">
            <summary>
            The y-coordinate of the manipulator.
            </summary>
        </member>
        <member name="M:C1.Win.Touch.Manipulator.#ctor(System.Int32,System.Single,System.Single)">
            <summary>
            Creates a new Manipulator object with the specified properties.
            </summary>
        </member>
        <member name="T:C1.Win.Touch.ManipulationProcessor">
            <summary>
            Implements a multiple-input, single-output compositor for two-dimensional (2-D) transformations.
            </summary>
        </member>
        <member name="T:C1.Win.Touch.ITouchDestination">
            <summary>
            Implemented by an area of the Control that needs to receive touch notifications.
            </summary>
        </member>
        <member name="M:C1.Win.Touch.ITouchDestination.StartManipulation(C1.Win.Touch.TouchManipulation)">
            <summary>
            Executes before a new manipulation starts.
            </summary>
            <remarks>
            You can update mp.Configuration from this method.
            </remarks>
        </member>
        <member name="M:C1.Win.Touch.ITouchDestination.ProcessManipulation(C1.Win.Touch.TouchManipulation)">
            <summary>
            Executes when the next manipulation occurs, including the inertia.
            </summary>
        </member>
        <member name="T:C1.Win.Touch.Manipulations">
            <summary>
            Represents the possible affine two-dimensional (2-D) manipulations.
            </summary>
        </member>
        <member name="F:C1.Win.Touch.Manipulations.None">
            <summary>
            No manipulations.
            </summary>
        </member>
        <member name="F:C1.Win.Touch.Manipulations.TranslateX">
            <summary>
            A translation in the x-axis.
            </summary>
        </member>
        <member name="F:C1.Win.Touch.Manipulations.TranslateY">
            <summary>
            A translation in the y-axis.
            </summary>
        </member>
        <member name="F:C1.Win.Touch.Manipulations.Translate">
            <summary>
            A translation in the x and/or y axes.
            </summary>
        </member>
        <member name="F:C1.Win.Touch.Manipulations.Scale">
            <summary>
            A scale in both directions.
            </summary>
        </member>
        <member name="F:C1.Win.Touch.Manipulations.Rotate">
            <summary>
            A rotation.
            </summary>
        </member>
        <member name="F:C1.Win.Touch.Manipulations.All">
            <summary>
            All available manipulations.
            </summary>
        </member>
        <member name="T:C1.Win.Touch.TouchManipulation">
            <summary>
            Represents a result of the touch manipulation.
            </summary>
        </member>
        <member name="P:C1.Win.Touch.TouchManipulation.Configuration">
            <summary>
            Gets the parameters of the touch interaction.
            </summary>
        </member>
        <member name="P:C1.Win.Touch.TouchManipulation.Transform">
            <summary>
            Gets the cumulative result of the manipulation.
            </summary>
        </member>
        <member name="P:C1.Win.Touch.TouchManipulation.OriginX">
            <summary>
            Gets the new x-coordinate of the composite position of the manipulation, in DIPs.
            </summary>
        </member>
        <member name="P:C1.Win.Touch.TouchManipulation.OriginY">
            <summary>
            Gets the new y-coordinate of the composite position of the manipulation, in DIPs.
            </summary>
        </member>
        <member name="P:C1.Win.Touch.TouchManipulation.Start">
            <summary>
            Indicates the start of an interaction.
            </summary>
        </member>
        <member name="P:C1.Win.Touch.TouchManipulation.Inertia">
            <summary>
            Indicates if the interaction has triggered inertia.
            </summary>
        </member>
        <member name="P:C1.Win.Touch.TouchManipulation.End">
            <summary>
            Indicates the end of an interaction (including inertia).
            </summary>
        </member>
        <member name="P:C1.Win.Touch.TouchManipulation.HasOverpan">
            <summary>
            Indicates if the panning feedback offset is specified.
            </summary>
        </member>
        <member name="P:C1.Win.Touch.TouchManipulation.OverpanOffsetX">
            <summary>
            Gets or sets a value that indicates how far past the horizontal end of the
            pannable region the pan has gone. This property should be updated by the
            user if TouchProcessor.AllowPanningFeedback is set to true.
            </summary>
        </member>
        <member name="P:C1.Win.Touch.TouchManipulation.OverpanOffsetY">
            <summary>
            Gets or sets a value that indicates how far past the vertical end of the
            pannable region the pan has gone. This property should be updated by the
            user if TouchProcessor.AllowPanningFeedback is set to true.
            </summary>
        </member>
        <member name="T:C1.Win.Touch.TouchConfiguration">
            <summary>
            Specifies parameters for the manipulation and inertia processors.
            </summary>
        </member>
        <member name="P:C1.Win.Touch.TouchConfiguration.SupportedManipulations">
            <summary>
            Gets or sets the current set of supported manipulations.
            </summary>
        </member>
        <member name="P:C1.Win.Touch.TouchConfiguration.UseRails">
            <summary>
            Indicates that motions off the primary axis of motion are ignored.
            </summary>
        </member>
        <member name="P:C1.Win.Touch.TouchConfiguration.RailsDisplacement">
            <summary>
            Gets or sets the displacement before applying rails.
            </summary>
        </member>
        <member name="P:C1.Win.Touch.TouchConfiguration.PivotX">
            <summary>
            Gets or sets the X position of the pivot, in DIPs.
            </summary>
        </member>
        <member name="P:C1.Win.Touch.TouchConfiguration.PivotY">
            <summary>
            Gets or sets the Y position of the pivot, in DIPs.
            </summary>
        </member>
        <member name="P:C1.Win.Touch.TouchConfiguration.TranslationDeceleration">
            <summary>
            Gets or sets the translation deceleration of an inertia processor, in DIPs per millisecond squared.
            </summary>
        </member>
        <member name="P:C1.Win.Touch.TouchConfiguration.AngularDeceleration">
            <summary>
            Gets or sets the angular deceleration of an inertia processor, in radians per millisecond squared.
            </summary>
        </member>
        <member name="P:C1.Win.Touch.TouchConfiguration.MinimumScaleRotateRadius">
            <summary>
            Gets or sets the minimum radius, in DIPs, necessary for a manipulator to participate in scaling and rotation.
            </summary>
        </member>
        <member name="P:C1.Win.Touch.TouchConfiguration.AllowPanningFeedback">
            <summary>
            Gets or sets whether the control shows a visual cue when a user
            reaches the end of a pannable area.
            </summary>
            <remarks>
            To enable panning feedback you should update the OverpanOffsetX
            and OverpanOffsetY properties of the TouchOutput object in the
            ITouchDestination.ProceedInteraction() method.
            </remarks>
        </member>
        <member name="P:C1.Win.Touch.TouchConfiguration.PanningAnimateBack">
            <summary>
            Indicates whether the control positioning reset should incorporate
            a smooth animation after showing panning feedback. Set this
            property to false if the original position of the control needs
            to be restored immediately. 
            </summary>
        </member>
        <member name="T:C1.Win.Touch.ManipulationTransform">
            <summary>
            Represents the cumulative result of the manipulation.
            </summary>
        </member>
        <member name="F:C1.Win.Touch.ManipulationTransform.TranslationX">
            <summary>
            Gets the translation along the x-axis, in DIPs.
            </summary>
        </member>
        <member name="F:C1.Win.Touch.ManipulationTransform.TranslationY">
            <summary>
            Gets the translation along the y-axis, in DIPs.
            </summary>
        </member>
        <member name="F:C1.Win.Touch.ManipulationTransform.Scale">
            <summary>
            Gets the scale factor.
            </summary>
        </member>
        <member name="F:C1.Win.Touch.ManipulationTransform.Expansion">
            <summary>
            Gets the amount of expansion, in DIPs.
            </summary>
        </member>
        <member name="F:C1.Win.Touch.ManipulationTransform.Rotation">
            <summary>
            Gets the amount of rotation, in radians.
            </summary>
        </member>
        <member name="T:C1.Win.Touch.HitTestDelegate">
            <summary>
            Represents a delegate that hit-tests touch destinations.
            </summary>
        </member>
        <member name="T:C1.Win.Touch.TouchEventArgs">
            <summary>
            Provides data for touch events.
            </summary>
        </member>
        <member name="M:C1.Win.Touch.TouchEventArgs.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a TouchEventArgs.
            </summary>
        </member>
        <member name="P:C1.Win.Touch.TouchEventArgs.X">
            <summary>
            Gets the contact's X coordinate, in pixels.
            </summary>
        </member>
        <member name="P:C1.Win.Touch.TouchEventArgs.Y">
            <summary>
            Gets the contact's Y coordinate, in pixels.
            </summary>
        </member>
        <member name="T:C1.Win.Touch.QueryStatusEventArgs">
            <summary>
            Provides data for the QueryStatus event.
            </summary>
        </member>
        <member name="M:C1.Win.Touch.QueryStatusEventArgs.#ctor(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of a QueryStatusEventArgs.
            </summary>
        </member>
        <member name="P:C1.Win.Touch.QueryStatusEventArgs.FromPen">
            <summary>
            Gets a value indicating if the event came from the stylus pen.
            </summary>
        </member>
        <member name="P:C1.Win.Touch.QueryStatusEventArgs.AllowPressAndHold">
            <summary>
            Gets or sets whether the press and hold (right-click) gesture is supported.
            </summary>
        </member>
        <member name="T:C1.Win.Touch.TouchProcessor">
            <summary>
            Accepts input from a touch device.
            </summary>
        </member>
        <member name="F:C1.Win.Touch.TouchProcessor.IsSupported">
            <summary>
            Indicates if the Windows Touch Technology is available on this platform.
            </summary>
        </member>
        <member name="F:C1.Win.Touch.TouchProcessor.IsWindows8">
            <summary>
            Indicates if the application is running on Windows 8 or upper OS.
            </summary>
        </member>
        <member name="M:C1.Win.Touch.TouchProcessor.GetTimestamp">
            <summary>
            Calculates the timestamp in 100-nanosecond units.
            </summary>
        </member>
        <member name="M:C1.Win.Touch.TouchProcessor.#ctor(System.Windows.Forms.Control,C1.Win.Touch.HitTestDelegate)">
            <summary>
            Creates an instance of TouchProcessor for the given control.
            </summary>
        </member>
        <member name="M:C1.Win.Touch.TouchProcessor.SetDpi(System.Single,System.Single)">
            <summary>	
            Sets the dots per inch (DPI) for the touch processor.
            </summary>	
            <param name="dpiX">Specifies the horizontal DPI of the touch processor.</param>	
            <param name="dpiY">Specifies the vertical DPI of the touch processor.</param>	
        </member>
        <member name="M:C1.Win.Touch.TouchProcessor.HandleMessage(System.Windows.Forms.Message@)">
            <summary>
            Processes touch-related Windows messages.
            </summary>
            <remarks>
            It must be executed from the owner control's WndProc() method.
            </remarks>
            <param name="m">The Message to process.</param>
            <returns>
            Returns true if the message is handled and the owner control's
            WndProc() shouldn't call base.WndProc().
            </returns>
        </member>
        <member name="M:C1.Win.Touch.TouchProcessor.GuessFromTouch(System.Drawing.Point,System.Int64)">
            <summary>
            Tries to guess whether the mouse event being processed came
            from the touch device rather than from the mouse or pen.
            </summary>
            <param name="p">
            The Point in client coordinates passed as Location to
            the mouse event.
            </param>
            <param name="timestamp">
            The optional timestamp of the check.
            </param>
        </member>
        <member name="M:C1.Win.Touch.TouchProcessor.GuessFromTouch(System.Int64)">
            <summary>
            Tries to guess whether the scroll event being processed came
            from the touch device rather than from the mouse or pen.
            </summary>
        </member>
        <member name="M:C1.Win.Touch.TouchProcessor.ProcessTimerTick(System.Int64)">
            <summary>
            Processes inertia animation for the specified timestamp.
            </summary>
        </member>
        <member name="M:C1.Win.Touch.TouchProcessor.Complete(C1.Win.Touch.ITouchDestination)">
            <summary>
            Forces to complete the currently running manipulations for the given destination.
            </summary>
        </member>
        <member name="M:C1.Win.Touch.TouchProcessor.CompleteAll">
            <summary>
            Forces all currently running manipulations to complete.
            </summary>
        </member>
        <member name="P:C1.Win.Touch.TouchProcessor.IsCursorSuppressed">
            <summary>
            Indicates that the system is not drawing the cursor because the user
            is providing input through touch or pen instead of the mouse.
            </summary>
            <remarks>
            This property always returns false on Windows 7.
            </remarks>
        </member>
        <member name="P:C1.Win.Touch.TouchProcessor.MaxTapDisplacement">
            <summary>
            Gets or sets the maximum possible displacement allowable for a tap, in DIPs.
            </summary>
        </member>
        <member name="P:C1.Win.Touch.TouchProcessor.MaxTapDuration">
            <summary>
            Gets or sets the maximum allowable duration for a tap, in milliseconds.
            </summary>
        </member>
        <member name="P:C1.Win.Touch.TouchProcessor.UseTimerForInertia">
            <summary>
            Gets or sets whether the animation timer should be created for processing inertia (true by default).
            </summary>
            <remarks>
            Call the ProcessTimerTick method for processing inertia when this property is set to False.
            </remarks>
        </member>
        <member name="P:C1.Win.Touch.TouchProcessor.Enabled">
            <summary>
            Gets or sets whether the touch processor is enabled.
            </summary>
        </member>
        <member name="P:C1.Win.Touch.TouchProcessor.InertiaIsRunning">
            <summary>
            Gets a value indicating whether the inertia is currently processed.
            </summary>
        </member>
        <member name="E:C1.Win.Touch.TouchProcessor.Touch">
            <summary>
            Occurs before processing any manipulations from touch device.
            </summary>
        </member>
        <member name="E:C1.Win.Touch.TouchProcessor.QueryStatus">
            <summary>
            Occurs before the control starts processing input from
            touch device or pen at the given point.
            </summary>
        </member>
        <member name="E:C1.Win.Touch.TouchProcessor.Tap">
            <summary>
            Occurs when the user taps the control.
            </summary>
        </member>
        <member name="E:C1.Win.Touch.TouchProcessor.MissedTap">
            <summary>
            Occurs if the user taps the control but the touch duration
            exceeded MaxTapDuration or the touch point was moved.
            </summary>
        </member>
        <member name="E:C1.Win.Touch.TouchProcessor.SecondaryTap">
            <summary>
            Occurs as a result of the Press and Hold action.
            </summary>
        </member>
        <member name="E:C1.Win.Touch.TouchProcessor.DoubleTap">
            <summary>
            Occurs when the user taps the control twice.
            </summary>
        </member>
        <member name="T:C1.Win.Util.ImageRecolorer">
            <summary>
            Provides a method for replacing colors in the source image
            with the specified new colors in the destination image.
            </summary>
        </member>
        <member name="M:C1.Win.Util.ImageRecolorer.#ctor">
            <summary>
            Initializes a new instance of an <see cref="T:C1.Win.Util.ImageRecolorer"/>.
            </summary>
        </member>
        <member name="M:C1.Win.Util.ImageRecolorer.#ctor(System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Initializes a new instance of an <see cref="T:C1.Win.Util.ImageRecolorer"/>.
            </summary>
            <param name="cBlack">The color to replace Black in the source image.</param>
            <param name="cWhite">The color to replace White in the source image.</param>
            <param name="cBlue">The color to replace Blue in the source image.</param>
            <param name="cMagenta">The color to replace Magenta in the source image.</param>
        </member>
        <member name="M:C1.Win.Util.ImageRecolorer.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of an <see cref="T:C1.Win.Util.ImageRecolorer"/>.
            </summary>
            <param name="cBlack">The color to replace Black in the source image.</param>
            <param name="cWhite">The color to replace White in the source image.</param>
            <param name="cBlue">The color to replace Blue in the source image.</param>
            <param name="cMagenta">The color to replace Magenta in the source image.</param>
        </member>
        <member name="M:C1.Win.Util.ImageRecolorer.MapPixels(System.Drawing.Bitmap,System.Drawing.Bitmap,System.Int32,System.Int32)">
            <summary>
            Copies the source image to the destination image with replacing colors.
            </summary>
            <param name="srcImage">The source image using Format32bppArgb as pixel format.</param>
            <param name="dstImage">The destination image using Format32bppPArgb as pixel format.</param>
            <param name="width">The width of the source and destination images.</param>
            <param name="height">The height of the source and destination images.</param>
        </member>
        <member name="P:C1.Win.Util.ImageRecolorer.ChannelBlack">
            <summary>
            Gets or sets the color to replace Black in the source image.
            </summary>
        </member>
        <member name="P:C1.Win.Util.ImageRecolorer.ChannelWhite">
            <summary>
            Gets or sets the color to replace White in the source image.
            </summary>
        </member>
        <member name="P:C1.Win.Util.ImageRecolorer.ChannelBlue">
            <summary>
            Gets or sets the color to replace Blue in the source image.
            </summary>
        </member>
        <member name="P:C1.Win.Util.ImageRecolorer.ChannelMagenta">
            <summary>
            Gets or sets the color to replace Magenta in the source image.
            </summary>
        </member>
        <member name="F:C1.Util.Licensing.AboutForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Util.Licensing.AboutForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Util.Licensing.AboutForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:C1.Util.Licensing.ProviderInfo">
            <summary>
            <para>Provides static <see cref="M:C1.Util.Licensing.ProviderInfo.Validate(System.Type,System.Object)"/> methods that 
            should be called from the constructors of licensed classes.</para>
            <para>Also provides a static <see cref="M:C1.Util.Licensing.ProviderInfo.ShowAboutBox(System.Object)"/> method that can 
            be called to show the about box with product and licensing information.</para>
            </summary>
        </member>
        <member name="M:C1.Util.Licensing.ProviderInfo.Validate(System.Type,System.Object)">
            <summary>
            Perform license validation. Call this method from the licensed object's 
            constructor to save a license key at design time, validate it at runtime, 
            and display a nag dialog if a valid license is not found.
            </summary>
            <param name="type">Type of licensed object (use typeof() and not GetType()).</param>
            <param name="instance">Reference to the licensed object (not currently used).</param>
            <returns>A <see cref="T:C1.Util.Licensing.LicenseInfo"/> object that contains information about the license.</returns>
            <remarks>
            <para>Check the <b>ShouldNag</b> property of the returned <see cref="T:C1.Util.Licensing.LicenseInfo"/> 
            to determine whether the licensed class should nag the user. This value is set
            to true in situations where a valid license was not found but a nag dialog
            could not be displayed. In these cases, the licensed class is supposed to nag
            in some other way (with a watermark for example).</para>
            </remarks>
        </member>
        <member name="M:C1.Util.Licensing.ProviderInfo.Validate(System.Type,System.Object,System.Boolean)">
            <summary>
            Perform license validation. Call this method from the licensed object's 
            constructor to save a license key at design time, validate it at runtime, 
            and display a nag dialog if a valid license is not found.
            </summary>
            <param name="type">Type of licensed object (use typeof() and not GetType()).</param>
            <param name="instance">Reference to the licensed object (not currently used).</param>
            <param name="showNagDialog">Whether the nag dialog should be displayed when a valid license is not found.</param>
            <returns>A <see cref="T:C1.Util.Licensing.LicenseInfo"/> object that contains information about the license.</returns>
            <remarks>
            <para>This overload was created for use in WPF. It should be called in the control's constructor
            in order to support license persistence correctly. But it should not show the nag dialog until the
            control is fully loaded, or the VS designer may remain blank.</para>
            <para>So the solution is this:</para>
            <code>
            LicenseInfo _licInfo;
            public LicensedControl()
            {
              // check license but don't nag yet
              _licInfo = ProviderInfo.Validate(typeof(LicensedControl), this, false);
              
              // perform licensing after control is fully loaded
              Loaded += LicensedControl_Loaded;
            }
            void LicensedControl_Loaded(object sender, RoutedEventArgs e)
            {
              // nag after loading
              if (_licInfo.ShouldNag)
              {
                ProviderInfo.ShowAboutBox(this);
              }
            }
            </code>
            </remarks>
        </member>
        <member name="M:C1.Util.Licensing.ProviderInfo.Nag(System.Type,C1.Util.Licensing.LicenseInfo,System.Boolean)">
            <summary>
            Nag user by showing AboutBox with license information.
            Show it only once per day per assembly.
            </summary>
            <param name="type">Type of licensed object (use typeof() and not GetType()).</param>
            <param name="li"><see cref="T:C1.Util.Licensing.LicenseInfo"/> object that contains information about the license.</param>
            <param name="designTime">Whether we're running at design or run time.</param>
        </member>
        <member name="M:C1.Util.Licensing.ProviderInfo.Validate(System.Type,System.Object,System.Reflection.Assembly,System.String)">
            <summary>
            Version of Validate used by constructors that take runtime keys.
            </summary>
            <param name="type">Type of licensed object (use typeof() and not GetType()).</param>
            <param name="instance">Reference to the licensed object.</param>
            <param name="callingAsm">Assembly that contains the owner licensed control.</param>
            <param name="runtimeKey">Any valid C1 runtime key.</param>
            <returns>A <see cref="T:C1.Util.Licensing.LicenseInfo"/> with information about the runtime key.</returns>
            <remarks>
            <para>This allows a licensed C1 class to create other C1 objects bypassing 
            license verification for the child objects.</para>
            <para>For extra safety, we check that the owner object is defined in an assembly
            the contains a 'C1ProductInfo' attribute.</para>
            </remarks>
        </member>
        <member name="M:C1.Util.Licensing.ProviderInfo.ValidateDesigntime(System.Type,System.ComponentModel.LicenseContext)">
            <summary>
            Design time validation. Looks for a license in the registry and saves it in the
            provided <see cref="T:System.ComponentModel.LicenseContext"/>.
            </summary>
            <param name="type">Type of licensed object (use typeof() and not GetType()).</param>
            <param name="context"><see cref="T:System.ComponentModel.LicenseContext"/> where the runtime key will be stored.</param>
            <returns>A <see cref="T:C1.Util.Licensing.LicenseInfo"/> with information about the license.</returns>
            <remarks>
            Call this method from application-type products (that always require a license to be
            installed in the registry). In this case, the <paramref name="context"/> parameter 
            should be set to null.
            </remarks>
        </member>
        <member name="M:C1.Util.Licensing.ProviderInfo.ValidateRuntime(System.Type,System.ComponentModel.LicenseContext)">
            <summary>
            Runtime validation.
            Looks for a runtime key stored in the current application's resources.
            </summary>
            <param name="type">Type of licensed object (use typeof() and not GetType()).</param>
            <param name="context"><see cref="T:System.ComponentModel.LicenseContext"/> where the runtime key will be stored.</param>
            <returns>A <see cref="T:C1.Util.Licensing.LicenseInfo"/> with information about the license.</returns>
        </member>
        <member name="M:C1.Util.Licensing.ProviderInfo.ShowAboutBox(System.Object)">
            <summary>
            Shows the About Box for an instance of a C1 product.
            </summary>
        </member>
        <member name="M:C1.Util.Licensing.ProviderInfo.GetC1Type(System.Object)">
            <summary>
            Get the type whose assembly contains a 'C1ProductInfoAttribute'.
            </summary>
            <param name="instance">Instance of an object whose type is to be checked.</param>
            <returns>The type whose assembly contains a 'C1ProductInfoAttribute'</returns>
        </member>
        <member name="T:C1.Util.Licensing.LicenseInfo">
            <summary>
            Contains information about a license stored in an application.
            </summary>
        </member>
        <member name="M:C1.Util.Licensing.LicenseInfo.#ctor(System.Type,C1.Util.Licensing.LicenseStatus,C1.Util.Licensing.ProductLicense)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Util.Licensing.LicenseInfo"/> class.
            </summary>
        </member>
        <member name="M:C1.Util.Licensing.LicenseInfo.#ctor(System.Type,C1.Util.Licensing.LicenseStatus)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Util.Licensing.LicenseInfo"/> class.
            </summary>
        </member>
        <member name="P:C1.Util.Licensing.LicenseInfo.LicenseStatus">
            <summary>
            Gets or sets the status of this license (valid, expired, unlicensed).
            </summary>
        </member>
        <member name="P:C1.Util.Licensing.LicenseInfo.License">
            <summary>
            Gets or sets the <see cref="T:C1.Util.Licensing.ProductLicense"/> associated with this license.
            </summary>
        </member>
        <member name="P:C1.Util.Licensing.LicenseInfo.Type">
            <summary>
            Gets or sets the <see cref="P:C1.Util.Licensing.LicenseInfo.Type"/> associated with this license.
            </summary>
        </member>
        <member name="P:C1.Util.Licensing.LicenseInfo.EvaluationDaysElapsed">
            <summary>
            Gets the number of evaluation days elapsed.
            Returns -1 for valid licenses.
            </summary>
        </member>
        <member name="P:C1.Util.Licensing.LicenseInfo.EvaluationDaysLeft">
            <summary>
            Gets the number of evaluation days still left.
            </summary>
        </member>
        <member name="P:C1.Util.Licensing.LicenseInfo.ShouldNag">
            <summary>
            Gets or sets a value that determines whether the caller should
            nag the user. This is the case when the component/control is 
            not licensed, but is not running in interactive mode. So we can't
            show a dialog and the caller is supposed to nag some other way
            (typically by adding watermarks to the UI or output).
            </summary>
        </member>
        <member name="P:C1.Util.Licensing.LicenseInfo.IsValid">
            <summary>
            Gets a value that determines whether the license found is valid.
            </summary>
        </member>
        <member name="P:C1.Util.Licensing.LicenseInfo.IsExpired">
            <summary>
            Gets a value that determines whether the license found is expired.
            </summary>
        </member>
        <member name="P:C1.Util.Licensing.LicenseInfo.IsLocalHost">
            <summary>
            Gets a value that determines whether the component is running under
            localhost and therefore should not nag the user with alert dialogs.
            </summary>
        </member>
        <member name="T:C1.Util.Licensing.SafeLicenseContext">
            <summary>
            
            Provides a version of GetSavedLicenseKey that doesn't require
            special permissions.
            
            The code was mostly copied from the .NET framework, but then changed 
            in a few places to require fewer permissions (assembly name, file io, 
            etc). 
            
            The main change is the use of a custom deserializer to read Hashtable 
            objects instead of the original BinaryFormatter, which requires
            permissions.
            
            </summary>
        </member>
        <member name="T:C1.Util.Licensing.C1AboutNameAttribute">
            <summary>
            Attribute used to specify the product name shown on the About Box.
            </summary>
        </member>
        <member name="T:C1.Util.Licensing.C1ProductInfoAttribute">
            <summary>
            Attribute used to attach licensing/product information to assemblies.
            </summary>
        </member>
        <member name="T:C1.Util.Licensing.ProductLicense">
            <summary>
            Represents a license for a product (e.g. C1BarCode, C1Studio Enterprise).
            
            Provides methods for:
            - generating new license keys (administrative task)
            - checking license key validity (used by installer and products)
            - generating and checking runtime keys (used by products)
            - installing/uninstalling licenses (used by installer)
            
            The install/uninstall code requires elevated permissions, and is
            used only by setups and utilities (not by controls). The code is 
            implemented in the ProductLicense.Installer.cs, which controls should
            not include since it won't be useful to them.
            
            When a product is sold, we send the user a license KEY. The user installs
            a license on his machine by providing his name, his company name, and the 
            key.
            
            The <see cref="P:C1.Util.Licensing.ProductLicense.Key"/> is a string in the following format:
            
                AAQYYCC-XX-NNNNNN-DD-DZZZZZZ
                
            Where:
            
                AA:     Product code (should match one of the products in the 
                        product catalog (see ProductInformation.GetProductCatalog()).
                Q:      Quarter when the license key was issued (1, 2, or 3)
                YY:     Year when the license key was issued (e.g., 10 for 2010)
                CC:     Order code, two chars that indicate whether this is a 
                        new sale, upgrade, renewal, special offer, etc.
                XX:     Hash code to ensure key validity.
                NNNNNN: Unique serial number.
                DDD:    Vendor code, three chars
                ZZZZZZ: Combination of random numbers for uniqueness and extra hash.
                
            </summary>
        </member>
        <member name="T:C1.Win.Localization.EndUserLocalizeOptionsAttribute">
            <summary>
            Allows to redefine default end user localize options for property, field or class.
            </summary>
        </member>
        <member name="M:C1.Win.Localization.EndUserLocalizeOptionsAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.Localization.EndUserLocalizeOptionsAttribute"/> attribute.
            </summary>
        </member>
        <member name="M:C1.Win.Localization.EndUserLocalizeOptionsAttribute.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.Localization.EndUserLocalizeOptionsAttribute"/> attribute.
            </summary>
            <param name="properties"></param>
        </member>
        <member name="M:C1.Win.Localization.EndUserLocalizeOptionsAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.Localization.EndUserLocalizeOptionsAttribute"/> attribute.
            </summary>
            <param name="exclude"></param>
        </member>
        <member name="P:C1.Win.Localization.EndUserLocalizeOptionsAttribute.Properties">
            <summary>
            Defines the list of properties that should be localized.
            </summary>
        </member>
        <member name="P:C1.Win.Localization.EndUserLocalizeOptionsAttribute.ExcludedMembers">
            <summary>
            Defines a list of members of control that should be excluded from localization.
            Currently used only AddControlToResources application for automatically generating
            control resources.
            </summary>
        </member>
        <member name="P:C1.Win.Localization.EndUserLocalizeOptionsAttribute.Exclude">
            <summary>
            If true then class, property or field will be not displayed for 
            enduser localization.
            </summary>
        </member>
        <member name="P:C1.Win.Localization.EndUserLocalizeOptionsAttribute.Description">
            <summary>
            Gets the description of string that will be displayed in the
            end user localizer in design-time.
            </summary>
        </member>
        <member name="P:C1.Win.Localization.EndUserLocalizeOptionsAttribute.StringsType">
            <summary>
            Gets or sets type providing string used to localize <see cref="P:C1.Win.Localization.EndUserLocalizeOptionsAttribute.Description"/>.
            </summary>
        </member>
        <member name="P:C1.Win.Localization.EndUserLocalizeOptionsAttribute.Key">
            <summary>
            Gets or sets resource key containing localized string for <see cref="P:C1.Win.Localization.EndUserLocalizeOptionsAttribute.Description"/>.
            </summary>
        </member>
        <member name="T:C1.Win.Localization.C1DescriptionAttribute">
            <summary>
            C1DescriptionAttribute replaces the DescriptionAttribute
            and uses the StringsManager and Strings classes to
            return the localized Attribute string.
            </summary>
        </member>
        <member name="M:C1.Win.Localization.C1DescriptionAttribute.#ctor(System.Type,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.Localization.C1DescriptionAttribute"/> attribute.
            </summary>
            <param name="stringsType">The <see cref="T:System.Type"/> defining string properties.</param>
            <param name="key">The key value used to keep specific string description.</param>
            <param name="description">Default non-localized description text.</param>
        </member>
        <member name="P:C1.Win.Localization.C1DescriptionAttribute.Description">
            <summary>
            Returns localized description text if it is available or default value 
            </summary>
        </member>
        <member name="T:C1.Win.Localization.C1CategoryAttribute">
            <summary>
            C1CategoryAttribute replaces the CategoryAttribute
            and uses the StringsManager and Strings classes to
            return the localized Attribute string.
            </summary>
        </member>
        <member name="M:C1.Win.Localization.C1CategoryAttribute.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.Localization.C1CategoryAttribute"/> attribute.
            </summary>
            <param name="stringsType">The <see cref="T:System.Type"/> defining string properties.</param>
            <param name="categoryName">Default non-localized category name.</param>
        </member>
        <member name="M:C1.Win.Localization.C1CategoryAttribute.#ctor(System.Type,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.Localization.C1CategoryAttribute"/> attribute.
            </summary>
            <param name="stringsType">The <see cref="T:System.Type"/> defining string properties.</param>
            <param name="key">The key value used to keep specific category.</param>
            <param name="categoryName">Default non-localized category name.</param>
        </member>
        <member name="M:C1.Win.Localization.C1CategoryAttribute.GetLocalizedString(System.String)">
            <summary>
            Looks up the localized name of the specified category.
            </summary>
            <param name="value">The identifer for the category to look up.</param>
            <returns>The localized name of the category, or null if a localized name does not exist.</returns>
        </member>
        <member name="T:C1.Win.Localization.StringsManager">
            <summary>
            The utility class which handles localization tasks.
            </summary>
        </member>
        <member name="M:C1.Win.Localization.StringsManager.GetC1BuiltinResourceStream(System.String,System.Reflection.Assembly,System.String)">
            <summary>
            Returns ResourceStream for "official" resources
            that provided only by C1, typicallly those resources contains
            design-time strings.
            Those resources can be only in main control assembly like C1.C1Preview.2.dll 
            and name of resource should have following format:
            CulturePrefix.StringsTypeName
            for example:
            ja.C1.C1Preview.Design.DesignStrings.resx
            </summary>
            <param name="resourceName"></param>
            <param name="assembly"></param>
            <param name="cultureName"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.Localization.StringsManager.GetResourceStream(System.String,System.Reflection.Assembly,System.String,System.Boolean)">
            <summary>
            Searches for standard resources which looks like BlaBla.Strings.CultureName.resx,
            like C1.Win.C1Preview.Strings.zh.resx or C1.Win.C1Preview.Strings.resx etc.
            Ensures that resource is not *C1* built-in resource, i.e. its name DOES NOT HAVE format
            like
            CultureName.BlaBla.Strings.resx, otherwise bug can occur if entry assembly 
            have C1 builtin resources as in case of C1 executables like C1ThemeDesigner or C1FlexReportDesigner.
            For example C1ThemeDesigner have ja.C1ThemeDesigner.Strings.resx resource
            and this resource *SHOULD BE IGNORED* if  resouceName is "C1ThemeDesigner.Strings.resx" and
            cultureName is "" (invariant).
            </summary>
            <param name="resourceName"></param>
            <param name="assembly"></param>
            <param name="cultureName"></param>
            <param name="searchInSatelliteOnly"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.Localization.StringsManager.GetParentCulture(System.String)">
            <summary>
            Returns the parent of the CultureInfo passed in. Differs from ci.Parent
            in that while ci can be equal to ci.Parent, this method it never returns
            the passed ci itself, rather it would return null.
            Also this function has special handling for chinese culture.
            Under NET2 it returns "zh" culture name for
            neutral "zh-Hans" and "zh-Hant" chinese cultures, under
            NET2 "zh" is not exists.
            </summary>
            <param name="cultureName">The culture name to get parent for.</param>
            <returns>The parent of the culture info, or null.</returns>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.Dock_SizeMode">
            <summary>
            Used in:
            C1DockingTab\Style
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Dock_SizeMode.Normal">
            <summary>
            Borders are shown only for headers of columns.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Dock_SizeMode.Fit">
            <summary>
            No borders.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Dock_SizeMode.FillToEnd">
            <summary>
            Only left and right borders of columns are shown.
            </summary>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.TreeViewBorderStyleEnum">
            <summary>
            Used in:
            C1TreeView\Style
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.TreeViewBorderStyleEnum.ColumnsHeaderOnly">
            <summary>
            Borders are shown only for headers of columns.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.TreeViewBorderStyleEnum.None">
            <summary>
            No borders.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.TreeViewBorderStyleEnum.ColumnsLineOnly">
            <summary>
            Only left and right borders of columns are shown.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.TreeViewBorderStyleEnum.Full">
            <summary>
            Borders are shown for all cells.
            </summary>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.BackgroundPictureDrawModeEnum">
            <summary>
            Used in:
            C1TrueDBGrid\Style
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.BackgroundPictureDrawModeEnum.Center">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.BackgroundPictureDrawModeEnum.Stretch">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.BackgroundPictureDrawModeEnum.Tile">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.BackgroundPictureDrawModeEnum.Fill">
            <summary>
            The image is stretched and aspect ratio is saved.
            </summary>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.BorderType">
            <summary>
            Used in:
            C1TrueDBGrid\GridBorder
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.BorderType.None">
            <summary>
            No borders.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.BorderType.Flat">
            <summary>
            Borders have a Flat appearance.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.BorderType.Raised">
            <summary>
            Borders have a 3D raised appearance.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.BorderType.Inset">
            <summary>
            Borders have a 3D inset appearance.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.BorderType.Groove">
            <summary>
            A line around the inside of the border.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.BorderType.Fillet">
            <summary>
            A fillet type border.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.BorderType.RaisedBevel">
            <summary>
            Borders have a 3D raised with a bevel.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.BorderType.InsetBevel">
            <summary>
            Borders have a 3D inset with a bevel.
            </summary>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.ForegroundPicturePosition">
            <summary>
            Used in:
            C1TrueDBGrid\Style
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ForegroundPicturePosition.Near">
            <summary>
            Image is rendered in the near side of the cell.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ForegroundPicturePosition.Far">
            <summary>
            Image is rendered in the far side of the cell.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ForegroundPicturePosition.LeftOfText">
            <summary>
            Image is rendered to the left of any text in the cell.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ForegroundPicturePosition.RightOfText">
            <summary>
            Image is rendered to the right of any text in the cell.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ForegroundPicturePosition.TopOfText">
            <summary>
            Image is rendered on top of any text in the cell.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ForegroundPicturePosition.BottomOfText">
            <summary>
            Image is rendered below any text in the cell.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ForegroundPicturePosition.PictureOnly">
            <summary>
            Text is not displayed.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ForegroundPicturePosition.TextOnly">
            <summary>
            Image is not displayed.
            </summary>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.AlignHorzEnum">
            <summary>
            Used in:
            C1TrueDBGrid\Style
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.AlignHorzEnum.General">
            <summary>
            Text is aligned Near and numeric values Far
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.AlignHorzEnum.Near">
            <summary>
            Text is aligned to the left.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.AlignHorzEnum.Center">
            <summary>
            Text is aligned centered.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.AlignHorzEnum.Far">
            <summary>
            Text is aligned to the right.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.AlignHorzEnum.Justify">
            <summary>
            Text is aligned with respect to the cells boundries.
            </summary>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.AlignVertEnum">
            <summary>
            Used in:
            C1TrueDBGrid\Style
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.AlignVertEnum.Top">
            <summary>
            Text is rendered at the top of the cell.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.AlignVertEnum.Center">
            <summary>
            Text is rendered at the center of the cell.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.AlignVertEnum.Bottom">
            <summary>
            Text is rendered at the bottom of the cell.
            </summary>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.LineStyle">
            <summary>
            Used in:
            C1TrueDBGrid\GridLines
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.LineStyle.None">
            <summary>
            No line.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.LineStyle.Single">
            <summary>
            Single line.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.LineStyle.Double">
            <summary>
            Double line.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.LineStyle.Raised">
            <summary>
            Line with 3D raised appearance.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.LineStyle.Inset">
            <summary>
            Line with 3D inset appearance.
            </summary>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.PaletteType">
            <summary>
            Used in:
            C1Schedule\PaletteType
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.PaletteType.Office2007">
            <summary>
            Office 2007 palette includes back and border colors 
            of free and working hours and days, day headers, grid borders 
            and calendar tabs. 
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.PaletteType.Office2010">
            <summary>
            Office 2010 palette includes back and border colors 
            of free and working hours and days, day headers, grid borders 
            and calendar tabs. 
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.BackgroundGradient.None">
            <summary>
            Use no background gradient.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.BackgroundGradient.Automatic">
            <summary>
            Use a gradient that matches the current system Visual Style.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.BackgroundGradient.Silver">
            <summary>
            Use a silver background gradient.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.BackgroundGradient.Blue">
            <summary>
            Use a blue background gradient.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.BackgroundGradient.Gold">
            <summary>
            Use a gold background gradient.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.BackgroundGradient.Olive">
            <summary>
            Use an olive background gradient.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.BackgroundGradient.Vista">
            <summary>
            Use the Vista-style background gradient.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.GradientMode.None">
            <summary>
            No gradient.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.GradientMode.Horizontal">
            <summary>
            Horizontal gradient (left to right).
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.GradientMode.Vertical">
            <summary>
            Vertical gradient (top to bottom).
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.GradientMode.DiagonalDown">
            <summary>
            Diagonal gradient (left-top to right-bottom).
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.GradientMode.DiagonalUp">
            <summary>
            Diagonal gradient (left-bottom to right-top).
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.GradientMode.Radial">
            <summary>
            Radial gradient.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageAlignment.LeftTop">
            <summary>
            Image is vertically aligned at the top, 
            and horizontally aligned on the left. 
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageAlignment.CenterTop">
            <summary>
            Image is vertically aligned at the top, 
            and horizontally aligned at the center.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageAlignment.RightTop">
            <summary>
            Image is vertically aligned at the top, 
            and horizontally aligned on the right. 
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageAlignment.LeftCenter">
            <summary>
            Image is vertically aligned in the middle, 
            and horizontally aligned on the left. 
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageAlignment.CenterCenter">
            <summary>
            Image is vertically aligned in the middle, 
            and horizontally aligned at the center. 
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageAlignment.RightCenter">
            <summary>
            Image is vertically aligned in the middle, 
            and horizontally aligned on the right. 
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageAlignment.LeftBottom">
            <summary>
            Image is vertically aligned at the bottom, 
            and horizontally aligned on the left. 		
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageAlignment.CenterBottom">
            <summary>
            Image is vertically aligned at the bottom, 
            and horizontally aligned at the center.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageAlignment.RightBottom">
            <summary>
            Image is vertically aligned at the bottom, 
            and horizontally aligned on the right. 
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageScaling.Clip">
            <summary>
            Use the image's original size, clipping it to the display area if necessary.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageScaling.Stretch">
            <summary>
            Stretch the image to fill the display area. 
            This mode will usually change the image's aspect ratio.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageScaling.Scale">
            <summary>
            Scale the image to fit the display area. 
            This mode may increase or reduce the size of the image 
            while maintaining its aspect ratio.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageScaling.Tile">
            <summary>
            Tile the image to fill the display area.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageScaling.TileStretch">
            <summary>
            Tile the image into the 3x3 matrix and stretch it to fill the display area.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageScaling.TileStretchHorizontal">
            <summary>
            Tile the image into the row of 3 images and stretch it to fill the display area.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageScaling.TileStretchVertical">
            <summary>
            Tile the image into the column of 3 images and stretch it to fill the display area.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageScaling.Hide">
            <summary>
            Hide the image.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Alignment.NotSet">
            <summary>
            Default value.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Alignment.Near">
            <summary>
            Near.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Alignment.Far">
            <summary>
            Far.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Alignment.Center">
            <summary>
            Center.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Alignment.Spread">
            <summary>
            Spread.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.TextDirection.Normal">
            <summary>
            Text is drawn in the horizontal direction, left to right.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.TextDirection.Up">
            <summary>
            Text is draw vertically, from the bottom up.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.TextDirection.Down">
            <summary>
            Text is draw vertically, from the top down.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.RadialMenuTooltipPosition.None">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.RadialMenuTooltipPosition.Left">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.RadialMenuTooltipPosition.Top">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.RadialMenuTooltipPosition.Right">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.RadialMenuTooltipPosition.Bottom">
            <summary>For internal use.</summary>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.ImageSetEnum">
            <summary>
            Describes the image set used for toolbar images of the
            preview actions.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageSetEnum.Classic">
            <summary>
            Classic image set.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageSetEnum.XP">
            <summary>
            XP image set.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageSetEnum.XP2">
            <summary>
            XP alternative image set.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageSetEnum.XP3">
            <summary>
            XP second alternative image set.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageSetEnum.Adobe">
            <summary>
            Adobe image set.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageSetEnum.OsX">
            <summary>
            Os X image set.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageSetEnum.Original">
            <summary>
            Original (C1Preview "classic") image set.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_BorderDirEnum.Both">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_BorderDirEnum.Horizontal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_BorderDirEnum.Vertical">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_BorderStyleEnum.None">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_BorderStyleEnum.Flat">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_BorderStyleEnum.Double">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_BorderStyleEnum.Raised">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_BorderStyleEnum.Inset">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_BorderStyleEnum.Groove">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_BorderStyleEnum.Fillet">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_BorderStyleEnum.Dotted">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_DisplayEnum.TextOnly">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_DisplayEnum.ImageOnly">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_DisplayEnum.Overlay">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_DisplayEnum.Stack">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_DisplayEnum.None">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_ImageAlignEnum.LeftTop">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_ImageAlignEnum.LeftCenter">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_ImageAlignEnum.LeftBottom">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_ImageAlignEnum.CenterTop">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_ImageAlignEnum.CenterCenter">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_ImageAlignEnum.CenterBottom">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_ImageAlignEnum.RightTop">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_ImageAlignEnum.RightCenter">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_ImageAlignEnum.RightBottom">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_ImageAlignEnum.Scale">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_ImageAlignEnum.Stretch">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_ImageAlignEnum.Tile">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_ImageAlignEnum.Hide">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_ImageAlignEnum.TileStretch">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TextAlignEnum.LeftTop">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TextAlignEnum.LeftCenter">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TextAlignEnum.LeftBottom">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TextAlignEnum.CenterTop">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TextAlignEnum.CenterCenter">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TextAlignEnum.CenterBottom">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TextAlignEnum.RightTop">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TextAlignEnum.RightCenter">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TextAlignEnum.RightBottom">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TextAlignEnum.GeneralTop">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TextAlignEnum.GeneralCenter">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TextAlignEnum.GeneralBottom">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TextDirectionEnum.Normal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TextDirectionEnum.Up">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TextDirectionEnum.Down">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TextEffectEnum.Flat">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TextEffectEnum.Raised">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TextEffectEnum.Inset">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TreeStyleFlags.None">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TreeStyleFlags.Lines">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TreeStyleFlags.Symbols">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TreeStyleFlags.ButtonBar">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TreeStyleFlags.Leaf">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TreeStyleFlags.Complete">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TreeStyleFlags.Simple">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TreeStyleFlags.CompleteLeaf">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TreeStyleFlags.SimpleLeaf">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_FocusRectEnum.None">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_FocusRectEnum.Light">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_FocusRectEnum.Heavy">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_FocusRectEnum.Solid">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_FocusRectEnum.Raised">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_FocusRectEnum.Inset">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_BarShape.None">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_BarShape.ThickBar">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_BarShape.TopBar">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_BarShape.MiddleBar">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_BarShape.BottomBar">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_BarShape.TopLine">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_BarShape.MiddleLine">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_BarShape.BottomLine">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_BarShape.Frame">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_BarShape.HalfFrame">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_HatchPattern.Empty">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_HatchPattern.SolidBrush">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_HatchPattern.Gradient">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_HatchPattern.Percent25">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_HatchPattern.Percent50">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_HatchPattern.Percent70">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_HatchPattern.ForwardDiagonal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_HatchPattern.BackwardDiagonal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_HatchPattern.DiagonalCross">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_HatchPattern.Vertical">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_HatchPattern.Horizontal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_HatchPattern.NarrowVertical">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_HatchPattern.NarrowHorizontal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_HatchPattern.Confetti">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_HatchPattern.ZigZag">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_TaskProperty.None">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_TaskProperty.Name">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_TaskProperty.Mode">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_TaskProperty.Calendar">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_TaskProperty.Duration">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_TaskProperty.DurationUnits">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_TaskProperty.Start">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_TaskProperty.Finish">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_TaskProperty.PercentComplete">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_TaskProperty.Deadline">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_TaskProperty.ConstraintType">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_TaskProperty.ConstraintDate">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_TaskProperty.Predecessors">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_TaskProperty.ResourceNames">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_TaskProperty.Notes">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_ProgressLineStyle.None">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_ProgressLineStyle.Solid">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_ProgressLineStyle.Dash">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_ProgressLineStyle.Dot">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_ProgressLineStyle.DashDot">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_ProgressLineStyle.DashDotDot">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Ribbon_ThemeColor.Azure">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Ribbon_ThemeColor.Blue">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Ribbon_ThemeColor.Green">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Ribbon_ThemeColor.Orange">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Ribbon_ThemeColor.Orchid">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Ribbon_ThemeColor.Red">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Ribbon_ThemeColor.Teal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Ribbon_ThemeColor.Violet">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Ribbon_ThemeLightness.DarkGray">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Ribbon_ThemeLightness.LightGray">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Ribbon_ThemeLightness.White">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.CopyCurrentToCustom">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Custom">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Standard">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Office">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.GrayScale">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Apex">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Aspect">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Civic">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Concourse">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Equity">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Flow">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Foundry">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Median">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Metro">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Module">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Opulent">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Oriel">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Origin">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Paper">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Solstice">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Technic">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Trek">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Urban">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Verve">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_GradientStyleEnum.None">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_GradientStyleEnum.Horizontal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_GradientStyleEnum.HorizontalCenter">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_GradientStyleEnum.Vertical">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_GradientStyleEnum.VerticalCenter">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_GradientStyleEnum.Diagonal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_GradientStyleEnum.DiagonalCenter">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_GradientStyleEnum.DiagonalBack">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_GradientStyleEnum.DiagonalBackCenter">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_GradientStyleEnum.Radial">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_GradientStyleEnum.FromCenter">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.None">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Horizontal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Vertical">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.ForwardDiagonal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.BackwardDiagonal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Cross">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.DiagonalCross">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Percent05">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Percent10">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Percent20">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Percent25">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Percent30">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Percent40">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Percent50">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Percent60">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Percent70">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Percent75">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Percent80">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Percent90">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.LightDownwardDiagonal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.LightUpwardDiagonal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.DarkDownwardDiagonal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.DarkUpwardDiagonal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.WideDownwardDiagonal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.WideUpwardDiagonal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.LightVertical">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.LightHorizontal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.NarrowVertical">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.NarrowHorizontal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.DarkVertical">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.DarkHorizontal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.DashedDownwardDiagonal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.DashedUpwardDiagonal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.DashedHorizontal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.DashedVertical">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.SmallConfetti">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.LargeConfetti">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.ZigZag">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Wave">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.DiagonalBrick">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.HorizontalBrick">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Weave">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Plaid">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Divot">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.DottedGrid">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.DottedDiamond">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Shingle">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Trellis">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Sphere">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.SmallGrid">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.SmallCheckerBoard">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.LargeCheckerBoard">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.OutlinedDiamond">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.SolidDiamond">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_AlignImageEnum.Hide">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_AlignImageEnum.Left">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_AlignImageEnum.Right">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_AlignImageEnum.Top">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_AlignImageEnum.Bottom">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_AlignImageEnum.Center">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_AlignImageEnum.Scale">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_AlignImageEnum.Stretch">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_AlignImageEnum.Tile">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_RotationEnum.Rotate0">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_RotationEnum.Rotate90">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_RotationEnum.Rotate180">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_RotationEnum.Rotate270">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_BorderStyleEnum.NotSet">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_BorderStyleEnum.None">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_BorderStyleEnum.Empty">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_BorderStyleEnum.Solid">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_BorderStyleEnum.Raised">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_BorderStyleEnum.Inset">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_BorderStyleEnum.RaisedBevel">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_BorderStyleEnum.InsetBevel">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_BorderStyleEnum.Groove">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_BorderStyleEnum.Fillet">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_BorderStyleEnum.Double">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_BorderStyleEnum.Dashed">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_BorderStyleEnum.Opaque">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.Custom">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.System">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.Office2007Blue">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.Office2007Black">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.Office2007Silver">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.Office2010Blue">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.Office2010Black">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.Office2010Silver">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.Windows7">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.WinXPBlue">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.WinXPSilver">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.WinXPOlive">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.Royale">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.Yahoo">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.Aero">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.Office2003Blue">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.Office2003Olive">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.Office2003Silver">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.OfficeXP">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.Classic">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.WindowsXP">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.ThemeBrushBase">
            <summary>
            Abstract base class for all classes representing a brush in a theme.
            Use the <see cref="M:C1.Win.C1Themes.Shared.ThemeBrushBase.GetBrush(System.Drawing.Rectangle)"/> method to get an actual matching GDI+ brush.
            Classes derived from <see cref="T:C1.Win.C1Themes.Shared.ThemeBrushBase"/> override Equals() and
            GetHashCode() methods and compare objects by content rather than by references.
            </summary>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeBrushBase.EncodeValues(C1.Win.C1Themes.Shared.Utils.ValuesStore)">
            <summary>
            For internal use.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeBrushBase.DecodeValues(C1.Win.C1Themes.Shared.Utils.ValuesStore)">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeBrushBase.AssignFrom(C1.Win.C1Themes.Shared.ThemeBrushBase)">
            <summary>
            Assigns (copies) properties from another <see cref="T:C1.Win.C1Themes.Shared.ThemeBrushBase"/> to the current object.
            </summary>
            <param name="source">The source object to copy properties from.</param>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeBrushBase.Clone">
            <summary>
            Creates an exact copy of this <see cref="T:C1.Win.C1Themes.Shared.ThemeBrushBase"/>.
            </summary>
            <returns>The <see cref="T:C1.Win.C1Themes.Shared.ThemeBrushBase"/> this method creates.</returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeBrushBase.GetBrush(System.Drawing.Rectangle)">
            <summary>
            Returns a GDI+ brush matching the theme brush.
            It is the caller's responsibility to dispose this brush when it is no longer needed.
            </summary>
            <param name="brushRect">The brush rectangle (used for gradient brushes).</param>
            <returns>The GDI+ <see cref="T:System.Drawing.Brush"/> object.</returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeBrushBase.DependOnRect">
            <summary>
            Returns true if a GDI+ brush created for this theme brush depends on the rectangle
            passed to the <see cref="M:C1.Win.C1Themes.Shared.ThemeBrushBase.GetBrush(System.Drawing.Rectangle)"/> method. E.g. gradient brushes return
            true in this method while solid return false.
            </summary>
            <returns>True if the GDI+ brush depends on the application area, false otherwise.</returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeBrushBase.EncodeToString">
            <summary>
            Encodes this <see cref="T:C1.Win.C1Themes.Shared.ThemeBrushBase"/> object to string.
            </summary>
            <returns>String represengin this <see cref="T:C1.Win.C1Themes.Shared.ThemeBrushBase"/> object.</returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeBrushBase.IsBrushesEqual(C1.Win.C1Themes.Shared.ThemeBrushBase,C1.Win.C1Themes.Shared.ThemeBrushBase)">
            <summary>
            Checks whether the two <see cref="T:C1.Win.C1Themes.Shared.ThemeBrushBase"/> objects are equal by value
            (i.e. represent identically described theme brushes).
            </summary>
            <param name="tb1">First <see cref="T:C1.Win.C1Themes.Shared.ThemeBrushBase"/> object.</param>
            <param name="tb2">Second <see cref="T:C1.Win.C1Themes.Shared.ThemeBrushBase"/> object.</param>
            <returns>True if the two brushes are identical, or are both null.</returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeBrushBase.TryDecodeFromString(System.String,C1.Win.C1Themes.Shared.ThemeBrushBase@)">
            <summary>
            Create <see cref="T:C1.Win.C1Themes.Shared.ThemeBrushBase"/> object from specified string.
            </summary>
            <param name="s">String representing <see cref="T:C1.Win.C1Themes.Shared.ThemeBrushBase"/> object.</param>
            <param name="value"><see cref="T:C1.Win.C1Themes.Shared.ThemeBrushBase"/> object created from string.</param>
            <returns>True if string was successfully parsed, false otherwise.</returns>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.ThemeSolidBrush">
            <summary>
            Represents a solid theme brush.
            </summary>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeSolidBrush.EncodeValues(C1.Win.C1Themes.Shared.Utils.ValuesStore)">
            <summary>
            For internal use.
            </summary>
            <param name="store"></param>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeSolidBrush.DecodeValues(C1.Win.C1Themes.Shared.Utils.ValuesStore)">
            <summary>
            For internal use.
            </summary>
            <param name="store"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeSolidBrush.AssignFrom(C1.Win.C1Themes.Shared.ThemeBrushBase)">
            <summary>
            Overridden, assigns (copies) properties from another <see cref="T:C1.Win.C1Themes.Shared.ThemeBrushBase"/> to the current object.
            </summary>
            <param name="source">The source object to copy properties from.</param>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeSolidBrush.GetBrush(System.Drawing.Rectangle)">
            <summary>
            Overridden, creates a GDI+ <see cref="T:System.Drawing.SolidBrush"/> matching this <see cref="T:C1.Win.C1Themes.Shared.ThemeSolidBrush"/> object.
            Can return null if color is not specified or transparent.
            </summary>
            <param name="brushRect">Target application area for the brush (ignored).</param>
            <returns>A <see cref="T:System.Drawing.SolidBrush"/> object.</returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeSolidBrush.DependOnRect">
            <summary>
            For internal use.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeSolidBrush.GetHashCode">
            <summary>
            For internal use.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeSolidBrush.Equals(System.Object)">
            <summary>
            For internal use.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1Themes.Shared.ThemeSolidBrush.Color">
            <summary>
            Gets or sets the color of this solid brush.
            </summary>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.ThemeGradientBrush">
            <summary>
            Abstract base class for gradient theme brushes.
            </summary>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeGradientBrush.DependOnRect">
            <summary>
            For internal use.
            </summary>
            <returns></returns>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.ThemeLinearBrush">
            <summary>
            Abstract base class for linear gradient theme brushes.
            </summary>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeLinearBrush.EncodeValues(C1.Win.C1Themes.Shared.Utils.ValuesStore)">
            <summary>
            For internal use.
            </summary>
            <param name="store"></param>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeLinearBrush.DecodeValues(C1.Win.C1Themes.Shared.Utils.ValuesStore)">
            <summary>
            For internal use.
            </summary>
            <param name="store"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeLinearBrush.AssignFrom(C1.Win.C1Themes.Shared.ThemeBrushBase)">
            <summary>
            Overridden, assigns (copies) properties from another <see cref="T:C1.Win.C1Themes.Shared.ThemeBrushBase"/> to the current object.
            </summary>
            <param name="source">The source object to copy properties from.</param>
        </member>
        <member name="P:C1.Win.C1Themes.Shared.ThemeLinearBrush.GammaCorrection">
            <summary>
            Gets or sets a value indicating whether gamma correction is enabled,
            same as LinearGradientBrush.GammaCorrection.
            </summary>
        </member>
        <member name="P:C1.Win.C1Themes.Shared.ThemeLinearBrush.Angle">
            <summary>
            Gets or sets the angle, measured in degrees clockwise from the x-axis,
            of the gradient's orientation line. 
            </summary>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.ThemeTwoColorLinearBrush">
            <summary>
            Represents a linear gradient brush based on the starting and ending colors,
            and a <see cref="P:C1.Win.C1Themes.Shared.ThemeTwoColorLinearBrush.Blend"/> object.
            </summary>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeTwoColorLinearBrush.EncodeValues(C1.Win.C1Themes.Shared.Utils.ValuesStore)">
            <summary>
            For internal use.
            </summary>
            <param name="store"></param>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeTwoColorLinearBrush.DecodeValues(C1.Win.C1Themes.Shared.Utils.ValuesStore)">
            <summary>
            For internal use.
            </summary>
            <param name="store"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeTwoColorLinearBrush.AssignFrom(C1.Win.C1Themes.Shared.ThemeBrushBase)">
            <summary>
            Overridden, assigns (copies) properties from another <see cref="T:C1.Win.C1Themes.Shared.ThemeBrushBase"/> to the current object.
            </summary>
            <param name="source">The source object to copy properties from.</param>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeTwoColorLinearBrush.GetBrush(System.Drawing.Rectangle)">
            <summary>
            Overridden, creates a <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush"/> matching this <see cref="T:C1.Win.C1Themes.Shared.ThemeTwoColorLinearBrush"/> object.
            </summary>
            <param name="brushRect">The gradient rectangle.</param>
            <returns>A <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush"/> object.</returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeTwoColorLinearBrush.GetHashCode">
            <summary>
            For internal use.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeTwoColorLinearBrush.Equals(System.Object)">
            <summary>
            For internal use.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1Themes.Shared.ThemeTwoColorLinearBrush.StartColor">
            <summary>
            Gets or sets the starting gradient color.
            </summary>
        </member>
        <member name="P:C1.Win.C1Themes.Shared.ThemeTwoColorLinearBrush.EndColor">
            <summary>
            Gets or sets the ending gradient color.
            </summary>
        </member>
        <member name="P:C1.Win.C1Themes.Shared.ThemeTwoColorLinearBrush.Blend">
            <summary>
            Gets or sets the <see cref="P:C1.Win.C1Themes.Shared.ThemeTwoColorLinearBrush.Blend"/> object. Can be null.
            </summary>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.ThemeMultiColorLinearBrush">
            <summary>
            Represents a multicolor linear gradient brush.
            </summary>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeMultiColorLinearBrush.EncodeValues(C1.Win.C1Themes.Shared.Utils.ValuesStore)">
            <summary>
            For internal use.
            </summary>
            <param name="store"></param>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeMultiColorLinearBrush.DecodeValues(C1.Win.C1Themes.Shared.Utils.ValuesStore)">
            <summary>
            For internal use.
            </summary>
            <param name="store"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeMultiColorLinearBrush.AssignFrom(C1.Win.C1Themes.Shared.ThemeBrushBase)">
            <summary>
            Overridden, assigns (copies) properties from another <see cref="T:C1.Win.C1Themes.Shared.ThemeBrushBase"/> to the current object.
            </summary>
            <param name="source">The source object to copy properties from.</param>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeMultiColorLinearBrush.GetBrush(System.Drawing.Rectangle)">
            <summary>
            Overridden, creates a <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush"/> matching this <see cref="T:C1.Win.C1Themes.Shared.ThemeMultiColorLinearBrush"/> object.
            </summary>
            <param name="brushRect">Gradient brush rectangle.</param>
            <returns>A <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush"/> object.</returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeMultiColorLinearBrush.GetHashCode">
            <summary>
            For internal use.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeMultiColorLinearBrush.Equals(System.Object)">
            <summary>
            For internal use.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1Themes.Shared.ThemeMultiColorLinearBrush.InterpolationColors">
            <summary>
            Gets or sets a <see cref="T:System.Drawing.Drawing2D.ColorBlend"/> that defines a multicolor linear gradient.
            </summary>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.ThemeRadialBrush">
            <summary>
            Abstract base class for radial gradient theme brushes.
            </summary>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeRadialBrush.CreateBrush(System.Drawing.Rectangle)">
            <summary>
            For internal use.
            </summary>
            <param name="brushRect"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeRadialBrush.EncodeValues(C1.Win.C1Themes.Shared.Utils.ValuesStore)">
            <summary>
            For internal use.
            </summary>
            <param name="store"></param>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeRadialBrush.DecodeValues(C1.Win.C1Themes.Shared.Utils.ValuesStore)">
            <summary>
            For internal use.
            </summary>
            <param name="store"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeRadialBrush.AssignFrom(C1.Win.C1Themes.Shared.ThemeBrushBase)">
            <summary>
            Overridden, assigns (copies) properties from another <see cref="T:C1.Win.C1Themes.Shared.ThemeBrushBase"/> to the current object.
            </summary>
            <param name="source">The source object to copy properties from.</param>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeRadialBrush.DependOnRect">
            <summary>
            For internal use.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1Themes.Shared.ThemeRadialBrush.Center">
            <summary>
            Gets or sets a <see cref="T:System.Drawing.Point"/> structure that defines position
            of center point.
            (0,0) is the top-left corner, (100,100) is the bottom-right corner.
            </summary>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.ThemeTwoColorRadialBrush">
            <summary>
            Represents a radial gradient brush based on center point,
            surrounding color and a <see cref="P:C1.Win.C1Themes.Shared.ThemeTwoColorRadialBrush.Blend"/> object.
            </summary>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeTwoColorRadialBrush.EncodeValues(C1.Win.C1Themes.Shared.Utils.ValuesStore)">
            <summary>
            For internal use.
            </summary>
            <param name="store"></param>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeTwoColorRadialBrush.DecodeValues(C1.Win.C1Themes.Shared.Utils.ValuesStore)">
            <summary>
            For internal use.
            </summary>
            <param name="store"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeTwoColorRadialBrush.AssignFrom(C1.Win.C1Themes.Shared.ThemeBrushBase)">
            <summary>
            Overridden, assigns (copies) properties from another <see cref="T:C1.Win.C1Themes.Shared.ThemeBrushBase"/> to the current object.
            </summary>
            <param name="source">The source object to copy properties from.</param>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeTwoColorRadialBrush.GetBrush(System.Drawing.Rectangle)">
            <summary>
            Overridden, creates a <see cref="T:System.Drawing.Drawing2D.PathGradientBrush"/> matching this <see cref="T:C1.Win.C1Themes.Shared.ThemeTwoColorRadialBrush"/> object.
            </summary>
            <param name="brushRect">The gradient rectangle.</param>
            <returns>A <see cref="T:System.Drawing.Drawing2D.PathGradientBrush"/> object.</returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeTwoColorRadialBrush.Equals(System.Object)">
            <summary>
            For internal use.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeTwoColorRadialBrush.GetHashCode">
            <summary>
            For internal use.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1Themes.Shared.ThemeTwoColorRadialBrush.CenterColor">
            <summary>
            Gets or sets the color at the center of the radial gradient.
            </summary>
        </member>
        <member name="P:C1.Win.C1Themes.Shared.ThemeTwoColorRadialBrush.SurroundColor">
            <summary>
            Gets or sets the surrounding color of the radial gradient.
            </summary>
        </member>
        <member name="P:C1.Win.C1Themes.Shared.ThemeTwoColorRadialBrush.Blend">
            <summary>
            Gets or sets the <see cref="P:C1.Win.C1Themes.Shared.ThemeTwoColorRadialBrush.Blend"/> object. Can be null.
            </summary>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.ThemeMultiColorRadialBrush">
            <summary>
            Represents a multicolor radial gradient brush.
            </summary>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeMultiColorRadialBrush.EncodeValues(C1.Win.C1Themes.Shared.Utils.ValuesStore)">
            <summary>
            For internal use.
            </summary>
            <param name="store"></param>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeMultiColorRadialBrush.DecodeValues(C1.Win.C1Themes.Shared.Utils.ValuesStore)">
            <summary>
            For internal use.
            </summary>
            <param name="store"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeMultiColorRadialBrush.AssignFrom(C1.Win.C1Themes.Shared.ThemeBrushBase)">
            <summary>
            Overridden, assigns (copies) properties from another <see cref="T:C1.Win.C1Themes.Shared.ThemeBrushBase"/> to the current object.
            </summary>
            <param name="source">The source object to copy properties from.</param>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeMultiColorRadialBrush.GetBrush(System.Drawing.Rectangle)">
            <summary>
            Overridden, creates a <see cref="T:System.Drawing.Drawing2D.PathGradientBrush"/> matching this <see cref="T:C1.Win.C1Themes.Shared.ThemeMultiColorRadialBrush"/> object.
            </summary>
            <param name="brushRect">The gradient rectangle.</param>
            <returns>A <see cref="T:System.Drawing.Drawing2D.PathGradientBrush"/> object.</returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeMultiColorRadialBrush.Equals(System.Object)">
            <summary>
            For internal use.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeMultiColorRadialBrush.GetHashCode">
            <summary>
            For internal use.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1Themes.Shared.ThemeMultiColorRadialBrush.InterpolationColors">
            <summary>
            Gets or sets a <see cref="T:System.Drawing.Drawing2D.ColorBlend"/> that defines this multicolor radiant gradient.
            </summary>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeBrushHelper.CreateThemeBrushNoTransparentOrEmpty(C1.Win.C1Themes.Shared.C1ThemeProxy,System.String,C1.Win.C1Themes.Shared.ThemeBrushBase)">
            <summary>
            Creates brush based on specified theme path.
            Returns defaultValue if brush can not be created or it is solid and color is transparent or empty.
            </summary>
            <param name="themeProxy"></param>
            <param name="path"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1Themes.Shared.ThemeBrushHelper.ForeignBrush">
            <summary>
            Gets or sets a brush object which is stored but not managed by this ThemeBrushHelper -
            i.e. it will not be disposed when this ThemeBrushHelper is disposed, or a new brush is
            assigned to it.
            Note that while the 'get' accessor is provided for this property, there is no need to use it -
            just use the <see cref="M:C1.Win.C1Themes.Shared.ThemeBrushHelper.GetBrush(System.Drawing.Rectangle)"/> method to get a usable GDI+ brush.
            </summary>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.Utils.Utils.IsBlendEqual(System.Drawing.Drawing2D.Blend,System.Drawing.Drawing2D.Blend)">
            <summary>
            For internal use.
            </summary>
            <param name="b1"></param>
            <param name="b2"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.Utils.Utils.IsColorBlendEqual(System.Drawing.Drawing2D.ColorBlend,System.Drawing.Drawing2D.ColorBlend)">
            <summary>
            For internal use.
            </summary>
            <param name="cb1"></param>
            <param name="cb2"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.Utils.Utils.GradientModeToAngle(C1.Win.C1Themes.Shared.GradientMode)">
            <summary>
            For internal use.
            </summary>
            <param name="gradientMode"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.Utils.Utils.AngleToGradientMode(System.Single)">
            <summary>
            For internal use.
            </summary>
            <param name="angle"></param>
            <returns></returns>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.ThemeVersions">
            <summary>
            Versions of c1theme XML.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVersions.c_PlatformVersionPrefix">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVersions.c_InitialFormatVersion">
            <summary>
            First public versions of C1Themes.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVersions.c_NewBackgroundsFormatVersion">
            <summary>
            Version of theme XML when structure of BackgroundProp was changed.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVersions.c_NewRibbonFormatVersion">
            <summary>
            Version of theme XML when structure of C1Ribbon theme was changed
            </summary>
        </member>
    </members>
</doc>
